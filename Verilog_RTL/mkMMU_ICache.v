//
// Generated by Bluespec Compiler (build 7d25cde)
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    64 reg
// cword_fst                      O     1
// cword_snd                      O   128
// st_amo_val_fst                 O     1 const
// st_amo_val_snd                 O   128 const
// exc                            O     1
// exc_code                       O     6 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_aw_canPeek          O     1 reg
// mem_master_aw_peek             O    98 reg
// RDY_mem_master_aw_peek         O     1 reg
// RDY_mem_master_aw_drop         O     1 reg
// mem_master_w_canPeek           O     1 reg
// mem_master_w_peek              O    74 reg
// RDY_mem_master_w_peek          O     1 reg
// RDY_mem_master_w_drop          O     1 reg
// mem_master_b_canPut            O     1 reg
// RDY_mem_master_b_put           O     1 reg
// mem_master_ar_canPeek          O     1 reg
// mem_master_ar_peek             O    98 reg
// RDY_mem_master_ar_peek         O     1 reg
// RDY_mem_master_ar_drop         O     1 reg
// mem_master_r_canPut            O     1 reg
// RDY_mem_master_r_put           O     1 reg
// RDY_ma_ddr4_ready              O     1 const
// mv_status                      O     8
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     1
// req_width_code                 I     3
// req_is_unsigned                I     1 reg
// req_addr                       I    64
// req_st_value                   I   129 unused
// req_priv                       I     2 unused
// req_sstatus_SUM                I     1 unused
// req_mstatus_MXR                I     1 unused
// req_satp                       I    64 unused
// mem_master_b_put_val           I     7 reg
// mem_master_r_put_val           I    73 reg
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_commit                      I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1 unused
// EN_mem_master_aw_drop          I     1
// EN_mem_master_w_drop           I     1
// EN_mem_master_b_put            I     1
// EN_mem_master_ar_drop          I     1
// EN_mem_master_r_put            I     1
// EN_ma_ddr4_ready               I     1
//
// Combinational paths from inputs to outputs:
//   EN_commit -> valid
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_ICache(CLK,
		    RST_N,

		    set_verbosity_verbosity,
		    EN_set_verbosity,
		    RDY_set_verbosity,

		    EN_server_reset_request_put,
		    RDY_server_reset_request_put,

		    EN_server_reset_response_get,
		    RDY_server_reset_response_get,

		    req_op,
		    req_width_code,
		    req_is_unsigned,
		    req_addr,
		    req_st_value,
		    req_priv,
		    req_sstatus_SUM,
		    req_mstatus_MXR,
		    req_satp,
		    EN_req,

		    EN_commit,

		    valid,

		    addr,

		    cword_fst,

		    cword_snd,

		    st_amo_val_fst,

		    st_amo_val_snd,

		    exc,

		    exc_code,

		    EN_server_flush_request_put,
		    RDY_server_flush_request_put,

		    EN_server_flush_response_get,
		    RDY_server_flush_response_get,

		    EN_tlb_flush,
		    RDY_tlb_flush,

		    mem_master_aw_canPeek,

		    mem_master_aw_peek,
		    RDY_mem_master_aw_peek,

		    EN_mem_master_aw_drop,
		    RDY_mem_master_aw_drop,

		    mem_master_w_canPeek,

		    mem_master_w_peek,
		    RDY_mem_master_w_peek,

		    EN_mem_master_w_drop,
		    RDY_mem_master_w_drop,

		    mem_master_b_canPut,

		    mem_master_b_put_val,
		    EN_mem_master_b_put,
		    RDY_mem_master_b_put,

		    mem_master_ar_canPeek,

		    mem_master_ar_peek,
		    RDY_mem_master_ar_peek,

		    EN_mem_master_ar_drop,
		    RDY_mem_master_ar_drop,

		    mem_master_r_canPut,

		    mem_master_r_put_val,
		    EN_mem_master_r_put,
		    RDY_mem_master_r_put,

		    EN_ma_ddr4_ready,
		    RDY_ma_ddr4_ready,

		    mv_status);
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  req_op;
  input  [2 : 0] req_width_code;
  input  req_is_unsigned;
  input  [63 : 0] req_addr;
  input  [128 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [63 : 0] req_satp;
  input  EN_req;

  // action method commit
  input  EN_commit;

  // value method valid
  output valid;

  // value method addr
  output [63 : 0] addr;

  // value method cword_fst
  output cword_fst;

  // value method cword_snd
  output [127 : 0] cword_snd;

  // value method st_amo_val_fst
  output st_amo_val_fst;

  // value method st_amo_val_snd
  output [127 : 0] st_amo_val_snd;

  // value method exc
  output exc;

  // value method exc_code
  output [5 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_aw_canPeek
  output mem_master_aw_canPeek;

  // value method mem_master_aw_peek
  output [97 : 0] mem_master_aw_peek;
  output RDY_mem_master_aw_peek;

  // action method mem_master_aw_drop
  input  EN_mem_master_aw_drop;
  output RDY_mem_master_aw_drop;

  // value method mem_master_w_canPeek
  output mem_master_w_canPeek;

  // value method mem_master_w_peek
  output [73 : 0] mem_master_w_peek;
  output RDY_mem_master_w_peek;

  // action method mem_master_w_drop
  input  EN_mem_master_w_drop;
  output RDY_mem_master_w_drop;

  // value method mem_master_b_canPut
  output mem_master_b_canPut;

  // action method mem_master_b_put
  input  [6 : 0] mem_master_b_put_val;
  input  EN_mem_master_b_put;
  output RDY_mem_master_b_put;

  // value method mem_master_ar_canPeek
  output mem_master_ar_canPeek;

  // value method mem_master_ar_peek
  output [97 : 0] mem_master_ar_peek;
  output RDY_mem_master_ar_peek;

  // action method mem_master_ar_drop
  input  EN_mem_master_ar_drop;
  output RDY_mem_master_ar_drop;

  // value method mem_master_r_canPut
  output mem_master_r_canPut;

  // action method mem_master_r_put
  input  [72 : 0] mem_master_r_put_val;
  input  EN_mem_master_r_put;
  output RDY_mem_master_r_put;

  // action method ma_ddr4_ready
  input  EN_ma_ddr4_ready;
  output RDY_ma_ddr4_ready;

  // value method mv_status
  output [7 : 0] mv_status;

  // signals for module outputs
  wire [127 : 0] cword_snd, st_amo_val_snd;
  wire [97 : 0] mem_master_ar_peek, mem_master_aw_peek;
  wire [73 : 0] mem_master_w_peek;
  wire [63 : 0] addr;
  wire [7 : 0] mv_status;
  wire [5 : 0] exc_code;
  wire RDY_ma_ddr4_ready,
       RDY_mem_master_ar_drop,
       RDY_mem_master_ar_peek,
       RDY_mem_master_aw_drop,
       RDY_mem_master_aw_peek,
       RDY_mem_master_b_put,
       RDY_mem_master_r_put,
       RDY_mem_master_w_drop,
       RDY_mem_master_w_peek,
       RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       cword_fst,
       exc,
       mem_master_ar_canPeek,
       mem_master_aw_canPeek,
       mem_master_b_canPut,
       mem_master_r_canPut,
       mem_master_w_canPeek,
       st_amo_val_fst,
       valid;

  // inlined wires
  wire [128 : 0] cache_dw_output_ld_val$wget;
  wire [3 : 0] cache_ctr_wr_rsps_pending_crg$port0__write_1,
	       cache_ctr_wr_rsps_pending_crg$port1__write_1,
	       cache_ctr_wr_rsps_pending_crg$port2__read,
	       cache_ctr_wr_rsps_pending_crg$port3__read;
  wire cache_ctr_wr_rsps_pending_crg$EN_port2__write,
       cache_dw_valid$wget,
       cache_dw_valid$whas,
       cache_rw_reset_req$whas;

  // register cache_cfg_verbosity
  reg [3 : 0] cache_cfg_verbosity;
  wire [3 : 0] cache_cfg_verbosity$D_IN;
  wire cache_cfg_verbosity$EN;

  // register cache_ctr_wr_rsps_pending_crg
  reg [3 : 0] cache_ctr_wr_rsps_pending_crg;
  wire [3 : 0] cache_ctr_wr_rsps_pending_crg$D_IN;
  wire cache_ctr_wr_rsps_pending_crg$EN;

  // register cache_rg_addr
  reg [63 : 0] cache_rg_addr;
  wire [63 : 0] cache_rg_addr$D_IN;
  wire cache_rg_addr$EN;

  // register cache_rg_cset_cword_in_cache
  reg [7 : 0] cache_rg_cset_cword_in_cache;
  wire [7 : 0] cache_rg_cset_cword_in_cache$D_IN;
  wire cache_rg_cset_cword_in_cache$EN;

  // register cache_rg_cset_in_cache
  reg [5 : 0] cache_rg_cset_in_cache;
  wire [5 : 0] cache_rg_cset_in_cache$D_IN;
  wire cache_rg_cset_in_cache$EN;

  // register cache_rg_ddr4_ready
  reg cache_rg_ddr4_ready;
  wire cache_rg_ddr4_ready$D_IN, cache_rg_ddr4_ready$EN;

  // register cache_rg_error_during_refill
  reg cache_rg_error_during_refill;
  wire cache_rg_error_during_refill$D_IN, cache_rg_error_during_refill$EN;

  // register cache_rg_exc_code
  reg [5 : 0] cache_rg_exc_code;
  reg [5 : 0] cache_rg_exc_code$D_IN;
  wire cache_rg_exc_code$EN;

  // register cache_rg_is_unsigned
  reg cache_rg_is_unsigned;
  wire cache_rg_is_unsigned$D_IN, cache_rg_is_unsigned$EN;

  // register cache_rg_lower_word64
  reg [63 : 0] cache_rg_lower_word64;
  wire [63 : 0] cache_rg_lower_word64$D_IN;
  wire cache_rg_lower_word64$EN;

  // register cache_rg_lower_word64_full
  reg cache_rg_lower_word64_full;
  wire cache_rg_lower_word64_full$D_IN, cache_rg_lower_word64_full$EN;

  // register cache_rg_op
  reg cache_rg_op;
  wire cache_rg_op$D_IN, cache_rg_op$EN;

  // register cache_rg_pa
  reg [63 : 0] cache_rg_pa;
  wire [63 : 0] cache_rg_pa$D_IN;
  wire cache_rg_pa$EN;

  // register cache_rg_state
  reg [4 : 0] cache_rg_state;
  reg [4 : 0] cache_rg_state$D_IN;
  wire cache_rg_state$EN;

  // register cache_rg_victim_way
  reg cache_rg_victim_way;
  wire cache_rg_victim_way$D_IN, cache_rg_victim_way$EN;

  // register cache_rg_width_code
  reg [2 : 0] cache_rg_width_code;
  wire [2 : 0] cache_rg_width_code$D_IN;
  wire cache_rg_width_code$EN;

  // register cache_rg_wr_rsp_err
  reg cache_rg_wr_rsp_err;
  wire cache_rg_wr_rsp_err$D_IN, cache_rg_wr_rsp_err$EN;

  // ports of submodule cache_f_fabric_second_write_reqs
  wire [73 : 0] cache_f_fabric_second_write_reqs$D_IN;
  wire cache_f_fabric_second_write_reqs$CLR,
       cache_f_fabric_second_write_reqs$DEQ,
       cache_f_fabric_second_write_reqs$ENQ,
       cache_f_fabric_second_write_reqs$FULL_N;

  // ports of submodule cache_f_fabric_write_reqs
  wire [195 : 0] cache_f_fabric_write_reqs$D_IN,
		 cache_f_fabric_write_reqs$D_OUT;
  wire cache_f_fabric_write_reqs$CLR,
       cache_f_fabric_write_reqs$DEQ,
       cache_f_fabric_write_reqs$EMPTY_N,
       cache_f_fabric_write_reqs$ENQ;

  // ports of submodule cache_f_reset_reqs
  wire cache_f_reset_reqs$CLR,
       cache_f_reset_reqs$DEQ,
       cache_f_reset_reqs$D_IN,
       cache_f_reset_reqs$D_OUT,
       cache_f_reset_reqs$EMPTY_N,
       cache_f_reset_reqs$ENQ,
       cache_f_reset_reqs$FULL_N;

  // ports of submodule cache_f_reset_rsps
  wire cache_f_reset_rsps$CLR,
       cache_f_reset_rsps$DEQ,
       cache_f_reset_rsps$D_IN,
       cache_f_reset_rsps$D_OUT,
       cache_f_reset_rsps$EMPTY_N,
       cache_f_reset_rsps$ENQ,
       cache_f_reset_rsps$FULL_N;

  // ports of submodule cache_masterPortShim_arff
  wire [97 : 0] cache_masterPortShim_arff$D_IN,
		cache_masterPortShim_arff$D_OUT;
  wire cache_masterPortShim_arff$CLR,
       cache_masterPortShim_arff$DEQ,
       cache_masterPortShim_arff$EMPTY_N,
       cache_masterPortShim_arff$ENQ,
       cache_masterPortShim_arff$FULL_N;

  // ports of submodule cache_masterPortShim_awff
  wire [97 : 0] cache_masterPortShim_awff$D_IN,
		cache_masterPortShim_awff$D_OUT;
  wire cache_masterPortShim_awff$CLR,
       cache_masterPortShim_awff$DEQ,
       cache_masterPortShim_awff$EMPTY_N,
       cache_masterPortShim_awff$ENQ,
       cache_masterPortShim_awff$FULL_N;

  // ports of submodule cache_masterPortShim_bff
  wire [6 : 0] cache_masterPortShim_bff$D_IN, cache_masterPortShim_bff$D_OUT;
  wire cache_masterPortShim_bff$CLR,
       cache_masterPortShim_bff$DEQ,
       cache_masterPortShim_bff$EMPTY_N,
       cache_masterPortShim_bff$ENQ,
       cache_masterPortShim_bff$FULL_N;

  // ports of submodule cache_masterPortShim_rff
  wire [72 : 0] cache_masterPortShim_rff$D_IN, cache_masterPortShim_rff$D_OUT;
  wire cache_masterPortShim_rff$CLR,
       cache_masterPortShim_rff$DEQ,
       cache_masterPortShim_rff$EMPTY_N,
       cache_masterPortShim_rff$ENQ,
       cache_masterPortShim_rff$FULL_N;

  // ports of submodule cache_masterPortShim_wff
  wire [73 : 0] cache_masterPortShim_wff$D_IN, cache_masterPortShim_wff$D_OUT;
  wire cache_masterPortShim_wff$CLR,
       cache_masterPortShim_wff$DEQ,
       cache_masterPortShim_wff$EMPTY_N,
       cache_masterPortShim_wff$ENQ,
       cache_masterPortShim_wff$FULL_N;

  // ports of submodule cache_ram_cword_set
  reg [257 : 0] cache_ram_cword_set$DIB;
  reg [7 : 0] cache_ram_cword_set$ADDRB;
  wire [257 : 0] cache_ram_cword_set$DIA, cache_ram_cword_set$DOB;
  wire [7 : 0] cache_ram_cword_set$ADDRA;
  wire cache_ram_cword_set$ENA,
       cache_ram_cword_set$ENB,
       cache_ram_cword_set$WEA,
       cache_ram_cword_set$WEB;

  // ports of submodule cache_ram_state_and_ctag_cset
  wire [105 : 0] cache_ram_state_and_ctag_cset$DIA,
		 cache_ram_state_and_ctag_cset$DIB,
		 cache_ram_state_and_ctag_cset$DOB;
  wire [5 : 0] cache_ram_state_and_ctag_cset$ADDRA,
	       cache_ram_state_and_ctag_cset$ADDRB;
  wire cache_ram_state_and_ctag_cset$ENA,
       cache_ram_state_and_ctag_cset$ENB,
       cache_ram_state_and_ctag_cset$WEA,
       cache_ram_state_and_ctag_cset$WEB;

  // rule scheduling signals
  wire CAN_FIRE_RL_cache_do_req,
       CAN_FIRE_RL_cache_do_reset_req,
       CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_cache_rl_discard_write_rsp,
       CAN_FIRE_RL_cache_rl_drive_exception_rsp,
       CAN_FIRE_RL_cache_rl_fabric_send_write_req,
       CAN_FIRE_RL_cache_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_cache_rl_rereq,
       CAN_FIRE_RL_cache_rl_reset,
       CAN_FIRE_RL_cache_rl_start_cache_refill,
       CAN_FIRE_RL_cache_rl_start_reset,
       CAN_FIRE___me_check_9,
       CAN_FIRE_commit,
       CAN_FIRE_ma_ddr4_ready,
       CAN_FIRE_mem_master_ar_drop,
       CAN_FIRE_mem_master_aw_drop,
       CAN_FIRE_mem_master_b_put,
       CAN_FIRE_mem_master_r_put,
       CAN_FIRE_mem_master_w_drop,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_cache_do_req,
       WILL_FIRE_RL_cache_do_reset_req,
       WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_cache_rl_discard_write_rsp,
       WILL_FIRE_RL_cache_rl_drive_exception_rsp,
       WILL_FIRE_RL_cache_rl_fabric_send_write_req,
       WILL_FIRE_RL_cache_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_cache_rl_rereq,
       WILL_FIRE_RL_cache_rl_reset,
       WILL_FIRE_RL_cache_rl_start_cache_refill,
       WILL_FIRE_RL_cache_rl_start_reset,
       WILL_FIRE___me_check_9,
       WILL_FIRE_commit,
       WILL_FIRE_ma_ddr4_ready,
       WILL_FIRE_mem_master_ar_drop,
       WILL_FIRE_mem_master_aw_drop,
       WILL_FIRE_mem_master_b_put,
       WILL_FIRE_mem_master_r_put,
       WILL_FIRE_mem_master_w_drop,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [105 : 0] MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [7 : 0] MUX_cache_ram_cword_set$b_put_2__VAL_2,
	       MUX_cache_ram_cword_set$b_put_2__VAL_4;
  wire [5 : 0] MUX_cache_rg_cset_in_cache$write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_3;
  wire [4 : 0] MUX_cache_rg_state$write_1__VAL_1,
	       MUX_cache_rg_state$write_1__VAL_4,
	       MUX_cache_rg_state$write_1__VAL_6;
  wire MUX_cache_dw_valid$wset_1__SEL_1,
       MUX_cache_ram_cword_set$b_put_1__SEL_1,
       MUX_cache_ram_cword_set$b_put_1__SEL_2,
       MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1,
       MUX_cache_rg_error_during_refill$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_1,
       MUX_cache_rg_state$write_1__SEL_4,
       MUX_cache_rg_state$write_1__SEL_7;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h4412;
  reg [31 : 0] v__h4498;
  reg [31 : 0] v__h4622;
  reg [31 : 0] v__h32932;
  reg [31 : 0] v__h42217;
  reg [31 : 0] v__h33282;
  reg [63 : 0] v__h33433;
  reg [31 : 0] v__h34007;
  reg [31 : 0] v__h34233;
  reg [31 : 0] v__h39220;
  reg [31 : 0] v__h39262;
  reg [31 : 0] v__h3952;
  reg [31 : 0] v__h40112;
  reg [31 : 0] v__h3946;
  reg [31 : 0] v__h4406;
  reg [31 : 0] v__h4492;
  reg [31 : 0] v__h4616;
  reg [31 : 0] v__h32926;
  reg [31 : 0] v__h33276;
  reg [31 : 0] v__h34001;
  reg [31 : 0] v__h34227;
  reg [31 : 0] v__h39214;
  reg [31 : 0] v__h39256;
  reg [31 : 0] v__h40106;
  reg [31 : 0] v__h42211;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d380,
	       IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d420,
	       IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d440,
	       _theResult___fst__h6222,
	       _theResult___fst__h6268,
	       _theResult___snd_fst__h6224,
	       mem_req_wr_data_wdata__h3140;
  reg [7 : 0] fabric_2_strb__h2820, mem_req_wr_data_wstrb__h3141;
  reg [2 : 0] _theResult___snd_snd_snd_val__h3104;
  wire [128 : 0] IF_cache_rg_victim_way_89_THEN_cache_masterPor_ETC___d566,
		 IF_cache_rg_victim_way_89_THEN_cache_ram_cword_ETC___d565,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271,
		 x__h6332,
		 y__h19078,
		 y__h6333,
		 y__h6386;
  wire [127 : 0] x__h31771;
  wire [63 : 0] cline_fabric_addr__h33320,
		result_lo__h31806,
		result_lo__h31841,
		result_lo__h31874,
		result_lo__h31907,
		result_lo__h31940,
		result_lo__h31973,
		result_lo__h32006,
		result_lo__h32039,
		result_lo__h32072,
		result_lo__h32105,
		result_lo__h32138,
		result_lo__h32171,
		result_lo__h32204,
		result_lo__h32237,
		result_lo__h32270,
		result_lo__h32303,
		result_lo__h32358,
		result_lo__h32391,
		result_lo__h32424,
		result_lo__h32457,
		result_lo__h32490,
		result_lo__h32523,
		result_lo__h32556,
		result_lo__h32589,
		result_lo__h32636,
		result_lo__h32669,
		result_lo__h32702,
		result_lo__h32735,
		word64__h3081;
  wire [51 : 0] x__h34633, x__h34701;
  wire [31 : 0] cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q14,
		cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q24,
		cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q3,
		cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q6;
  wire [15 : 0] cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q12,
		cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q16,
		cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q2,
		cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q21,
		cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q23,
		cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q27,
		cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q5,
		cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q9;
  wire [7 : 0] cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q1,
	       cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q10,
	       cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q11,
	       cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q13,
	       cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q15,
	       cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q17,
	       cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q18,
	       cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q19,
	       cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q20,
	       cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q22,
	       cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q25,
	       cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q26,
	       cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q28,
	       cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q4,
	       cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q7,
	       cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q8,
	       mem_req_wr_addr_awlen__h3063,
	       strobe64__h3082,
	       strobe64__h3089,
	       strobe64__h3093,
	       strobe64__h3097;
  wire [5 : 0] new_exc_code___1__h33188,
	       shift_bits__h2843,
	       y_avValue_snd__h33156;
  wire [4 : 0] IF_cache_ram_state_and_ctag_cset_b_read__10_BI_ETC___d468;
  wire [3 : 0] b__h33236;
  wire [1 : 0] tmp__h33482, tmp__h33483;
  wire NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501,
       NOT_cache_rg_addr_05_ULT_2147483648_30_31_AND__ETC___d135,
       NOT_cache_w_req_width_code_wget__21_EQ_0b0_41__ETC___d661,
       cache_cfg_verbosity_read__7_ULE_1___d58,
       cache_ram_state_and_ctag_cset_b_read__10_BITS__ETC___d124,
       cache_ram_state_and_ctag_cset_b_read__10_BITS__ETC___d126,
       cache_ram_state_and_ctag_cset_b_read__10_BIT_5_ETC___d451,
       cache_rg_addr_05_ULT_2147483648___d130,
       cache_rg_addr_05_ULT_2155872256___d132,
       cache_w_req_width_code_wget__21_EQ_0b0_41_OR_c_ETC___d677,
       cache_w_req_width_code_wget__21_EQ_0b0_41_OR_c_ETC___d682,
       mem_req_wr_second_data_wuser__h2957;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // action method commit
  assign CAN_FIRE_commit = 1'd1 ;
  assign WILL_FIRE_commit = EN_commit ;

  // value method valid
  assign valid = cache_dw_valid$whas && cache_dw_valid$wget ;

  // value method addr
  assign addr = cache_rg_addr ;

  // value method cword_fst
  assign cword_fst =
	     MUX_cache_dw_valid$wset_1__SEL_1 &&
	     cache_dw_output_ld_val$wget[128] ;

  // value method cword_snd
  assign cword_snd = cache_dw_output_ld_val$wget[127:0] ;

  // value method st_amo_val_fst
  assign st_amo_val_fst = 1'b0 ;

  // value method st_amo_val_snd
  assign st_amo_val_snd = 128'b0 ;

  // value method exc
  assign exc = CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // value method exc_code
  assign exc_code = cache_rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_aw_canPeek
  assign mem_master_aw_canPeek = cache_masterPortShim_awff$EMPTY_N ;

  // value method mem_master_aw_peek
  assign mem_master_aw_peek = cache_masterPortShim_awff$D_OUT ;
  assign RDY_mem_master_aw_peek = cache_masterPortShim_awff$EMPTY_N ;

  // action method mem_master_aw_drop
  assign RDY_mem_master_aw_drop = cache_masterPortShim_awff$EMPTY_N ;
  assign CAN_FIRE_mem_master_aw_drop = cache_masterPortShim_awff$EMPTY_N ;
  assign WILL_FIRE_mem_master_aw_drop = EN_mem_master_aw_drop ;

  // value method mem_master_w_canPeek
  assign mem_master_w_canPeek = cache_masterPortShim_wff$EMPTY_N ;

  // value method mem_master_w_peek
  assign mem_master_w_peek = cache_masterPortShim_wff$D_OUT ;
  assign RDY_mem_master_w_peek = cache_masterPortShim_wff$EMPTY_N ;

  // action method mem_master_w_drop
  assign RDY_mem_master_w_drop = cache_masterPortShim_wff$EMPTY_N ;
  assign CAN_FIRE_mem_master_w_drop = cache_masterPortShim_wff$EMPTY_N ;
  assign WILL_FIRE_mem_master_w_drop = EN_mem_master_w_drop ;

  // value method mem_master_b_canPut
  assign mem_master_b_canPut = cache_masterPortShim_bff$FULL_N ;

  // action method mem_master_b_put
  assign RDY_mem_master_b_put = cache_masterPortShim_bff$FULL_N ;
  assign CAN_FIRE_mem_master_b_put = cache_masterPortShim_bff$FULL_N ;
  assign WILL_FIRE_mem_master_b_put = EN_mem_master_b_put ;

  // value method mem_master_ar_canPeek
  assign mem_master_ar_canPeek = cache_masterPortShim_arff$EMPTY_N ;

  // value method mem_master_ar_peek
  assign mem_master_ar_peek = cache_masterPortShim_arff$D_OUT ;
  assign RDY_mem_master_ar_peek = cache_masterPortShim_arff$EMPTY_N ;

  // action method mem_master_ar_drop
  assign RDY_mem_master_ar_drop = cache_masterPortShim_arff$EMPTY_N ;
  assign CAN_FIRE_mem_master_ar_drop = cache_masterPortShim_arff$EMPTY_N ;
  assign WILL_FIRE_mem_master_ar_drop = EN_mem_master_ar_drop ;

  // value method mem_master_r_canPut
  assign mem_master_r_canPut = cache_masterPortShim_rff$FULL_N ;

  // action method mem_master_r_put
  assign RDY_mem_master_r_put = cache_masterPortShim_rff$FULL_N ;
  assign CAN_FIRE_mem_master_r_put = cache_masterPortShim_rff$FULL_N ;
  assign WILL_FIRE_mem_master_r_put = EN_mem_master_r_put ;

  // action method ma_ddr4_ready
  assign RDY_ma_ddr4_ready = 1'd1 ;
  assign CAN_FIRE_ma_ddr4_ready = 1'd1 ;
  assign WILL_FIRE_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // value method mv_status
  assign mv_status = cache_rg_wr_rsp_err ? 8'd1 : 8'd0 ;

  // submodule cache_f_fabric_second_write_reqs
  FIFO1 #(.width(32'd74),
	  .guarded(1'd1)) cache_f_fabric_second_write_reqs(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(cache_f_fabric_second_write_reqs$D_IN),
							   .ENQ(cache_f_fabric_second_write_reqs$ENQ),
							   .DEQ(cache_f_fabric_second_write_reqs$DEQ),
							   .CLR(cache_f_fabric_second_write_reqs$CLR),
							   .D_OUT(),
							   .FULL_N(cache_f_fabric_second_write_reqs$FULL_N),
							   .EMPTY_N());

  // submodule cache_f_fabric_write_reqs
  FIFO2 #(.width(32'd196),
	  .guarded(1'd1)) cache_f_fabric_write_reqs(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(cache_f_fabric_write_reqs$D_IN),
						    .ENQ(cache_f_fabric_write_reqs$ENQ),
						    .DEQ(cache_f_fabric_write_reqs$DEQ),
						    .CLR(cache_f_fabric_write_reqs$CLR),
						    .D_OUT(cache_f_fabric_write_reqs$D_OUT),
						    .FULL_N(),
						    .EMPTY_N(cache_f_fabric_write_reqs$EMPTY_N));

  // submodule cache_f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(1'd1)) cache_f_reset_reqs(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(cache_f_reset_reqs$D_IN),
							    .ENQ(cache_f_reset_reqs$ENQ),
							    .DEQ(cache_f_reset_reqs$DEQ),
							    .CLR(cache_f_reset_reqs$CLR),
							    .D_OUT(cache_f_reset_reqs$D_OUT),
							    .FULL_N(cache_f_reset_reqs$FULL_N),
							    .EMPTY_N(cache_f_reset_reqs$EMPTY_N));

  // submodule cache_f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(1'd1)) cache_f_reset_rsps(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(cache_f_reset_rsps$D_IN),
							    .ENQ(cache_f_reset_rsps$ENQ),
							    .DEQ(cache_f_reset_rsps$DEQ),
							    .CLR(cache_f_reset_rsps$CLR),
							    .D_OUT(cache_f_reset_rsps$D_OUT),
							    .FULL_N(cache_f_reset_rsps$FULL_N),
							    .EMPTY_N(cache_f_reset_rsps$EMPTY_N));

  // submodule cache_masterPortShim_arff
  FIFO2 #(.width(32'd98),
	  .guarded(1'd1)) cache_masterPortShim_arff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(cache_masterPortShim_arff$D_IN),
						    .ENQ(cache_masterPortShim_arff$ENQ),
						    .DEQ(cache_masterPortShim_arff$DEQ),
						    .CLR(cache_masterPortShim_arff$CLR),
						    .D_OUT(cache_masterPortShim_arff$D_OUT),
						    .FULL_N(cache_masterPortShim_arff$FULL_N),
						    .EMPTY_N(cache_masterPortShim_arff$EMPTY_N));

  // submodule cache_masterPortShim_awff
  FIFO2 #(.width(32'd98),
	  .guarded(1'd1)) cache_masterPortShim_awff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(cache_masterPortShim_awff$D_IN),
						    .ENQ(cache_masterPortShim_awff$ENQ),
						    .DEQ(cache_masterPortShim_awff$DEQ),
						    .CLR(cache_masterPortShim_awff$CLR),
						    .D_OUT(cache_masterPortShim_awff$D_OUT),
						    .FULL_N(cache_masterPortShim_awff$FULL_N),
						    .EMPTY_N(cache_masterPortShim_awff$EMPTY_N));

  // submodule cache_masterPortShim_bff
  FIFO2 #(.width(32'd7), .guarded(1'd1)) cache_masterPortShim_bff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(cache_masterPortShim_bff$D_IN),
								  .ENQ(cache_masterPortShim_bff$ENQ),
								  .DEQ(cache_masterPortShim_bff$DEQ),
								  .CLR(cache_masterPortShim_bff$CLR),
								  .D_OUT(cache_masterPortShim_bff$D_OUT),
								  .FULL_N(cache_masterPortShim_bff$FULL_N),
								  .EMPTY_N(cache_masterPortShim_bff$EMPTY_N));

  // submodule cache_masterPortShim_rff
  FIFO2 #(.width(32'd73),
	  .guarded(1'd1)) cache_masterPortShim_rff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(cache_masterPortShim_rff$D_IN),
						   .ENQ(cache_masterPortShim_rff$ENQ),
						   .DEQ(cache_masterPortShim_rff$DEQ),
						   .CLR(cache_masterPortShim_rff$CLR),
						   .D_OUT(cache_masterPortShim_rff$D_OUT),
						   .FULL_N(cache_masterPortShim_rff$FULL_N),
						   .EMPTY_N(cache_masterPortShim_rff$EMPTY_N));

  // submodule cache_masterPortShim_wff
  FIFO2 #(.width(32'd74),
	  .guarded(1'd1)) cache_masterPortShim_wff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(cache_masterPortShim_wff$D_IN),
						   .ENQ(cache_masterPortShim_wff$ENQ),
						   .DEQ(cache_masterPortShim_wff$DEQ),
						   .CLR(cache_masterPortShim_wff$CLR),
						   .D_OUT(cache_masterPortShim_wff$D_OUT),
						   .FULL_N(cache_masterPortShim_wff$FULL_N),
						   .EMPTY_N(cache_masterPortShim_wff$EMPTY_N));

  // submodule cache_ram_cword_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd258),
	  .MEMSIZE(9'd256)) cache_ram_cword_set(.CLKA(CLK),
						.CLKB(CLK),
						.ADDRA(cache_ram_cword_set$ADDRA),
						.ADDRB(cache_ram_cword_set$ADDRB),
						.DIA(cache_ram_cword_set$DIA),
						.DIB(cache_ram_cword_set$DIB),
						.WEA(cache_ram_cword_set$WEA),
						.WEB(cache_ram_cword_set$WEB),
						.ENA(cache_ram_cword_set$ENA),
						.ENB(cache_ram_cword_set$ENB),
						.DOA(),
						.DOB(cache_ram_cword_set$DOB));

  // submodule cache_ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd106),
	  .MEMSIZE(7'd64)) cache_ram_state_and_ctag_cset(.CLKA(CLK),
							 .CLKB(CLK),
							 .ADDRA(cache_ram_state_and_ctag_cset$ADDRA),
							 .ADDRB(cache_ram_state_and_ctag_cset$ADDRB),
							 .DIA(cache_ram_state_and_ctag_cset$DIA),
							 .DIB(cache_ram_state_and_ctag_cset$DIB),
							 .WEA(cache_ram_state_and_ctag_cset$WEA),
							 .WEB(cache_ram_state_and_ctag_cset$WEB),
							 .ENA(cache_ram_state_and_ctag_cset$ENA),
							 .ENB(cache_ram_state_and_ctag_cset$ENB),
							 .DOA(),
							 .DOB(cache_ram_state_and_ctag_cset$DOB));

  // rule RL_cache_rl_fabric_send_write_req
  assign CAN_FIRE_RL_cache_rl_fabric_send_write_req =
	     cache_ctr_wr_rsps_pending_crg != 4'd15 &&
	     cache_masterPortShim_wff$FULL_N &&
	     cache_f_fabric_write_reqs$EMPTY_N &&
	     cache_masterPortShim_awff$FULL_N &&
	     (cache_f_fabric_write_reqs$D_OUT[195:193] != 3'b100 ||
	      cache_f_fabric_second_write_reqs$FULL_N) ;
  assign WILL_FIRE_RL_cache_rl_fabric_send_write_req =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ;

  // rule RL_cache_rl_reset
  assign CAN_FIRE_RL_cache_rl_reset =
	     (cache_rg_cset_in_cache != 6'd63 ||
	      cache_f_reset_reqs$EMPTY_N && cache_f_reset_rsps$FULL_N) &&
	     cache_rg_state == 5'd1 ;
  assign WILL_FIRE_RL_cache_rl_reset = CAN_FIRE_RL_cache_rl_reset ;

  // rule RL_cache_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_ddr4_ready &&
	     cache_rg_state == 5'd3 ;
  assign WILL_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // rule RL_cache_rl_start_cache_refill
  assign CAN_FIRE_RL_cache_rl_start_cache_refill =
	     cache_masterPortShim_arff$FULL_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 5'd9 &&
	     b__h33236 == 4'd0 ;
  assign WILL_FIRE_RL_cache_rl_start_cache_refill =
	     CAN_FIRE_RL_cache_rl_start_cache_refill ;

  // rule RL_cache_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     cache_masterPortShim_rff$EMPTY_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 5'd10 ;
  assign WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop ;

  // rule RL_cache_rl_rereq
  assign CAN_FIRE_RL_cache_rl_rereq =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 5'd11 ;
  assign WILL_FIRE_RL_cache_rl_rereq = CAN_FIRE_RL_cache_rl_rereq ;

  // rule RL_cache_rl_discard_write_rsp
  assign CAN_FIRE_RL_cache_rl_discard_write_rsp =
	     b__h33236 != 4'd0 && cache_masterPortShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_cache_rl_discard_write_rsp =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ;

  // rule RL_cache_rl_start_reset
  assign CAN_FIRE_RL_cache_rl_start_reset =
	     cache_f_reset_reqs$EMPTY_N && cache_rg_state != 5'd1 ;
  assign WILL_FIRE_RL_cache_rl_start_reset =
	     CAN_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_drive_exception_rsp
  assign CAN_FIRE_RL_cache_rl_drive_exception_rsp =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 5'd4 ;
  assign WILL_FIRE_RL_cache_rl_drive_exception_rsp =
	     CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // rule RL_cache_do_req
  assign CAN_FIRE_RL_cache_do_req = EN_req && !cache_f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_cache_do_req =
	     CAN_FIRE_RL_cache_do_req && !WILL_FIRE_RL_cache_rl_reset ;

  // rule RL_cache_do_reset_req
  assign CAN_FIRE_RL_cache_do_reset_req =
	     cache_f_reset_reqs$FULL_N && cache_rw_reset_req$whas ;
  assign WILL_FIRE_RL_cache_do_reset_req = CAN_FIRE_RL_cache_do_reset_req ;

  // rule __me_check_9
  assign CAN_FIRE___me_check_9 = 1'b1 ;
  assign WILL_FIRE___me_check_9 = 1'b1 ;

  // inputs to muxes for submodule ports
  assign MUX_cache_dw_valid$wset_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     NOT_cache_rg_addr_05_ULT_2147483648_30_31_AND__ETC___d135 ;
  assign MUX_cache_ram_cword_set$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_do_req &&
	     (cache_w_req_width_code_wget__21_EQ_0b0_41_OR_c_ETC___d677 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) ;
  assign MUX_cache_ram_cword_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] != 2'd3 ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ;
  assign MUX_cache_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_do_req &&
	     NOT_cache_w_req_width_code_wget__21_EQ_0b0_41__ETC___d661 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ;
  assign MUX_cache_rg_state$write_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] == 2'd3 ;
  assign MUX_cache_rg_state$write_1__SEL_7 =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ;
  assign MUX_cache_ram_cword_set$b_put_2__VAL_2 =
	     cache_rg_cset_cword_in_cache + 8'd1 ;
  assign MUX_cache_ram_cword_set$b_put_2__VAL_4 =
	     { cache_rg_addr[11:6], 2'd0 } ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 =
	     { cache_rg_victim_way || cache_ram_state_and_ctag_cset$DOB[105],
	       x__h34633,
	       !cache_rg_victim_way || cache_ram_state_and_ctag_cset$DOB[52],
	       x__h34701 } ;
  assign MUX_cache_rg_cset_in_cache$write_1__VAL_1 =
	     cache_rg_cset_in_cache + 6'd1 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_1 = req_op ? 6'd6 : 6'd4 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_3 =
	     EN_commit ? y_avValue_snd__h33156 : 6'd28 ;
  assign MUX_cache_rg_state$write_1__VAL_1 =
	     (NOT_cache_w_req_width_code_wget__21_EQ_0b0_41__ETC___d661 &&
	      (req_width_code != 3'b100 || req_addr[3:0] != 4'b0)) ?
	       5'd4 :
	       5'd3 ;
  assign MUX_cache_rg_state$write_1__VAL_4 =
	     (cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	      cache_rg_error_during_refill) ?
	       5'd4 :
	       5'd11 ;
  assign MUX_cache_rg_state$write_1__VAL_6 =
	     (!EN_commit || cache_rg_addr_05_ULT_2147483648___d130 ||
	      !cache_rg_addr_05_ULT_2155872256___d132) ?
	       5'd4 :
	       IF_cache_ram_state_and_ctag_cset_b_read__10_BI_ETC___d468 ;

  // inlined wires
  assign cache_rw_reset_req$whas =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign cache_dw_valid$wget =
	     !MUX_cache_dw_valid$wset_1__SEL_1 || EN_commit ;
  assign cache_dw_valid$whas =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     NOT_cache_rg_addr_05_ULT_2147483648_30_31_AND__ETC___d135 ||
	     WILL_FIRE_RL_cache_rl_drive_exception_rsp ;
  assign cache_dw_output_ld_val$wget =
	     { cache_rg_width_code == 3'd4 &&
	       cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[128],
	       x__h31771 } ;
  assign cache_ctr_wr_rsps_pending_crg$port0__write_1 =
	     cache_ctr_wr_rsps_pending_crg + 4'd1 ;
  assign cache_ctr_wr_rsps_pending_crg$port1__write_1 = b__h33236 - 4'd1 ;
  assign cache_ctr_wr_rsps_pending_crg$port2__read =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ?
	       cache_ctr_wr_rsps_pending_crg$port1__write_1 :
	       b__h33236 ;
  assign cache_ctr_wr_rsps_pending_crg$EN_port2__write =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;
  assign cache_ctr_wr_rsps_pending_crg$port3__read =
	     cache_ctr_wr_rsps_pending_crg$EN_port2__write ?
	       4'd0 :
	       cache_ctr_wr_rsps_pending_crg$port2__read ;

  // register cache_cfg_verbosity
  assign cache_cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cache_cfg_verbosity$EN = EN_set_verbosity ;

  // register cache_ctr_wr_rsps_pending_crg
  assign cache_ctr_wr_rsps_pending_crg$D_IN =
	     cache_ctr_wr_rsps_pending_crg$port3__read ;
  assign cache_ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register cache_rg_addr
  assign cache_rg_addr$D_IN = req_addr ;
  assign cache_rg_addr$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_cset_cword_in_cache
  assign cache_rg_cset_cword_in_cache$D_IN =
	     MUX_cache_ram_cword_set$b_put_1__SEL_2 ?
	       MUX_cache_ram_cword_set$b_put_2__VAL_2 :
	       MUX_cache_ram_cword_set$b_put_2__VAL_4 ;
  assign cache_rg_cset_cword_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_cset_in_cache
  assign cache_rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_cache_rl_reset ?
	       MUX_cache_rg_cset_in_cache$write_1__VAL_1 :
	       6'd0 ;
  assign cache_rg_cset_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_reset ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_ddr4_ready
  assign cache_rg_ddr4_ready$D_IN = 1'd1 ;
  assign cache_rg_ddr4_ready$EN = EN_ma_ddr4_ready ;

  // register cache_rg_error_during_refill
  assign cache_rg_error_during_refill$D_IN =
	     MUX_cache_rg_error_during_refill$write_1__SEL_1 ;
  assign cache_rg_error_during_refill$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_exc_code
  always@(MUX_cache_rg_exc_code$write_1__SEL_1 or
	  MUX_cache_rg_exc_code$write_1__VAL_1 or
	  MUX_cache_rg_error_during_refill$write_1__SEL_1 or
	  WILL_FIRE_RL_cache_rl_probe_and_immed_rsp or
	  MUX_cache_rg_exc_code$write_1__VAL_3)
  case (1'b1)
    MUX_cache_rg_exc_code$write_1__SEL_1:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_1;
    MUX_cache_rg_error_during_refill$write_1__SEL_1:
	cache_rg_exc_code$D_IN = 6'd1;
    WILL_FIRE_RL_cache_rl_probe_and_immed_rsp:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_3;
    default: cache_rg_exc_code$D_IN = 6'b101010 /* unspecified value */ ;
  endcase
  assign cache_rg_exc_code$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_do_req &&
	     NOT_cache_w_req_width_code_wget__21_EQ_0b0_41__ETC___d661 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // register cache_rg_is_unsigned
  assign cache_rg_is_unsigned$D_IN = req_is_unsigned ;
  assign cache_rg_is_unsigned$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_lower_word64
  assign cache_rg_lower_word64$D_IN = cache_masterPortShim_rff$D_OUT[67:4] ;
  assign cache_rg_lower_word64$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     !cache_rg_lower_word64_full ;

  // register cache_rg_lower_word64_full
  assign cache_rg_lower_word64_full$D_IN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     !cache_rg_lower_word64_full ;
  assign cache_rg_lower_word64_full$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_op
  assign cache_rg_op$D_IN = req_op ;
  assign cache_rg_op$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_pa
  assign cache_rg_pa$D_IN =
	     WILL_FIRE_RL_cache_do_req ? req_addr : cache_rg_addr ;
  assign cache_rg_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     !cache_rg_addr_05_ULT_2147483648___d130 &&
	     cache_rg_addr_05_ULT_2155872256___d132 ||
	     WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_state
  always@(WILL_FIRE_RL_cache_do_req or
	  MUX_cache_rg_state$write_1__VAL_1 or
	  WILL_FIRE_RL_cache_rl_start_reset or
	  WILL_FIRE_RL_cache_rl_rereq or
	  MUX_cache_rg_state$write_1__SEL_4 or
	  MUX_cache_rg_state$write_1__VAL_4 or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  WILL_FIRE_RL_cache_rl_probe_and_immed_rsp or
	  MUX_cache_rg_state$write_1__VAL_6 or
	  MUX_cache_rg_state$write_1__SEL_7)
  case (1'b1)
    WILL_FIRE_RL_cache_do_req:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_1;
    WILL_FIRE_RL_cache_rl_start_reset: cache_rg_state$D_IN = 5'd1;
    WILL_FIRE_RL_cache_rl_rereq: cache_rg_state$D_IN = 5'd3;
    MUX_cache_rg_state$write_1__SEL_4:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_4;
    WILL_FIRE_RL_cache_rl_start_cache_refill: cache_rg_state$D_IN = 5'd10;
    WILL_FIRE_RL_cache_rl_probe_and_immed_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_6;
    MUX_cache_rg_state$write_1__SEL_7: cache_rg_state$D_IN = 5'd2;
    default: cache_rg_state$D_IN = 5'b01010 /* unspecified value */ ;
  endcase
  assign cache_rg_state$EN =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] == 2'd3 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp ||
	     WILL_FIRE_RL_cache_do_req ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_victim_way
  assign cache_rg_victim_way$D_IN = tmp__h33483[0] ;
  assign cache_rg_victim_way$EN = CAN_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_width_code
  assign cache_rg_width_code$D_IN = req_width_code ;
  assign cache_rg_width_code$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_wr_rsp_err
  assign cache_rg_wr_rsp_err$D_IN = 1'd1 ;
  assign cache_rg_wr_rsp_err$EN =
	     WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	     cache_masterPortShim_bff$D_OUT[1:0] != 2'd0 ;

  // submodule cache_f_fabric_second_write_reqs
  assign cache_f_fabric_second_write_reqs$D_IN =
	     { cache_f_fabric_write_reqs$D_OUT[127:64],
	       fabric_2_strb__h2820,
	       1'd1,
	       mem_req_wr_second_data_wuser__h2957 } ;
  assign cache_f_fabric_second_write_reqs$ENQ =
	     WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	     cache_f_fabric_write_reqs$D_OUT[195:193] == 3'b100 ;
  assign cache_f_fabric_second_write_reqs$DEQ = 1'b0 ;
  assign cache_f_fabric_second_write_reqs$CLR = 1'b0 ;

  // submodule cache_f_fabric_write_reqs
  assign cache_f_fabric_write_reqs$D_IN = 196'h0 ;
  assign cache_f_fabric_write_reqs$ENQ = 1'b0 ;
  assign cache_f_fabric_write_reqs$DEQ =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ;
  assign cache_f_fabric_write_reqs$CLR = 1'b0 ;

  // submodule cache_f_reset_reqs
  assign cache_f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign cache_f_reset_reqs$ENQ = CAN_FIRE_RL_cache_do_reset_req ;
  assign cache_f_reset_reqs$DEQ = MUX_cache_rg_state$write_1__SEL_7 ;
  assign cache_f_reset_reqs$CLR = 1'b0 ;

  // submodule cache_f_reset_rsps
  assign cache_f_reset_rsps$D_IN = cache_f_reset_reqs$D_OUT ;
  assign cache_f_reset_rsps$ENQ = MUX_cache_rg_state$write_1__SEL_7 ;
  assign cache_f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign cache_f_reset_rsps$CLR = 1'b0 ;

  // submodule cache_masterPortShim_arff
  assign cache_masterPortShim_arff$D_IN =
	     { 5'd0, cline_fabric_addr__h33320, 29'd15532032 } ;
  assign cache_masterPortShim_arff$ENQ =
	     CAN_FIRE_RL_cache_rl_start_cache_refill ;
  assign cache_masterPortShim_arff$DEQ = EN_mem_master_ar_drop ;
  assign cache_masterPortShim_arff$CLR =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_awff
  assign cache_masterPortShim_awff$D_IN =
	     { 5'd0,
	       cache_f_fabric_write_reqs$D_OUT[192:129],
	       mem_req_wr_addr_awlen__h3063,
	       _theResult___snd_snd_snd_val__h3104,
	       18'd65536 } ;
  assign cache_masterPortShim_awff$ENQ =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ;
  assign cache_masterPortShim_awff$DEQ = EN_mem_master_aw_drop ;
  assign cache_masterPortShim_awff$CLR =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_bff
  assign cache_masterPortShim_bff$D_IN = mem_master_b_put_val ;
  assign cache_masterPortShim_bff$ENQ = EN_mem_master_b_put ;
  assign cache_masterPortShim_bff$DEQ =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ;
  assign cache_masterPortShim_bff$CLR =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_rff
  assign cache_masterPortShim_rff$D_IN = mem_master_r_put_val ;
  assign cache_masterPortShim_rff$ENQ = EN_mem_master_r_put ;
  assign cache_masterPortShim_rff$DEQ =
	     CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop ;
  assign cache_masterPortShim_rff$CLR =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_wff
  assign cache_masterPortShim_wff$D_IN =
	     { mem_req_wr_data_wdata__h3140,
	       mem_req_wr_data_wstrb__h3141,
	       cache_f_fabric_write_reqs$D_OUT[195:193] != 3'b100,
	       mem_req_wr_second_data_wuser__h2957 } ;
  assign cache_masterPortShim_wff$ENQ =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ;
  assign cache_masterPortShim_wff$DEQ = EN_mem_master_w_drop ;
  assign cache_masterPortShim_wff$CLR =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_ram_cword_set
  assign cache_ram_cword_set$ADDRA = cache_rg_cset_cword_in_cache ;
  always@(MUX_cache_ram_cword_set$b_put_1__SEL_1 or
	  req_addr or
	  MUX_cache_ram_cword_set$b_put_1__SEL_2 or
	  MUX_cache_ram_cword_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  cache_rg_addr or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  MUX_cache_ram_cword_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_cword_set$b_put_1__SEL_1:
	  cache_ram_cword_set$ADDRB = req_addr[11:4];
      MUX_cache_ram_cword_set$b_put_1__SEL_2:
	  cache_ram_cword_set$ADDRB = MUX_cache_ram_cword_set$b_put_2__VAL_2;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_cword_set$ADDRB = cache_rg_addr[11:4];
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_cword_set$ADDRB = MUX_cache_ram_cword_set$b_put_2__VAL_4;
      default: cache_ram_cword_set$ADDRB =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign cache_ram_cword_set$DIA =
	     cache_rg_victim_way ?
	       { cache_masterPortShim_rff$D_OUT[0],
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_lower_word64,
		 cache_ram_cword_set$DOB[128:0] } :
	       { cache_ram_cword_set$DOB[257:129],
		 cache_masterPortShim_rff$D_OUT[0],
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_lower_word64 } ;
  always@(MUX_cache_ram_cword_set$b_put_1__SEL_1 or
	  MUX_cache_ram_cword_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_cword_set$b_put_1__SEL_1:
	  cache_ram_cword_set$DIB =
	      258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_cache_ram_cword_set$b_put_1__SEL_2:
	  cache_ram_cword_set$DIB =
	      258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_cword_set$DIB =
	      258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_cword_set$DIB =
	      258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: cache_ram_cword_set$DIB =
		   258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_ram_cword_set$WEA = 1'd1 ;
  assign cache_ram_cword_set$WEB = 1'd0 ;
  assign cache_ram_cword_set$ENA =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ;
  assign cache_ram_cword_set$ENB =
	     MUX_cache_ram_cword_set$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_ram_state_and_ctag_cset
  assign cache_ram_state_and_ctag_cset$ADDRA =
	     MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 ?
	       cache_rg_addr[11:6] :
	       cache_rg_cset_in_cache ;
  assign cache_ram_state_and_ctag_cset$ADDRB =
	     MUX_cache_ram_cword_set$b_put_1__SEL_1 ?
	       req_addr[11:6] :
	       cache_rg_addr[11:6] ;
  assign cache_ram_state_and_ctag_cset$DIA =
	     MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 ?
	       MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       106'h15555555555554AAAAAAAAAAAAA ;
  assign cache_ram_state_and_ctag_cset$DIB =
	     MUX_cache_ram_cword_set$b_put_1__SEL_1 ?
	       106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  :
	       106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign cache_ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign cache_ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign cache_ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_reset ;
  assign cache_ram_state_and_ctag_cset$ENB =
	     MUX_cache_ram_cword_set$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_rereq ;

  // remaining internal signals
  assign IF_cache_ram_state_and_ctag_cset_b_read__10_BI_ETC___d468 =
	     (cache_ram_state_and_ctag_cset$DOB[52] &&
	      cache_ram_state_and_ctag_cset_b_read__10_BITS__ETC___d124 ||
	      cache_ram_state_and_ctag_cset$DOB[105] &&
	      cache_ram_state_and_ctag_cset_b_read__10_BITS__ETC___d126) ?
	       cache_rg_state :
	       5'd9 ;
  assign IF_cache_rg_victim_way_89_THEN_cache_masterPor_ETC___d566 =
	     cache_rg_victim_way ?
	       { cache_masterPortShim_rff$D_OUT[0],
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_lower_word64 } :
	       cache_ram_cword_set$DOB[257:129] ;
  assign IF_cache_rg_victim_way_89_THEN_cache_ram_cword_ETC___d565 =
	     cache_rg_victim_way ?
	       cache_ram_cword_set$DOB[128:0] :
	       { cache_masterPortShim_rff$D_OUT[0],
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_lower_word64 } ;
  assign NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501 =
	     cache_cfg_verbosity > 4'd2 ;
  assign NOT_cache_rg_addr_05_ULT_2147483648_30_31_AND__ETC___d135 =
	     !cache_rg_addr_05_ULT_2147483648___d130 &&
	     cache_rg_addr_05_ULT_2155872256___d132 &&
	     (cache_ram_state_and_ctag_cset$DOB[52] &&
	      cache_ram_state_and_ctag_cset_b_read__10_BITS__ETC___d124 ||
	      cache_ram_state_and_ctag_cset$DOB[105] &&
	      cache_ram_state_and_ctag_cset_b_read__10_BITS__ETC___d126) ;
  assign NOT_cache_w_req_width_code_wget__21_EQ_0b0_41__ETC___d661 =
	     req_width_code != 3'b0 &&
	     (req_width_code != 3'b001 || req_addr[0]) &&
	     (req_width_code != 3'b010 || req_addr[1:0] != 2'b0) &&
	     (req_width_code != 3'b011 || req_addr[2:0] != 3'b0) ;
  assign b__h33236 =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ?
	       cache_ctr_wr_rsps_pending_crg$port0__write_1 :
	       cache_ctr_wr_rsps_pending_crg ;
  assign cache_cfg_verbosity_read__7_ULE_1___d58 =
	     cache_cfg_verbosity <= 4'd1 ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271 =
	     x__h6332 | y__h6333 ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q1 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[7:0] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q10 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[31:24] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q11 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[39:32] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q12 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[47:32] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q13 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[47:40] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q14 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[63:32] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q15 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[55:48] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q16 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[63:48] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q17 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[63:56] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q18 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[79:72] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q19 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[87:80] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q2 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[15:0] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q20 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[95:88] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q21 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[95:80] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q22 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[103:96] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q23 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[111:96] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q24 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[127:96] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q25 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[111:104] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q26 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[119:112] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q27 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[127:112] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q28 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[127:120] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q3 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[31:0] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q4 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[71:64] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q5 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[79:64] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q6 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[95:64] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q7 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[15:8] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q8 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[23:16] ;
  assign cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q9 =
	     cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[31:16] ;
  assign cache_ram_state_and_ctag_cset_b_read__10_BITS__ETC___d124 =
	     cache_ram_state_and_ctag_cset$DOB[51:0] == cache_rg_addr[63:12] ;
  assign cache_ram_state_and_ctag_cset_b_read__10_BITS__ETC___d126 =
	     cache_ram_state_and_ctag_cset$DOB[104:53] ==
	     cache_rg_addr[63:12] ;
  assign cache_ram_state_and_ctag_cset_b_read__10_BIT_5_ETC___d451 =
	     (cache_ram_state_and_ctag_cset$DOB[52] &&
	      cache_ram_state_and_ctag_cset_b_read__10_BITS__ETC___d124 ||
	      cache_ram_state_and_ctag_cset$DOB[105] &&
	      cache_ram_state_and_ctag_cset_b_read__10_BITS__ETC___d126) &&
	     !cache_cfg_verbosity_read__7_ULE_1___d58 ;
  assign cache_rg_addr_05_ULT_2147483648___d130 =
	     cache_rg_addr < 64'h0000000080000000 ;
  assign cache_rg_addr_05_ULT_2155872256___d132 =
	     cache_rg_addr < 64'h0000000080800000 ;
  assign cache_w_req_width_code_wget__21_EQ_0b0_41_OR_c_ETC___d677 =
	     req_width_code == 3'b0 ||
	     req_width_code == 3'b001 && !req_addr[0] ||
	     req_width_code == 3'b010 && req_addr[1:0] == 2'b0 ||
	     req_width_code == 3'b011 && req_addr[2:0] == 3'b0 ;
  assign cache_w_req_width_code_wget__21_EQ_0b0_41_OR_c_ETC___d682 =
	     (cache_w_req_width_code_wget__21_EQ_0b0_41_OR_c_ETC___d677 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) &&
	     !cache_cfg_verbosity_read__7_ULE_1___d58 ;
  assign cline_fabric_addr__h33320 = { cache_rg_pa[63:6], 6'd0 } ;
  assign mem_req_wr_addr_awlen__h3063 =
	     (cache_f_fabric_write_reqs$D_OUT[195:193] == 3'b100) ?
	       8'd1 :
	       8'd0 ;
  assign mem_req_wr_second_data_wuser__h2957 =
	     cache_f_fabric_write_reqs$D_OUT[195:193] == 3'b100 &&
	     cache_f_fabric_write_reqs$D_OUT[128] ;
  assign new_exc_code___1__h33188 = cache_rg_op ? 6'd7 : 6'd5 ;
  assign result_lo__h31806 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[7:0] } :
	       { {56{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q1[7]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q1 } ;
  assign result_lo__h31841 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[15:8] } :
	       { {56{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q7[7]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q7 } ;
  assign result_lo__h31874 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[23:16] } :
	       { {56{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q8[7]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q8 } ;
  assign result_lo__h31907 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[31:24] } :
	       { {56{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q10[7]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q10 } ;
  assign result_lo__h31940 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[39:32] } :
	       { {56{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q11[7]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q11 } ;
  assign result_lo__h31973 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[47:40] } :
	       { {56{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q13[7]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q13 } ;
  assign result_lo__h32006 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[55:48] } :
	       { {56{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q15[7]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q15 } ;
  assign result_lo__h32039 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[63:56] } :
	       { {56{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q17[7]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q17 } ;
  assign result_lo__h32072 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[71:64] } :
	       { {56{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q4[7]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q4 } ;
  assign result_lo__h32105 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[79:72] } :
	       { {56{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q18[7]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q18 } ;
  assign result_lo__h32138 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[87:80] } :
	       { {56{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q19[7]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q19 } ;
  assign result_lo__h32171 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[95:88] } :
	       { {56{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q20[7]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q20 } ;
  assign result_lo__h32204 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[103:96] } :
	       { {56{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q22[7]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q22 } ;
  assign result_lo__h32237 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[111:104] } :
	       { {56{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q25[7]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q25 } ;
  assign result_lo__h32270 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[119:112] } :
	       { {56{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q26[7]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q26 } ;
  assign result_lo__h32303 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[127:120] } :
	       { {56{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q28[7]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q28 } ;
  assign result_lo__h32358 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[15:0] } :
	       { {48{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q2[15]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q2 } ;
  assign result_lo__h32391 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[31:16] } :
	       { {48{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q9[15]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q9 } ;
  assign result_lo__h32424 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[47:32] } :
	       { {48{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q12[15]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q12 } ;
  assign result_lo__h32457 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[63:48] } :
	       { {48{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q16[15]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q16 } ;
  assign result_lo__h32490 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[79:64] } :
	       { {48{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q5[15]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q5 } ;
  assign result_lo__h32523 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[95:80] } :
	       { {48{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q21[15]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q21 } ;
  assign result_lo__h32556 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[111:96] } :
	       { {48{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q23[15]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q23 } ;
  assign result_lo__h32589 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[127:112] } :
	       { {48{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q27[15]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q27 } ;
  assign result_lo__h32636 =
	     cache_rg_is_unsigned ?
	       { 32'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[31:0] } :
	       { {32{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q3[31]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q3 } ;
  assign result_lo__h32669 =
	     cache_rg_is_unsigned ?
	       { 32'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[63:32] } :
	       { {32{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q14[31]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q14 } ;
  assign result_lo__h32702 =
	     cache_rg_is_unsigned ?
	       { 32'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[95:64] } :
	       { {32{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q6[31]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q6 } ;
  assign result_lo__h32735 =
	     cache_rg_is_unsigned ?
	       { 32'd0,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[127:96] } :
	       { {32{cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q24[31]}},
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC__q24 } ;
  assign shift_bits__h2843 =
	     { cache_f_fabric_write_reqs$D_OUT[131:129], 3'b0 } ;
  assign strobe64__h3082 =
	     8'b00000001 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign strobe64__h3089 =
	     8'b00000011 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign strobe64__h3093 =
	     8'b00001111 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign strobe64__h3097 =
	     8'b11111111 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign tmp__h33482 = { 1'd0, cache_rg_victim_way } ;
  assign tmp__h33483 = tmp__h33482 + 2'd1 ;
  assign word64__h3081 =
	     cache_f_fabric_write_reqs$D_OUT[63:0] << shift_bits__h2843 ;
  assign x__h31771 =
	     { _theResult___snd_fst__h6224, _theResult___fst__h6222 } ;
  assign x__h34633 =
	     cache_rg_victim_way ?
	       cache_rg_pa[63:12] :
	       cache_ram_state_and_ctag_cset$DOB[104:53] ;
  assign x__h34701 =
	     cache_rg_victim_way ?
	       cache_ram_state_and_ctag_cset$DOB[51:0] :
	       cache_rg_pa[63:12] ;
  assign x__h6332 = cache_ram_cword_set$DOB[128:0] & y__h6386 ;
  assign y__h19078 =
	     {129{cache_ram_state_and_ctag_cset$DOB[105] &&
		  cache_ram_state_and_ctag_cset_b_read__10_BITS__ETC___d126}} ;
  assign y__h6333 = cache_ram_cword_set$DOB[257:129] & y__h19078 ;
  assign y__h6386 =
	     {129{cache_ram_state_and_ctag_cset$DOB[52] &&
		  cache_ram_state_and_ctag_cset_b_read__10_BITS__ETC___d124}} ;
  assign y_avValue_snd__h33156 =
	     (cache_rg_addr_05_ULT_2147483648___d130 ||
	      !cache_rg_addr_05_ULT_2155872256___d132) ?
	       new_exc_code___1__h33188 :
	       cache_rg_exc_code ;
  always@(cache_f_fabric_write_reqs$D_OUT)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[195:193])
      3'b0, 3'b001, 3'b010, 3'b011: fabric_2_strb__h2820 = 8'd0;
      3'b100: fabric_2_strb__h2820 = 8'b11111111;
      default: fabric_2_strb__h2820 = 8'd0;
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[195:193])
      3'b0, 3'b001, 3'b010:
	  _theResult___snd_snd_snd_val__h3104 =
	      cache_f_fabric_write_reqs$D_OUT[195:193];
      3'b011, 3'b100: _theResult___snd_snd_snd_val__h3104 = 3'b011;
      default: _theResult___snd_snd_snd_val__h3104 = 3'b110;
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT or
	  strobe64__h3082 or
	  strobe64__h3089 or strobe64__h3093 or strobe64__h3097)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[195:193])
      3'b0: mem_req_wr_data_wstrb__h3141 = strobe64__h3082;
      3'b001: mem_req_wr_data_wstrb__h3141 = strobe64__h3089;
      3'b010: mem_req_wr_data_wstrb__h3141 = strobe64__h3093;
      3'b011: mem_req_wr_data_wstrb__h3141 = strobe64__h3097;
      3'b100: mem_req_wr_data_wstrb__h3141 = 8'b11111111;
      default: mem_req_wr_data_wstrb__h3141 = 8'd0;
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT or word64__h3081)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[195:193])
      3'b0, 3'b001, 3'b010, 3'b011:
	  mem_req_wr_data_wdata__h3140 = word64__h3081;
      default: mem_req_wr_data_wdata__h3140 =
		   cache_f_fabric_write_reqs$D_OUT[63:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3: _theResult___snd_fst__h6224 = 64'd0;
      3'd4:
	  _theResult___snd_fst__h6224 =
	      cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[127:64];
      default: _theResult___snd_fst__h6224 = 64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  _theResult___fst__h6268 =
	      cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[63:0];
      4'h8:
	  _theResult___fst__h6268 =
	      cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[127:64];
      default: _theResult___fst__h6268 = 64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h31806 or
	  result_lo__h31841 or
	  result_lo__h31874 or
	  result_lo__h31907 or
	  result_lo__h31940 or
	  result_lo__h31973 or
	  result_lo__h32006 or
	  result_lo__h32039 or
	  result_lo__h32072 or
	  result_lo__h32105 or
	  result_lo__h32138 or
	  result_lo__h32171 or
	  result_lo__h32204 or
	  result_lo__h32237 or result_lo__h32270 or result_lo__h32303)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d380 =
	      result_lo__h31806;
      4'h1:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d380 =
	      result_lo__h31841;
      4'h2:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d380 =
	      result_lo__h31874;
      4'h3:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d380 =
	      result_lo__h31907;
      4'h4:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d380 =
	      result_lo__h31940;
      4'h5:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d380 =
	      result_lo__h31973;
      4'h6:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d380 =
	      result_lo__h32006;
      4'h7:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d380 =
	      result_lo__h32039;
      4'h8:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d380 =
	      result_lo__h32072;
      4'h9:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d380 =
	      result_lo__h32105;
      4'hA:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d380 =
	      result_lo__h32138;
      4'hB:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d380 =
	      result_lo__h32171;
      4'hC:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d380 =
	      result_lo__h32204;
      4'hD:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d380 =
	      result_lo__h32237;
      4'hE:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d380 =
	      result_lo__h32270;
      4'hF:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d380 =
	      result_lo__h32303;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h32636 or
	  result_lo__h32669 or result_lo__h32702 or result_lo__h32735)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d440 =
	      result_lo__h32636;
      4'h4:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d440 =
	      result_lo__h32669;
      4'h8:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d440 =
	      result_lo__h32702;
      4'hC:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d440 =
	      result_lo__h32735;
      default: IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d440 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h32358 or
	  result_lo__h32391 or
	  result_lo__h32424 or
	  result_lo__h32457 or
	  result_lo__h32490 or
	  result_lo__h32523 or result_lo__h32556 or result_lo__h32589)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d420 =
	      result_lo__h32358;
      4'h2:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d420 =
	      result_lo__h32391;
      4'h4:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d420 =
	      result_lo__h32424;
      4'h6:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d420 =
	      result_lo__h32457;
      4'h8:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d420 =
	      result_lo__h32490;
      4'hA:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d420 =
	      result_lo__h32523;
      4'hC:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d420 =
	      result_lo__h32556;
      4'hE:
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d420 =
	      result_lo__h32589;
      default: IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d420 =
		   64'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d380 or
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d420 or
	  IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d440 or
	  _theResult___fst__h6268 or
	  cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271)
  begin
    case (cache_rg_width_code)
      3'd0:
	  _theResult___fst__h6222 =
	      IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d380;
      3'd1:
	  _theResult___fst__h6222 =
	      IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d420;
      3'd2:
	  _theResult___fst__h6222 =
	      IF_cache_rg_addr_05_BITS_3_TO_0_09_EQ_0x0_84_T_ETC___d440;
      3'd3: _theResult___fst__h6222 = _theResult___fst__h6268;
      3'd4:
	  _theResult___fst__h6222 =
	      cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271[63:0];
      default: _theResult___fst__h6222 = 64'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 6'd0;
	cache_rg_ddr4_ready <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_state <= `BSV_ASSIGNMENT_DELAY 5'd0;
	cache_rg_wr_rsp_err <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cache_cfg_verbosity$EN)
	  cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY
	      cache_cfg_verbosity$D_IN;
	if (cache_ctr_wr_rsps_pending_crg$EN)
	  cache_ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_crg$D_IN;
	if (cache_rg_cset_in_cache$EN)
	  cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_cset_in_cache$D_IN;
	if (cache_rg_ddr4_ready$EN)
	  cache_rg_ddr4_ready <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_ddr4_ready$D_IN;
	if (cache_rg_lower_word64_full$EN)
	  cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lower_word64_full$D_IN;
	if (cache_rg_state$EN)
	  cache_rg_state <= `BSV_ASSIGNMENT_DELAY cache_rg_state$D_IN;
	if (cache_rg_wr_rsp_err$EN)
	  cache_rg_wr_rsp_err <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_wr_rsp_err$D_IN;
      end
    if (cache_rg_addr$EN)
      cache_rg_addr <= `BSV_ASSIGNMENT_DELAY cache_rg_addr$D_IN;
    if (cache_rg_cset_cword_in_cache$EN)
      cache_rg_cset_cword_in_cache <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_cset_cword_in_cache$D_IN;
    if (cache_rg_error_during_refill$EN)
      cache_rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_error_during_refill$D_IN;
    if (cache_rg_exc_code$EN)
      cache_rg_exc_code <= `BSV_ASSIGNMENT_DELAY cache_rg_exc_code$D_IN;
    if (cache_rg_is_unsigned$EN)
      cache_rg_is_unsigned <= `BSV_ASSIGNMENT_DELAY cache_rg_is_unsigned$D_IN;
    if (cache_rg_lower_word64$EN)
      cache_rg_lower_word64 <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_lower_word64$D_IN;
    if (cache_rg_op$EN) cache_rg_op <= `BSV_ASSIGNMENT_DELAY cache_rg_op$D_IN;
    if (cache_rg_pa$EN) cache_rg_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pa$D_IN;
    if (cache_rg_victim_way$EN)
      cache_rg_victim_way <= `BSV_ASSIGNMENT_DELAY cache_rg_victim_way$D_IN;
    if (cache_rg_width_code$EN)
      cache_rg_width_code <= `BSV_ASSIGNMENT_DELAY cache_rg_width_code$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cache_cfg_verbosity = 4'hA;
    cache_ctr_wr_rsps_pending_crg = 4'hA;
    cache_rg_addr = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_cset_cword_in_cache = 8'hAA;
    cache_rg_cset_in_cache = 6'h2A;
    cache_rg_ddr4_ready = 1'h0;
    cache_rg_error_during_refill = 1'h0;
    cache_rg_exc_code = 6'h2A;
    cache_rg_is_unsigned = 1'h0;
    cache_rg_lower_word64 = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_lower_word64_full = 1'h0;
    cache_rg_op = 1'h0;
    cache_rg_pa = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_state = 5'h0A;
    cache_rg_victim_way = 1'h0;
    cache_rg_width_code = 3'h2;
    cache_rg_wr_rsp_err = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", cache_f_fabric_write_reqs$D_OUT[192:129]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", mem_req_wr_addr_awlen__h3063);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", _theResult___snd_snd_snd_val__h3104, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", mem_req_wr_data_wdata__h3140);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", mem_req_wr_data_wstrb__h3141);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  cache_f_fabric_write_reqs$D_OUT[195:193] == 3'b100)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  cache_f_fabric_write_reqs$D_OUT[195:193] != 3'b100)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", mem_req_wr_second_data_wuser__h2957, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	begin
	  v__h4412 = $stime;
	  #0;
	end
    v__h4406 = v__h4412 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		 v__h4406,
		 "I_MMU_Cache",
		 $signed(32'd64),
		 $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  cache_f_reset_reqs$D_OUT)
	begin
	  v__h4498 = $stime;
	  #0;
	end
    v__h4492 = v__h4498 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: Flushed", v__h4492, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h4622 = $stime;
	  #0;
	end
    v__h4616 = v__h4622 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		 v__h4616,
		 "I_MMU_Cache",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  CWord 0x%0h  Byte 0x%0h}",
		 cache_rg_addr[63:12],
		 cache_rg_addr[11:6],
		 cache_rg_addr[5:4],
		 cache_rg_addr[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("        CSet 0x%0x: (state, tag):", cache_rg_addr[11:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  cache_ram_state_and_ctag_cset$DOB[52])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  !cache_ram_state_and_ctag_cset$DOB[52])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  cache_ram_state_and_ctag_cset$DOB[52])
	$write(", 0x%0x", cache_ram_state_and_ctag_cset$DOB[51:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  !cache_ram_state_and_ctag_cset$DOB[52])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  cache_ram_state_and_ctag_cset$DOB[105])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  !cache_ram_state_and_ctag_cset$DOB[105])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  cache_ram_state_and_ctag_cset$DOB[105])
	$write(", 0x%0x", cache_ram_state_and_ctag_cset$DOB[104:53]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  !cache_ram_state_and_ctag_cset$DOB[105])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("        CSet 0x%0x, CWord 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(" 0x%0x", cache_ram_cword_set$DOB[128:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(" 0x%0x", cache_ram_cword_set$DOB[257:129]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_ram_state_and_ctag_cset$DOB[52] &&
	  cache_ram_state_and_ctag_cset_b_read__10_BITS__ETC___d124 &&
	  cache_ram_state_and_ctag_cset$DOB[105] &&
	  cache_ram_state_and_ctag_cset_b_read__10_BITS__ETC___d126)
	$display("        ASSERTION ERROR: fn_test_cache_hit_or_miss: multiple hits in set at [%0d] and [%0d]",
		 $signed(32'd1),
		 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "allow_cap: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 6'h2A, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_rg_addr_05_ULT_2147483648___d130 &&
	  cache_rg_addr_05_ULT_2155872256___d132 &&
	  cache_ram_state_and_ctag_cset_b_read__10_BIT_5_ETC___d451)
	begin
	  v__h32932 = $stime;
	  #0;
	end
    v__h32926 = v__h32932 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_rg_addr_05_ULT_2147483648___d130 &&
	  cache_rg_addr_05_ULT_2155872256___d132 &&
	  cache_ram_state_and_ctag_cset_b_read__10_BIT_5_ETC___d451)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h32926,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271,
		 129'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_rg_addr_05_ULT_2147483648___d130 &&
	  cache_rg_addr_05_ULT_2155872256___d132 &&
	  cache_ram_state_and_ctag_cset_b_read__10_BIT_5_ETC___d451)
	$display("        Read-hit: addr 0x%0h centry 0x%0h",
		 cache_rg_addr,
		 cache_ram_cword_set_b_read__21_BITS_128_TO_0_2_ETC___d271);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_rg_addr_05_ULT_2147483648___d130 &&
	  cache_rg_addr_05_ULT_2155872256___d132 &&
	  (!cache_ram_state_and_ctag_cset$DOB[52] ||
	   !cache_ram_state_and_ctag_cset_b_read__10_BITS__ETC___d124) &&
	  (!cache_ram_state_and_ctag_cset$DOB[105] ||
	   !cache_ram_state_and_ctag_cset_b_read__10_BITS__ETC___d126) &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_ddr4_ready)
	begin
	  v__h42217 = $stime;
	  #0;
	end
    v__h42211 = v__h42217 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_ddr4_ready)
	$display("%0d: %m.ma_ddr4_ready: Enabling MMU_Cache", v__h42211);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h33282 = $stime;
	  #0;
	end
    v__h33276 = v__h33282 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("%0d: %s.rl_start_cache_refill: ", v__h33276, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h33433 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("%0t            To fabric: ", v__h33433);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", cline_fabric_addr__h33320);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 8'd7);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("    Victim way %0d; => CACHE_REFILL", tmp__h33483[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501)
	begin
	  v__h34007 = $stime;
	  #0;
	end
    v__h34001 = v__h34007 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501)
	$display("%0d: %s.rl_cache_refill_rsps_loop:",
		 v__h34001,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[72:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[67:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501 &&
	  cache_masterPortShim_rff$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501 &&
	  !cache_masterPortShim_rff$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h34233 = $stime;
	  #0;
	end
    v__h34227 = v__h34233 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		 v__h34227,
		 "I_MMU_Cache",
		 6'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501)
	$display("        64b fabric: concat with rg_lower_word64: new_word128 0x%0x",
		 { cache_masterPortShim_rff$D_OUT[0],
		   cache_masterPortShim_rff$D_OUT[67:4],
		   cache_rg_lower_word64 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  cache_rg_cset_cword_in_cache[1:0] == 2'd3 &&
	  (cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	   cache_rg_error_during_refill) &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  cache_rg_cset_cword_in_cache[1:0] == 2'd3 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  !cache_rg_error_during_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501)
	$display("        Updating Cache cword_set 0x%0h, cword_in_cline %0d) old => new",
		 cache_rg_cset_cword_in_cache,
		 cache_rg_cset_cword_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501)
	$write("        CSet 0x%0x, CWord 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_cset_cword_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501)
	$write(" 0x%0x", cache_ram_cword_set$DOB[128:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501)
	$write(" 0x%0x", cache_ram_cword_set$DOB[257:129]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501)
	$write("        CSet 0x%0x, CWord 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_cset_cword_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501)
	$write(" 0x%0x",
	       IF_cache_rg_victim_way_89_THEN_cache_ram_cword_ETC___d565);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501)
	$write(" 0x%0x",
	       IF_cache_rg_victim_way_89_THEN_cache_masterPor_ETC___d566);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  !cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_00___d501)
	$display("        Recording rdata in rg_lower_word64");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_rereq &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("    fa_req_ram_B tagCSet [0x%0x] cword_set [0x%0d]",
		 cache_rg_addr[11:6],
		 cache_rg_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h39220 = $stime;
	  #0;
	end
    v__h39214 = v__h39220 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("%0d: %s.rl_discard_write_rsp: pending %0d ",
	       v__h39214,
	       "I_MMU_Cache",
	       $unsigned(b__h33236));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", cache_masterPortShim_bff$D_OUT[6:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	begin
	  v__h39262 = $stime;
	  #0;
	end
    v__h39256 = v__h39262 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		 v__h39256,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("'h%h", cache_masterPortShim_bff$D_OUT[6:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0 &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd1 &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset)
	begin
	  v__h3952 = $stime;
	  #0;
	end
    v__h3946 = v__h3952 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset)
	$display("%0d: %s: cache size %0d KB, associativity %0d, line size %0d bytes (= %0d XLEN words)",
		 v__h3946,
		 "I_MMU_Cache",
		 $signed(32'd8),
		 $signed(32'd2),
		 $signed(32'd32),
		 $signed(32'd4));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h40112 = $stime;
	  #0;
	end
    v__h40106 = v__h40112 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("%0d: %m.req: op:", v__h40106);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  req_op)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  !req_op)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(" width_code:%0d addr:0x%0h st_value:0x%0h",
	       req_width_code,
	       req_addr,
	       req_st_value,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("    priv:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  cache_w_req_width_code_wget__21_EQ_0b0_41_OR_c_ETC___d682)
	$display("    fa_req_ram_B tagCSet [0x%0x] cword_set [0x%0d]",
		 req_addr[11:6],
		 req_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req && WILL_FIRE_RL_cache_do_reset_req)
	$display("Error: \"../../src_Core/Near_Mem_VM_WT_L1/MMU_Cache.bsv\", line 2039, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_do_reset_req] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
	$display("Error: \"../../src_Core/Near_Mem_VM_WT_L1/MMU_Cache.bsv\", line 2038, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_rl_start_cache_refill] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req && WILL_FIRE_RL_cache_rl_rereq)
	$display("Error: \"../../src_Core/Near_Mem_VM_WT_L1/MMU_Cache.bsv\", line 2037, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_rl_rereq] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop)
	$display("Error: \"../../src_Core/Near_Mem_VM_WT_L1/MMU_Cache.bsv\", line 2036, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_rl_cache_refill_rsps_loop] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkMMU_ICache

