//
// Generated by Bluespec Compiler (build 7d25cde)
//
//
// Ports:
// Name                         I/O  size props
// m_near_mem_io_addr_range       O   128 const
// m_plic_addr_range              O   128 const
// m_uart0_addr_range             O   128 const
// m_boot_rom_addr_range          O   128 const
// m_mem0_controller_addr_range   O   128 const
// m_tcm_addr_range               O   128 const
// m_is_mem_addr                  O     1
// m_is_IO_addr                   O     1 const
// m_is_near_mem_IO_addr          O     1
// m_pc_reset_value               O    64 const
// m_mtvec_reset_value            O    64 const
// m_nmivec_reset_value           O    64 const
// m_pcc_reset_value              O   152 const
// m_ddc_reset_value              O   152 const
// m_mtcc_reset_value             O   152 const
// m_mepcc_reset_value            O   152 const
// CLK                            I     1 unused
// RST_N                          I     1 unused
// m_is_mem_addr_addr             I    64
// m_is_IO_addr_addr              I    64 unused
// m_is_near_mem_IO_addr_addr     I    64
//
// Combinational paths from inputs to outputs:
//   m_is_mem_addr_addr -> m_is_mem_addr
//   m_is_near_mem_IO_addr_addr -> m_is_near_mem_IO_addr
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSoC_Map(CLK,
		 RST_N,

		 m_near_mem_io_addr_range,

		 m_plic_addr_range,

		 m_uart0_addr_range,

		 m_boot_rom_addr_range,

		 m_mem0_controller_addr_range,

		 m_tcm_addr_range,

		 m_is_mem_addr_addr,
		 m_is_mem_addr,

		 m_is_IO_addr_addr,
		 m_is_IO_addr,

		 m_is_near_mem_IO_addr_addr,
		 m_is_near_mem_IO_addr,

		 m_pc_reset_value,

		 m_mtvec_reset_value,

		 m_nmivec_reset_value,

		 m_pcc_reset_value,

		 m_ddc_reset_value,

		 m_mtcc_reset_value,

		 m_mepcc_reset_value);
  input  CLK;
  input  RST_N;

  // value method m_near_mem_io_addr_range
  output [127 : 0] m_near_mem_io_addr_range;

  // value method m_plic_addr_range
  output [127 : 0] m_plic_addr_range;

  // value method m_uart0_addr_range
  output [127 : 0] m_uart0_addr_range;

  // value method m_boot_rom_addr_range
  output [127 : 0] m_boot_rom_addr_range;

  // value method m_mem0_controller_addr_range
  output [127 : 0] m_mem0_controller_addr_range;

  // value method m_tcm_addr_range
  output [127 : 0] m_tcm_addr_range;

  // value method m_is_mem_addr
  input  [63 : 0] m_is_mem_addr_addr;
  output m_is_mem_addr;

  // value method m_is_IO_addr
  input  [63 : 0] m_is_IO_addr_addr;
  output m_is_IO_addr;

  // value method m_is_near_mem_IO_addr
  input  [63 : 0] m_is_near_mem_IO_addr_addr;
  output m_is_near_mem_IO_addr;

  // value method m_pc_reset_value
  output [63 : 0] m_pc_reset_value;

  // value method m_mtvec_reset_value
  output [63 : 0] m_mtvec_reset_value;

  // value method m_nmivec_reset_value
  output [63 : 0] m_nmivec_reset_value;

  // value method m_pcc_reset_value
  output [151 : 0] m_pcc_reset_value;

  // value method m_ddc_reset_value
  output [151 : 0] m_ddc_reset_value;

  // value method m_mtcc_reset_value
  output [151 : 0] m_mtcc_reset_value;

  // value method m_mepcc_reset_value
  output [151 : 0] m_mepcc_reset_value;

  // signals for module outputs
  wire [151 : 0] m_ddc_reset_value,
		 m_mepcc_reset_value,
		 m_mtcc_reset_value,
		 m_pcc_reset_value;
  wire [127 : 0] m_boot_rom_addr_range,
		 m_mem0_controller_addr_range,
		 m_near_mem_io_addr_range,
		 m_plic_addr_range,
		 m_tcm_addr_range,
		 m_uart0_addr_range;
  wire [63 : 0] m_mtvec_reset_value, m_nmivec_reset_value, m_pc_reset_value;
  wire m_is_IO_addr, m_is_mem_addr, m_is_near_mem_IO_addr;

  // remaining internal signals
  wire [63 : 0] x__h128, x__h153;

  // value method m_near_mem_io_addr_range
  assign m_near_mem_io_addr_range = 128'h0000000002000000000000000000C000 ;

  // value method m_plic_addr_range
  assign m_plic_addr_range = 128'h000000000C0000000000000000400000 ;

  // value method m_uart0_addr_range
  assign m_uart0_addr_range = 128'h00000000C00000000000000000000080 ;

  // value method m_boot_rom_addr_range
  assign m_boot_rom_addr_range = 128'h00000000000010000000000000001000 ;

  // value method m_mem0_controller_addr_range
  assign m_mem0_controller_addr_range =
	     128'h00000000800000000000000040000000 ;

  // value method m_tcm_addr_range
  assign m_tcm_addr_range = 128'd0 ;

  // value method m_is_mem_addr
  assign m_is_mem_addr =
	     m_is_mem_addr_addr >= 64'h0000000080000000 &&
	     x__h128 < 64'd8388608 ;

  // value method m_is_IO_addr
  assign m_is_IO_addr = 1'd0 ;

  // value method m_is_near_mem_IO_addr
  assign m_is_near_mem_IO_addr =
	     m_is_near_mem_IO_addr_addr >= 64'h0000000002000000 &&
	     x__h153 < 64'h000000000000C000 ;

  // value method m_pc_reset_value
  assign m_pc_reset_value = 64'h0000000080000000 ;

  // value method m_mtvec_reset_value
  assign m_mtvec_reset_value = 64'h0 ;

  // value method m_nmivec_reset_value
  assign m_nmivec_reset_value = 64'hAAAAAAAAAAAAAAAA ;

  // value method m_pcc_reset_value
  assign m_pcc_reset_value = 152'h80000000400000000001FFFE3FFFFE88000000 ;

  // value method m_ddc_reset_value
  assign m_ddc_reset_value = 152'h80000000000000000001FFFE3FFFFE88000000 ;

  // value method m_mtcc_reset_value
  assign m_mtcc_reset_value = 152'h80000000000000000001FFFE3FFFFE88000000 ;

  // value method m_mepcc_reset_value
  assign m_mepcc_reset_value = 152'h80000000000000000001FFFE3FFFFE88000000 ;

  // remaining internal signals
  assign x__h128 = m_is_mem_addr_addr - 64'h0000000080000000 ;
  assign x__h153 = m_is_near_mem_IO_addr_addr - 64'h0000000002000000 ;
endmodule  // mkSoC_Map

