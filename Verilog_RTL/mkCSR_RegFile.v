//
// Generated by Bluespec Compiler (build 7d25cde)
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// read_csr                       O    65
// read_csr_port2                 O    65
// read_scr                       O   153
// mav_read_csr                   O    65
// mav_csr_write                  O   129
// mav_scr_write                  O   152
// read_misa                      O    28 const
// read_mstatus                   O    64 reg
// read_ustatus                   O    64
// read_satp                      O    64 const
// csr_trap_actions               O   282
// RDY_csr_trap_actions           O     1 const
// csr_ret_actions                O   228
// RDY_csr_ret_actions            O     1 const
// read_csr_minstret              O    64 reg
// read_csr_mcycle                O    64 reg
// read_csr_mtime                 O    64 reg
// access_permitted_1             O     2
// access_permitted_2             O     2
// access_permitted_scr           O     2
// csr_counter_read_fault         O     1
// csr_mip_read                   O    64
// interrupt_pending              O     7
// wfi_resume                     O     1
// nmi_pending                    O     1 reg
// RDY_debug                      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// read_csr_csr_addr              I    12
// read_csr_port2_csr_addr        I    12
// read_scr_scr_addr              I     5
// mav_read_csr_csr_addr          I    12
// mav_csr_write_csr_addr         I    12
// mav_csr_write_word             I    64
// mav_scr_write_scr_addr         I     5
// mav_scr_write_cap              I   152
// csr_trap_actions_from_priv     I     2
// csr_trap_actions_pcc           I   162
// csr_trap_actions_nmi           I     1
// csr_trap_actions_interrupt     I     1
// csr_trap_actions_cheri_exc_code  I     5
// csr_trap_actions_cheri_exc_reg  I     6
// csr_trap_actions_exc_code      I     6
// csr_trap_actions_xtval         I    64
// csr_ret_actions_from_priv      I     2
// access_permitted_1_priv        I     2
// access_permitted_1_csr_addr    I    12
// access_permitted_1_read_not_write  I     1
// access_permitted_2_priv        I     2
// access_permitted_2_csr_addr    I    12
// access_permitted_2_read_not_write  I     1
// access_permitted_scr_priv      I     2
// access_permitted_scr_scr_addr  I     5
// access_permitted_scr_read_not_write  I     1 unused
// csr_counter_read_fault_priv    I     2
// csr_counter_read_fault_csr_addr  I    12
// m_external_interrupt_req_set_not_clear  I     1 reg
// s_external_interrupt_req_set_not_clear  I     1 reg
// timer_interrupt_req_set_not_clear  I     1 reg
// software_interrupt_req_set_not_clear  I     1 reg
// interrupt_pending_cur_priv     I     2
// nmi_req_set_not_clear          I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_csr_minstret_incr           I     1
// EN_debug                       I     1 unused
// EN_mav_read_csr                I     1 unused
// EN_mav_csr_write               I     1
// EN_mav_scr_write               I     1
// EN_csr_trap_actions            I     1
// EN_csr_ret_actions             I     1
//
// Combinational paths from inputs to outputs:
//   read_csr_csr_addr -> read_csr
//   read_csr_port2_csr_addr -> read_csr_port2
//   read_scr_scr_addr -> read_scr
//   (access_permitted_1_priv,
//    access_permitted_1_csr_addr,
//    access_permitted_1_read_not_write) -> access_permitted_1
//   (access_permitted_2_priv,
//    access_permitted_2_csr_addr,
//    access_permitted_2_read_not_write) -> access_permitted_2
//   (access_permitted_scr_priv,
//    access_permitted_scr_scr_addr) -> access_permitted_scr
//   (csr_counter_read_fault_priv,
//    csr_counter_read_fault_csr_addr) -> csr_counter_read_fault
//   interrupt_pending_cur_priv -> interrupt_pending
//   mav_read_csr_csr_addr -> mav_read_csr
//   (mav_csr_write_csr_addr,
//    mav_csr_write_word,
//    EN_mav_csr_write) -> mav_csr_write
//   (mav_scr_write_scr_addr, mav_scr_write_cap) -> mav_scr_write
//   (csr_trap_actions_from_priv,
//    csr_trap_actions_nmi,
//    csr_trap_actions_interrupt,
//    csr_trap_actions_exc_code) -> csr_trap_actions
//   csr_ret_actions_from_priv -> csr_ret_actions
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCSR_RegFile(CLK,
		     RST_N,

		     EN_server_reset_request_put,
		     RDY_server_reset_request_put,

		     EN_server_reset_response_get,
		     RDY_server_reset_response_get,

		     read_csr_csr_addr,
		     read_csr,

		     read_csr_port2_csr_addr,
		     read_csr_port2,

		     read_scr_scr_addr,
		     read_scr,

		     mav_read_csr_csr_addr,
		     EN_mav_read_csr,
		     mav_read_csr,

		     mav_csr_write_csr_addr,
		     mav_csr_write_word,
		     EN_mav_csr_write,
		     mav_csr_write,

		     mav_scr_write_scr_addr,
		     mav_scr_write_cap,
		     EN_mav_scr_write,
		     mav_scr_write,

		     read_misa,

		     read_mstatus,

		     read_ustatus,

		     read_satp,

		     csr_trap_actions_from_priv,
		     csr_trap_actions_pcc,
		     csr_trap_actions_nmi,
		     csr_trap_actions_interrupt,
		     csr_trap_actions_cheri_exc_code,
		     csr_trap_actions_cheri_exc_reg,
		     csr_trap_actions_exc_code,
		     csr_trap_actions_xtval,
		     EN_csr_trap_actions,
		     csr_trap_actions,
		     RDY_csr_trap_actions,

		     csr_ret_actions_from_priv,
		     EN_csr_ret_actions,
		     csr_ret_actions,
		     RDY_csr_ret_actions,

		     read_csr_minstret,

		     EN_csr_minstret_incr,

		     read_csr_mcycle,

		     read_csr_mtime,

		     access_permitted_1_priv,
		     access_permitted_1_csr_addr,
		     access_permitted_1_read_not_write,
		     access_permitted_1,

		     access_permitted_2_priv,
		     access_permitted_2_csr_addr,
		     access_permitted_2_read_not_write,
		     access_permitted_2,

		     access_permitted_scr_priv,
		     access_permitted_scr_scr_addr,
		     access_permitted_scr_read_not_write,
		     access_permitted_scr,

		     csr_counter_read_fault_priv,
		     csr_counter_read_fault_csr_addr,
		     csr_counter_read_fault,

		     csr_mip_read,

		     m_external_interrupt_req_set_not_clear,

		     s_external_interrupt_req_set_not_clear,

		     timer_interrupt_req_set_not_clear,

		     software_interrupt_req_set_not_clear,

		     interrupt_pending_cur_priv,
		     interrupt_pending,

		     wfi_resume,

		     nmi_req_set_not_clear,

		     nmi_pending,

		     EN_debug,
		     RDY_debug);
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // value method read_csr
  input  [11 : 0] read_csr_csr_addr;
  output [64 : 0] read_csr;

  // value method read_csr_port2
  input  [11 : 0] read_csr_port2_csr_addr;
  output [64 : 0] read_csr_port2;

  // value method read_scr
  input  [4 : 0] read_scr_scr_addr;
  output [152 : 0] read_scr;

  // actionvalue method mav_read_csr
  input  [11 : 0] mav_read_csr_csr_addr;
  input  EN_mav_read_csr;
  output [64 : 0] mav_read_csr;

  // actionvalue method mav_csr_write
  input  [11 : 0] mav_csr_write_csr_addr;
  input  [63 : 0] mav_csr_write_word;
  input  EN_mav_csr_write;
  output [128 : 0] mav_csr_write;

  // actionvalue method mav_scr_write
  input  [4 : 0] mav_scr_write_scr_addr;
  input  [151 : 0] mav_scr_write_cap;
  input  EN_mav_scr_write;
  output [151 : 0] mav_scr_write;

  // value method read_misa
  output [27 : 0] read_misa;

  // value method read_mstatus
  output [63 : 0] read_mstatus;

  // value method read_ustatus
  output [63 : 0] read_ustatus;

  // value method read_satp
  output [63 : 0] read_satp;

  // actionvalue method csr_trap_actions
  input  [1 : 0] csr_trap_actions_from_priv;
  input  [161 : 0] csr_trap_actions_pcc;
  input  csr_trap_actions_nmi;
  input  csr_trap_actions_interrupt;
  input  [4 : 0] csr_trap_actions_cheri_exc_code;
  input  [5 : 0] csr_trap_actions_cheri_exc_reg;
  input  [5 : 0] csr_trap_actions_exc_code;
  input  [63 : 0] csr_trap_actions_xtval;
  input  EN_csr_trap_actions;
  output [281 : 0] csr_trap_actions;
  output RDY_csr_trap_actions;

  // actionvalue method csr_ret_actions
  input  [1 : 0] csr_ret_actions_from_priv;
  input  EN_csr_ret_actions;
  output [227 : 0] csr_ret_actions;
  output RDY_csr_ret_actions;

  // value method read_csr_minstret
  output [63 : 0] read_csr_minstret;

  // action method csr_minstret_incr
  input  EN_csr_minstret_incr;

  // value method read_csr_mcycle
  output [63 : 0] read_csr_mcycle;

  // value method read_csr_mtime
  output [63 : 0] read_csr_mtime;

  // value method access_permitted_1
  input  [1 : 0] access_permitted_1_priv;
  input  [11 : 0] access_permitted_1_csr_addr;
  input  access_permitted_1_read_not_write;
  output [1 : 0] access_permitted_1;

  // value method access_permitted_2
  input  [1 : 0] access_permitted_2_priv;
  input  [11 : 0] access_permitted_2_csr_addr;
  input  access_permitted_2_read_not_write;
  output [1 : 0] access_permitted_2;

  // value method access_permitted_scr
  input  [1 : 0] access_permitted_scr_priv;
  input  [4 : 0] access_permitted_scr_scr_addr;
  input  access_permitted_scr_read_not_write;
  output [1 : 0] access_permitted_scr;

  // value method csr_counter_read_fault
  input  [1 : 0] csr_counter_read_fault_priv;
  input  [11 : 0] csr_counter_read_fault_csr_addr;
  output csr_counter_read_fault;

  // value method csr_mip_read
  output [63 : 0] csr_mip_read;

  // action method m_external_interrupt_req
  input  m_external_interrupt_req_set_not_clear;

  // action method s_external_interrupt_req
  input  s_external_interrupt_req_set_not_clear;

  // action method timer_interrupt_req
  input  timer_interrupt_req_set_not_clear;

  // action method software_interrupt_req
  input  software_interrupt_req_set_not_clear;

  // value method interrupt_pending
  input  [1 : 0] interrupt_pending_cur_priv;
  output [6 : 0] interrupt_pending;

  // value method wfi_resume
  output wfi_resume;

  // action method nmi_req
  input  nmi_req_set_not_clear;

  // value method nmi_pending
  output nmi_pending;

  // action method debug
  input  EN_debug;
  output RDY_debug;

  // signals for module outputs
  wire [281 : 0] csr_trap_actions;
  wire [227 : 0] csr_ret_actions;
  wire [152 : 0] read_scr;
  wire [151 : 0] mav_scr_write;
  wire [128 : 0] mav_csr_write;
  wire [64 : 0] mav_read_csr, read_csr, read_csr_port2;
  wire [63 : 0] csr_mip_read,
		read_csr_mcycle,
		read_csr_minstret,
		read_csr_mtime,
		read_mstatus,
		read_satp,
		read_ustatus;
  wire [27 : 0] read_misa;
  wire [6 : 0] interrupt_pending;
  wire [1 : 0] access_permitted_1, access_permitted_2, access_permitted_scr;
  wire RDY_csr_ret_actions,
       RDY_csr_trap_actions,
       RDY_debug,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       csr_counter_read_fault,
       nmi_pending,
       wfi_resume;

  // inlined wires
  wire rw_mcycle$whas;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register csr_mstatus_rg_mstatus
  reg [63 : 0] csr_mstatus_rg_mstatus;
  reg [63 : 0] csr_mstatus_rg_mstatus$D_IN;
  wire csr_mstatus_rg_mstatus$EN;

  // register rg_mcause
  reg [6 : 0] rg_mcause;
  reg [6 : 0] rg_mcause$D_IN;
  wire rg_mcause$EN;

  // register rg_mccsr
  reg [10 : 0] rg_mccsr;
  wire [10 : 0] rg_mccsr$D_IN;
  wire rg_mccsr$EN;

  // register rg_mcounteren
  reg [31 : 0] rg_mcounteren;
  wire [31 : 0] rg_mcounteren$D_IN;
  wire rg_mcounteren$EN;

  // register rg_mcycle
  reg [63 : 0] rg_mcycle;
  wire [63 : 0] rg_mcycle$D_IN;
  wire rg_mcycle$EN;

  // register rg_mepcc
  reg [151 : 0] rg_mepcc;
  reg [151 : 0] rg_mepcc$D_IN;
  wire rg_mepcc$EN;

  // register rg_minstret
  reg [63 : 0] rg_minstret;
  wire [63 : 0] rg_minstret$D_IN;
  wire rg_minstret$EN;

  // register rg_mscratch
  reg [63 : 0] rg_mscratch;
  wire [63 : 0] rg_mscratch$D_IN;
  wire rg_mscratch$EN;

  // register rg_mscratchc
  reg [151 : 0] rg_mscratchc;
  wire [151 : 0] rg_mscratchc$D_IN;
  wire rg_mscratchc$EN;

  // register rg_mtcc
  reg [151 : 0] rg_mtcc;
  reg [151 : 0] rg_mtcc$D_IN;
  wire rg_mtcc$EN;

  // register rg_mtdc
  reg [151 : 0] rg_mtdc;
  wire [151 : 0] rg_mtdc$D_IN;
  wire rg_mtdc$EN;

  // register rg_mtime
  reg [63 : 0] rg_mtime;
  wire [63 : 0] rg_mtime$D_IN;
  wire rg_mtime$EN;

  // register rg_mtval
  reg [63 : 0] rg_mtval;
  wire [63 : 0] rg_mtval$D_IN;
  wire rg_mtval$EN;

  // register rg_nmi
  reg rg_nmi;
  wire rg_nmi$D_IN, rg_nmi$EN;

  // register rg_nmi_vector
  reg [63 : 0] rg_nmi_vector;
  wire [63 : 0] rg_nmi_vector$D_IN;
  wire rg_nmi_vector$EN;

  // register rg_state
  reg rg_state;
  wire rg_state$D_IN, rg_state$EN;

  // register rg_tdata1
  reg [63 : 0] rg_tdata1;
  wire [63 : 0] rg_tdata1$D_IN;
  wire rg_tdata1$EN;

  // register rg_tdata2
  reg [63 : 0] rg_tdata2;
  wire [63 : 0] rg_tdata2$D_IN;
  wire rg_tdata2$EN;

  // register rg_tdata3
  reg [63 : 0] rg_tdata3;
  wire [63 : 0] rg_tdata3$D_IN;
  wire rg_tdata3$EN;

  // register rg_tselect
  reg [63 : 0] rg_tselect;
  wire [63 : 0] rg_tselect$D_IN;
  wire rg_tselect$EN;

  // ports of submodule csr_mie
  wire [63 : 0] csr_mie$mav_write, csr_mie$mav_write_wordxl, csr_mie$mv_read;
  wire [27 : 0] csr_mie$mav_write_misa;
  wire csr_mie$EN_mav_write, csr_mie$EN_reset;

  // ports of submodule csr_mip
  wire [63 : 0] csr_mip$mav_write, csr_mip$mav_write_wordxl, csr_mip$mv_read;
  wire [27 : 0] csr_mip$mav_write_misa;
  wire csr_mip$EN_mav_write,
       csr_mip$EN_reset,
       csr_mip$m_external_interrupt_req_req,
       csr_mip$s_external_interrupt_req_req,
       csr_mip$software_interrupt_req_req,
       csr_mip$timer_interrupt_req_req;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule soc_map
  wire [151 : 0] soc_map$m_mepcc_reset_value, soc_map$m_mtcc_reset_value;
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr,
		soc_map$m_nmivec_reset_value;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_mcycle_incr,
       CAN_FIRE_RL_rl_mtime_incr,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_upd_minstret_csrrx,
       CAN_FIRE_RL_rl_upd_minstret_incr,
       CAN_FIRE_csr_minstret_incr,
       CAN_FIRE_csr_ret_actions,
       CAN_FIRE_csr_trap_actions,
       CAN_FIRE_debug,
       CAN_FIRE_m_external_interrupt_req,
       CAN_FIRE_mav_csr_write,
       CAN_FIRE_mav_read_csr,
       CAN_FIRE_mav_scr_write,
       CAN_FIRE_nmi_req,
       CAN_FIRE_s_external_interrupt_req,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       WILL_FIRE_RL_rl_mcycle_incr,
       WILL_FIRE_RL_rl_mtime_incr,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_upd_minstret_csrrx,
       WILL_FIRE_RL_rl_upd_minstret_incr,
       WILL_FIRE_csr_minstret_incr,
       WILL_FIRE_csr_ret_actions,
       WILL_FIRE_csr_trap_actions,
       WILL_FIRE_debug,
       WILL_FIRE_m_external_interrupt_req,
       WILL_FIRE_mav_csr_write,
       WILL_FIRE_mav_read_csr,
       WILL_FIRE_mav_scr_write,
       WILL_FIRE_nmi_req,
       WILL_FIRE_s_external_interrupt_req,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req;

  // inputs to muxes for submodule ports
  wire [151 : 0] MUX_rg_mepcc$write_1__VAL_2,
		 MUX_rg_mepcc$write_1__VAL_3,
		 MUX_rg_mtcc$write_1__VAL_2,
		 MUX_rg_mtcc$write_1__VAL_3;
  wire [63 : 0] MUX_csr_mstatus_rg_mstatus$write_1__VAL_3,
		MUX_rg_minstret$write_1__VAL_1,
		MUX_rg_minstret$write_1__VAL_2,
		MUX_rg_mtval$write_1__VAL_2;
  wire [6 : 0] MUX_rg_mcause$write_1__VAL_2, MUX_rg_mcause$write_1__VAL_3;
  wire MUX_csr_mstatus_rg_mstatus$write_1__SEL_2,
       MUX_rg_mcause$write_1__SEL_2,
       MUX_rg_mcounteren$write_1__SEL_1,
       MUX_rg_mepcc$write_1__SEL_2,
       MUX_rg_mepcc$write_1__SEL_3,
       MUX_rg_mtcc$write_1__SEL_2,
       MUX_rg_mtcc$write_1__SEL_3,
       MUX_rg_mtval$write_1__SEL_1,
       MUX_rg_tdata1$write_1__SEL_1,
       MUX_rw_minstret$wset_1__SEL_1;

  // remaining internal signals
  reg [151 : 0] IF_read_scr_scr_addr_EQ_28_96_THEN_rg_mtcc_50__ETC___d414;
  reg [63 : 0] CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q14,
	       IF_mav_csr_write_csr_addr_EQ_0x300_75_THEN_102_ETC___d795,
	       IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d563,
	       IF_read_csr_csr_addr_EQ_0xC00_3_THEN_rg_mcycle_ETC___d243,
	       IF_read_csr_port2_csr_addr_EQ_0xC00_58_THEN_rg_ETC___d393;
  reg [17 : 0] CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q8;
  reg [13 : 0] CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q11,
	       CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q12,
	       CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q4;
  reg [5 : 0] CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q10;
  reg [3 : 0] CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q5;
  reg [1 : 0] CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q7,
	      mask__h10377,
	      mask__h7149,
	      mask__h8151;
  reg CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q13,
      CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q6,
      CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q9;
  wire [151 : 0] IF_mav_scr_write_scr_addr_EQ_29_76_THEN_mav_sc_ETC___d1063;
  wire [86 : 0] IF_mav_scr_write_scr_addr_EQ_29_76_THEN_mav_sc_ETC___d1062;
  wire [65 : 0] IF_csr_ret_actions_from_priv_EQ_0b11_387_THEN__ETC___d1439;
  wire [64 : 0] IF_mav_scr_write_cap_BITS_34_TO_29_98_ULT_51_1_ETC___d951,
		addTop__h12145,
		result__h12733,
		ret__h12147;
  wire [63 : 0] IF_csr_ret_actions_from_priv_EQ_0b11_387_THEN__ETC___d1407,
		SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86_TO__ETC___d825,
		SEXT__0b0_CONCAT_rg_mtcc_50_BITS_86_TO_73_51_5_ETC___d173,
		_theResult_____2__h15083,
		_theResult___fst__h17100,
		_theResult___fst__h17301,
		addBase__h12029,
		addBase__h16671,
		addBase__h7189,
		addBase__h8191,
		addrLSB__h12884,
		addrLSB__h13465,
		addrLSB__h3925,
		addrLSB__h4198,
		cap_unpacked_capFat_address__h10397,
		cap_unpacked_capFat_address__h11664,
		csr_mstatus_rg_mstatus_48_AND_INV_1_SL_0_CONCA_ETC___d1400,
		exc_pc___1__h15137,
		exc_pc__h14723,
		exc_pc__h15081,
		length__h12792,
		mask__h17121,
		mask__h17138,
		mav_scr_write_cap_BITS_150_TO_101_59_AND_11258_ETC___d864,
		new_csr__h10774,
		new_csr_value__h6367,
		new_csr_value__h7418,
		new_csr_value__h8998,
		new_offset__h9429,
		result_d_address__h16647,
		rg_mepc__h1320,
		rg_mtcc_BITS_150_TO_87__q2,
		v__h7326,
		v__h8328,
		val__h17139,
		vector_offset__h15082,
		wordxl1__h5865,
		x1_avValue_address__h10677,
		x__h10257,
		x__h10864,
		x__h10866,
		x__h11499,
		x__h12976,
		x__h13476,
		x__h13478,
		x__h13601,
		x__h16576,
		x__h16933,
		x__h16934,
		x__h17120,
		x__h17133,
		x__h17150,
		x__h3333,
		x__h3936,
		x__h3938,
		x__h4071,
		x__h4209,
		x__h4211,
		x__h4341,
		x__h5681,
		x__h7024,
		x__h8032,
		x_address__h7169,
		x_address__h8171,
		y__h12975,
		y__h13600,
		y__h17134,
		y__h17151,
		y__h4070,
		y__h4340;
  wire [50 : 0] mask__h12146;
  wire [49 : 0] highBitsfilter__h15967,
		highBitsfilter__h6400,
		highBitsfilter__h7451,
		highOffsetBits__h10791,
		highOffsetBits__h15968,
		highOffsetBits__h6401,
		highOffsetBits__h7452,
		mask__h12030,
		mav_scr_write_cap_BITS_150_TO_101_PLUS_SEXT_x3_ETC__q3,
		signBits__h10788,
		signBits__h15965,
		signBits__h7449,
		x__h10818,
		x__h15995,
		x__h7479;
  wire [34 : 0] IF_IF_mav_scr_write_cap_BITS_34_TO_29_98_EQ_0__ETC___d1012;
  wire [28 : 0] rg_mcounteren_BITS_31_TO_3__q15;
  wire [22 : 0] fixed_up_val_23__h14130,
		fixed_up_val_23__h16992,
		fixed_up_val_23__h5904;
  wire [17 : 0] a_capFat_otype__h17731, x1_avValue_otype__h10682;
  wire [15 : 0] base__h13463,
		offset__h10852,
		offset__h13464,
		offset__h3924,
		offset__h4197,
		x__h12080,
		x__h12205,
		x__h12796,
		x__h16722,
		x__h4707,
		x__h7240,
		x__h8242;
  wire [13 : 0] cap_unpacked_capFat_addrBits__h10398,
		cap_unpacked_capFat_addrBits__h11665,
		newAddrBits__h10376,
		newAddrBits__h11643,
		newAddrBits__h16635,
		newAddrBits__h7148,
		newAddrBits__h8150,
		result_d_addrBits__h16648,
		rg_mtcc_BITS_14_TO_1__q1,
		toBoundsM1__h10801,
		toBoundsM1__h15978,
		toBoundsM1__h6411,
		toBoundsM1__h7462,
		toBounds__h10800,
		toBounds__h15977,
		toBounds__h6410,
		toBounds__h7461,
		x1_avValue_addrBits__h10678,
		x1_avValue_bounds_baseBits__h13264,
		x1_avValue_bounds_topBits__h13263,
		x_addrBits__h7170,
		x_addrBits__h8172;
  wire [11 : 0] i__h18558;
  wire [5 : 0] IF_NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_N_ETC___d1760,
	       IF_NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_N_ETC___d1762,
	       IF_NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_N_ETC___d1764,
	       IF_NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_N_ETC___d1766,
	       exc_code__h15816,
	       ie_from_x__h17084,
	       pie_from_x__h17085;
  wire [3 : 0] IF_rg_mepcc_83_BITS_28_TO_26_425_ULT_rg_mepcc__ETC___d1431,
	       x1_avValue_perms_soft__h13159;
  wire [2 : 0] repBound__h13016, repBound__h3971, repBound__h4244;
  wire [1 : 0] IF_rg_mepcc_83_BITS_14_TO_12_86_ULT_rg_mepcc_8_ETC___d195,
	       _0b0_CONCAT_mav_scr_write_cap_BITS_150_TO_101_5_ETC___d943,
	       mask__h16636,
	       mpp__h15176,
	       to_y__h17300,
	       x1_avValue_reserved__h10681,
	       x__h13077,
	       x__h13096;
  wire IF_IF_csr_trap_actions_interrupt_AND_NOT_csr_t_ETC___d1360,
       IF_SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86__ETC___d849,
       IF_SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86__ETC___d884,
       IF_mav_csr_write_word_BIT_63_94_THEN_NOT_mav_c_ETC___d616,
       IF_mav_csr_write_word_BIT_63_94_THEN_NOT_mav_c_ETC___d664,
       NOT_access_permitted_1_csr_addr_ULT_0xC03_440__ETC___d1507,
       NOT_access_permitted_2_csr_addr_ULT_0xC03_531__ETC___d1598,
       NOT_cfg_verbosity_read__62_ULE_1_63___d764,
       NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1724,
       NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1729,
       NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1734,
       NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1739,
       NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1744,
       NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1749,
       NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1754,
       NOT_csr_trap_actions_nmi_210_AND_csr_trap_acti_ETC___d1288,
       NOT_mav_scr_write_cap_BITS_34_TO_29_98_ULT_50_51___d852,
       SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86_TO__ETC___d856,
       SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86_TO__ETC___d890,
       access_permitted_1_csr_addr_ULE_0xC1F___d1442,
       access_permitted_1_csr_addr_ULT_0xC03___d1440,
       access_permitted_2_csr_addr_ULE_0xC1F___d1533,
       access_permitted_2_csr_addr_ULT_0xC03___d1531,
       b__h17137,
       csr_counter_read_fault_csr_addr_EQ_0xC00_642_A_ETC___d1666,
       csr_mip_mv_read__15_BIT_11_667_AND_csr_mie_mv__ETC___d1678,
       csr_mip_mv_read__15_BIT_11_667_AND_csr_mie_mv__ETC___d1683,
       csr_mip_mv_read__15_BIT_11_667_AND_csr_mie_mv__ETC___d1688,
       csr_mip_mv_read__15_BIT_11_667_AND_csr_mie_mv__ETC___d1693,
       csr_mip_mv_read__15_BIT_11_667_AND_csr_mie_mv__ETC___d1698,
       csr_mip_mv_read__15_BIT_11_667_AND_csr_mie_mv__ETC___d1703,
       csr_mip_mv_read__15_BIT_11_667_AND_csr_mie_mv__ETC___d1708,
       csr_mip_mv_read__15_BIT_11_667_AND_csr_mie_mv__ETC___d1713,
       csr_trap_actions_nmi_OR_NOT_csr_trap_actions_i_ETC___d1339,
       mav_csr_write_csr_addr_ULE_0x33F___d571,
       mav_csr_write_csr_addr_ULE_0xB1F___d567,
       mav_csr_write_csr_addr_ULT_0x323_70_OR_NOT_mav_ETC___d760,
       mav_csr_write_csr_addr_ULT_0x323___d570,
       mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d576,
       mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d590,
       mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d592,
       mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d644,
       mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d647,
       mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d649,
       mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d692,
       mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d696,
       mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d698,
       mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d700,
       mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d702,
       mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d704,
       mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d706,
       mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d710,
       mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d712,
       mav_csr_write_csr_addr_ULT_0xB03___d566,
       mav_scr_write_cap_BITS_14_TO_12_06_ULT_mav_scr_ETC___d808,
       mav_scr_write_cap_BITS_28_TO_26_24_ULT_mav_scr_ETC___d925,
       mav_scr_write_cap_BITS_86_TO_84_09_ULT_mav_scr_ETC___d810,
       rg_mepcc_83_BITS_14_TO_12_86_ULT_rg_mepcc_83_B_ETC___d188,
       rg_mepcc_83_BITS_28_TO_26_425_ULT_rg_mepcc_83__ETC___d1426,
       rg_mepcc_83_BITS_86_TO_84_89_ULT_rg_mepcc_83_B_ETC___d190,
       rg_mtcc_50_BITS_14_TO_12_53_ULT_rg_mtcc_50_BIT_ETC___d155,
       rg_mtcc_50_BITS_86_TO_84_56_ULT_rg_mtcc_50_BIT_ETC___d157,
       x1_avValue_flags__h10680;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_rsps$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_rsps$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = rg_state && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     rg_state && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // value method read_csr
  assign read_csr =
	     { read_csr_csr_addr >= 12'hC03 && read_csr_csr_addr <= 12'hC1F ||
	       read_csr_csr_addr >= 12'hB03 && read_csr_csr_addr <= 12'hB1F ||
	       read_csr_csr_addr >= 12'h323 && read_csr_csr_addr <= 12'h33F ||
	       read_csr_csr_addr == 12'hC00 ||
	       read_csr_csr_addr == 12'hC01 ||
	       read_csr_csr_addr == 12'hC02 ||
	       read_csr_csr_addr == 12'hF11 ||
	       read_csr_csr_addr == 12'hF12 ||
	       read_csr_csr_addr == 12'hF13 ||
	       read_csr_csr_addr == 12'hF14 ||
	       read_csr_csr_addr == 12'h300 ||
	       read_csr_csr_addr == 12'h301 ||
	       read_csr_csr_addr == 12'h304 ||
	       read_csr_csr_addr == 12'h305 ||
	       read_csr_csr_addr == 12'h306 ||
	       read_csr_csr_addr == 12'h340 ||
	       read_csr_csr_addr == 12'h341 ||
	       read_csr_csr_addr == 12'h342 ||
	       read_csr_csr_addr == 12'h343 ||
	       read_csr_csr_addr == 12'h344 ||
	       read_csr_csr_addr == 12'hBC0 ||
	       read_csr_csr_addr == 12'hB00 ||
	       read_csr_csr_addr == 12'hB02 ||
	       read_csr_csr_addr == 12'h320 ||
	       read_csr_csr_addr == 12'h7A0 ||
	       read_csr_csr_addr == 12'h7A1 ||
	       read_csr_csr_addr == 12'h7A2 ||
	       read_csr_csr_addr == 12'h7A3,
	       (read_csr_csr_addr >= 12'hC03 &&
		read_csr_csr_addr <= 12'hC1F ||
		read_csr_csr_addr >= 12'hB03 &&
		read_csr_csr_addr <= 12'hB1F ||
		read_csr_csr_addr >= 12'h323 &&
		read_csr_csr_addr <= 12'h33F) ?
		 64'd0 :
		 IF_read_csr_csr_addr_EQ_0xC00_3_THEN_rg_mcycle_ETC___d243 } ;

  // value method read_csr_port2
  assign read_csr_port2 =
	     { read_csr_port2_csr_addr >= 12'hC03 &&
	       read_csr_port2_csr_addr <= 12'hC1F ||
	       read_csr_port2_csr_addr >= 12'hB03 &&
	       read_csr_port2_csr_addr <= 12'hB1F ||
	       read_csr_port2_csr_addr >= 12'h323 &&
	       read_csr_port2_csr_addr <= 12'h33F ||
	       read_csr_port2_csr_addr == 12'hC00 ||
	       read_csr_port2_csr_addr == 12'hC01 ||
	       read_csr_port2_csr_addr == 12'hC02 ||
	       read_csr_port2_csr_addr == 12'hF11 ||
	       read_csr_port2_csr_addr == 12'hF12 ||
	       read_csr_port2_csr_addr == 12'hF13 ||
	       read_csr_port2_csr_addr == 12'hF14 ||
	       read_csr_port2_csr_addr == 12'h300 ||
	       read_csr_port2_csr_addr == 12'h301 ||
	       read_csr_port2_csr_addr == 12'h304 ||
	       read_csr_port2_csr_addr == 12'h305 ||
	       read_csr_port2_csr_addr == 12'h306 ||
	       read_csr_port2_csr_addr == 12'h340 ||
	       read_csr_port2_csr_addr == 12'h341 ||
	       read_csr_port2_csr_addr == 12'h342 ||
	       read_csr_port2_csr_addr == 12'h343 ||
	       read_csr_port2_csr_addr == 12'h344 ||
	       read_csr_port2_csr_addr == 12'hBC0 ||
	       read_csr_port2_csr_addr == 12'hB00 ||
	       read_csr_port2_csr_addr == 12'hB02 ||
	       read_csr_port2_csr_addr == 12'h320 ||
	       read_csr_port2_csr_addr == 12'h7A0 ||
	       read_csr_port2_csr_addr == 12'h7A1 ||
	       read_csr_port2_csr_addr == 12'h7A2 ||
	       read_csr_port2_csr_addr == 12'h7A3,
	       (read_csr_port2_csr_addr >= 12'hC03 &&
		read_csr_port2_csr_addr <= 12'hC1F ||
		read_csr_port2_csr_addr >= 12'hB03 &&
		read_csr_port2_csr_addr <= 12'hB1F ||
		read_csr_port2_csr_addr >= 12'h323 &&
		read_csr_port2_csr_addr <= 12'h33F) ?
		 64'd0 :
		 IF_read_csr_port2_csr_addr_EQ_0xC00_58_THEN_rg_ETC___d393 } ;

  // value method read_scr
  assign read_scr =
	     { read_scr_scr_addr == 5'd28 || read_scr_scr_addr == 5'd29 ||
	       read_scr_scr_addr == 5'd30 ||
	       read_scr_scr_addr == 5'd31,
	       IF_read_scr_scr_addr_EQ_28_96_THEN_rg_mtcc_50__ETC___d414 } ;

  // actionvalue method mav_read_csr
  assign mav_read_csr =
	     { mav_read_csr_csr_addr >= 12'hC03 &&
	       mav_read_csr_csr_addr <= 12'hC1F ||
	       mav_read_csr_csr_addr >= 12'hB03 &&
	       mav_read_csr_csr_addr <= 12'hB1F ||
	       mav_read_csr_csr_addr >= 12'h323 &&
	       mav_read_csr_csr_addr <= 12'h33F ||
	       mav_read_csr_csr_addr == 12'hC00 ||
	       mav_read_csr_csr_addr == 12'hC01 ||
	       mav_read_csr_csr_addr == 12'hC02 ||
	       mav_read_csr_csr_addr == 12'hF11 ||
	       mav_read_csr_csr_addr == 12'hF12 ||
	       mav_read_csr_csr_addr == 12'hF13 ||
	       mav_read_csr_csr_addr == 12'hF14 ||
	       mav_read_csr_csr_addr == 12'h300 ||
	       mav_read_csr_csr_addr == 12'h301 ||
	       mav_read_csr_csr_addr == 12'h304 ||
	       mav_read_csr_csr_addr == 12'h305 ||
	       mav_read_csr_csr_addr == 12'h306 ||
	       mav_read_csr_csr_addr == 12'h340 ||
	       mav_read_csr_csr_addr == 12'h341 ||
	       mav_read_csr_csr_addr == 12'h342 ||
	       mav_read_csr_csr_addr == 12'h343 ||
	       mav_read_csr_csr_addr == 12'h344 ||
	       mav_read_csr_csr_addr == 12'hBC0 ||
	       mav_read_csr_csr_addr == 12'hB00 ||
	       mav_read_csr_csr_addr == 12'hB02 ||
	       mav_read_csr_csr_addr == 12'h320 ||
	       mav_read_csr_csr_addr == 12'h7A0 ||
	       mav_read_csr_csr_addr == 12'h7A1 ||
	       mav_read_csr_csr_addr == 12'h7A2 ||
	       mav_read_csr_csr_addr == 12'h7A3,
	       (mav_read_csr_csr_addr >= 12'hC03 &&
		mav_read_csr_csr_addr <= 12'hC1F ||
		mav_read_csr_csr_addr >= 12'hB03 &&
		mav_read_csr_csr_addr <= 12'hB1F ||
		mav_read_csr_csr_addr >= 12'h323 &&
		mav_read_csr_csr_addr <= 12'h33F) ?
		 64'd0 :
		 IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d563 } ;
  assign CAN_FIRE_mav_read_csr = 1'd1 ;
  assign WILL_FIRE_mav_read_csr = EN_mav_read_csr ;

  // actionvalue method mav_csr_write
  assign mav_csr_write = { x__h5681, 65'h0AAAAAAAAAAAAAAAA } ;
  assign CAN_FIRE_mav_csr_write = 1'd1 ;
  assign WILL_FIRE_mav_csr_write = EN_mav_csr_write ;

  // actionvalue method mav_scr_write
  assign mav_scr_write =
	     (mav_scr_write_scr_addr == 5'd28) ?
	       { ((mav_scr_write_cap[34:29] == 6'd0) ?
		    mav_scr_write_cap[2:1] :
		    2'b0) ==
		 2'd0 &&
		 SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86_TO__ETC___d856 &&
		 mav_scr_write_cap[151],
		 x1_avValue_address__h10677,
		 x1_avValue_addrBits__h10678,
		 x1_avValue_perms_soft__h13159,
		 ((mav_scr_write_cap[34:29] == 6'd0) ?
		    mav_scr_write_cap[2:1] :
		    2'b0) ==
		 2'd0 &&
		 mav_scr_write_cap[68],
		 ((mav_scr_write_cap[34:29] == 6'd0) ?
		    mav_scr_write_cap[2:1] :
		    2'b0) ==
		 2'd0 &&
		 mav_scr_write_cap[67],
		 ((mav_scr_write_cap[34:29] == 6'd0) ?
		    mav_scr_write_cap[2:1] :
		    2'b0) ==
		 2'd0 &&
		 mav_scr_write_cap[66],
		 ((mav_scr_write_cap[34:29] == 6'd0) ?
		    mav_scr_write_cap[2:1] :
		    2'b0) ==
		 2'd0 &&
		 mav_scr_write_cap[65],
		 ((mav_scr_write_cap[34:29] == 6'd0) ?
		    mav_scr_write_cap[2:1] :
		    2'b0) ==
		 2'd0 &&
		 mav_scr_write_cap[64],
		 ((mav_scr_write_cap[34:29] == 6'd0) ?
		    mav_scr_write_cap[2:1] :
		    2'b0) ==
		 2'd0 &&
		 mav_scr_write_cap[63],
		 ((mav_scr_write_cap[34:29] == 6'd0) ?
		    mav_scr_write_cap[2:1] :
		    2'b0) ==
		 2'd0 &&
		 mav_scr_write_cap[62],
		 ((mav_scr_write_cap[34:29] == 6'd0) ?
		    mav_scr_write_cap[2:1] :
		    2'b0) ==
		 2'd0 &&
		 mav_scr_write_cap[61],
		 ((mav_scr_write_cap[34:29] == 6'd0) ?
		    mav_scr_write_cap[2:1] :
		    2'b0) ==
		 2'd0 &&
		 mav_scr_write_cap[60],
		 ((mav_scr_write_cap[34:29] == 6'd0) ?
		    mav_scr_write_cap[2:1] :
		    2'b0) ==
		 2'd0 &&
		 mav_scr_write_cap[59],
		 ((mav_scr_write_cap[34:29] == 6'd0) ?
		    mav_scr_write_cap[2:1] :
		    2'b0) ==
		 2'd0 &&
		 mav_scr_write_cap[58],
		 ((mav_scr_write_cap[34:29] == 6'd0) ?
		    mav_scr_write_cap[2:1] :
		    2'b0) ==
		 2'd0 &&
		 mav_scr_write_cap[57],
		 x1_avValue_flags__h10680,
		 x1_avValue_reserved__h10681,
		 x1_avValue_otype__h10682,
		 ((mav_scr_write_cap[34:29] == 6'd0) ?
		    mav_scr_write_cap[2:1] :
		    2'b0) !=
		 2'd0 ||
		 mav_scr_write_cap[35],
		 IF_IF_mav_scr_write_cap_BITS_34_TO_29_98_EQ_0__ETC___d1012 } :
	       IF_mav_scr_write_scr_addr_EQ_29_76_THEN_mav_sc_ETC___d1063 ;
  assign CAN_FIRE_mav_scr_write = 1'd1 ;
  assign WILL_FIRE_mav_scr_write = EN_mav_scr_write ;

  // value method read_misa
  assign read_misa = 28'd135266560 ;

  // value method read_mstatus
  assign read_mstatus = csr_mstatus_rg_mstatus ;

  // value method read_ustatus
  assign read_ustatus =
	     { 59'd0,
	       csr_mstatus_rg_mstatus[4],
	       3'd0,
	       csr_mstatus_rg_mstatus[0] } ;

  // value method read_satp
  assign read_satp = 64'hAAAAAAAAAAAAAAAA ;

  // actionvalue method csr_trap_actions
  assign csr_trap_actions =
	     { (highOffsetBits__h15968 == 50'd0 &&
		IF_IF_csr_trap_actions_interrupt_AND_NOT_csr_t_ETC___d1360 ||
		rg_mtcc[34:29] >= 6'd50) &&
	       rg_mtcc[151],
	       result_d_address__h16647,
	       result_d_addrBits__h16648,
	       rg_mtcc[72:0],
	       x__h16933,
	       x__h16934,
	       2'b11 } ;
  assign RDY_csr_trap_actions = 1'd1 ;
  assign CAN_FIRE_csr_trap_actions = 1'd1 ;
  assign WILL_FIRE_csr_trap_actions = EN_csr_trap_actions ;

  // actionvalue method csr_ret_actions
  assign csr_ret_actions =
	     { rg_mepcc[151:54],
	       a_capFat_otype__h17731,
	       rg_mepcc[35:0],
	       repBound__h4244,
	       rg_mepcc_83_BITS_28_TO_26_425_ULT_rg_mepcc_83__ETC___d1426,
	       rg_mepcc_83_BITS_14_TO_12_86_ULT_rg_mepcc_83_B_ETC___d188,
	       rg_mepcc_83_BITS_86_TO_84_89_ULT_rg_mepcc_83_B_ETC___d190,
	       IF_rg_mepcc_83_BITS_28_TO_26_425_ULT_rg_mepcc__ETC___d1431,
	       IF_csr_ret_actions_from_priv_EQ_0b11_387_THEN__ETC___d1439 } ;
  assign RDY_csr_ret_actions = 1'd1 ;
  assign CAN_FIRE_csr_ret_actions = 1'd1 ;
  assign WILL_FIRE_csr_ret_actions = EN_csr_ret_actions ;

  // value method read_csr_minstret
  assign read_csr_minstret = rg_minstret ;

  // action method csr_minstret_incr
  assign CAN_FIRE_csr_minstret_incr = 1'd1 ;
  assign WILL_FIRE_csr_minstret_incr = EN_csr_minstret_incr ;

  // value method read_csr_mcycle
  assign read_csr_mcycle = rg_mcycle ;

  // value method read_csr_mtime
  assign read_csr_mtime = rg_mtime ;

  // value method access_permitted_1
  assign access_permitted_1 =
	     { NOT_access_permitted_1_csr_addr_ULT_0xC03_440__ETC___d1507 &&
	       (access_permitted_1_csr_addr != 12'h180 ||
		!csr_mstatus_rg_mstatus[20]) &&
	       (access_permitted_1_read_not_write ||
		access_permitted_1_csr_addr[11:10] != 2'b11),
	       (access_permitted_1_csr_addr_ULT_0xC03___d1440 ||
		!access_permitted_1_csr_addr_ULE_0xC1F___d1442 ||
		!access_permitted_1_read_not_write) &&
	       (access_permitted_1_csr_addr != 12'hC00 ||
		!access_permitted_1_read_not_write) &&
	       (access_permitted_1_csr_addr != 12'hC01 ||
		!access_permitted_1_read_not_write) &&
	       (access_permitted_1_csr_addr != 12'hC02 ||
		!access_permitted_1_read_not_write) } ;

  // value method access_permitted_2
  assign access_permitted_2 =
	     { NOT_access_permitted_2_csr_addr_ULT_0xC03_531__ETC___d1598 &&
	       (access_permitted_2_csr_addr != 12'h180 ||
		!csr_mstatus_rg_mstatus[20]) &&
	       (access_permitted_2_read_not_write ||
		access_permitted_2_csr_addr[11:10] != 2'b11),
	       (access_permitted_2_csr_addr_ULT_0xC03___d1531 ||
		!access_permitted_2_csr_addr_ULE_0xC1F___d1533 ||
		!access_permitted_2_read_not_write) &&
	       (access_permitted_2_csr_addr != 12'hC00 ||
		!access_permitted_2_read_not_write) &&
	       (access_permitted_2_csr_addr != 12'hC01 ||
		!access_permitted_2_read_not_write) &&
	       (access_permitted_2_csr_addr != 12'hC02 ||
		!access_permitted_2_read_not_write) } ;

  // value method access_permitted_scr
  assign access_permitted_scr =
	     { (access_permitted_scr_scr_addr == 5'd1 ||
		access_permitted_scr_scr_addr == 5'd28 ||
		access_permitted_scr_scr_addr == 5'd29 ||
		access_permitted_scr_scr_addr == 5'd31 ||
		access_permitted_scr_scr_addr == 5'd30) &&
	       access_permitted_scr_priv >=
	       access_permitted_scr_scr_addr[4:3] &&
	       access_permitted_scr_scr_addr != 5'd0,
	       access_permitted_scr_scr_addr != 5'd1 } ;

  // value method csr_counter_read_fault
  assign csr_counter_read_fault =
	     (csr_counter_read_fault_priv == 2'b01 ||
	      csr_counter_read_fault_priv == 2'b0) &&
	     csr_counter_read_fault_csr_addr_EQ_0xC00_642_A_ETC___d1666 ;

  // value method csr_mip_read
  assign csr_mip_read = csr_mip$mv_read ;

  // action method m_external_interrupt_req
  assign CAN_FIRE_m_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_m_external_interrupt_req = 1'd1 ;

  // action method s_external_interrupt_req
  assign CAN_FIRE_s_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_s_external_interrupt_req = 1'd1 ;

  // action method timer_interrupt_req
  assign CAN_FIRE_timer_interrupt_req = 1'd1 ;
  assign WILL_FIRE_timer_interrupt_req = 1'd1 ;

  // action method software_interrupt_req
  assign CAN_FIRE_software_interrupt_req = 1'd1 ;
  assign WILL_FIRE_software_interrupt_req = 1'd1 ;

  // value method interrupt_pending
  assign interrupt_pending =
	     { csr_mip_mv_read__15_BIT_11_667_AND_csr_mie_mv__ETC___d1713,
	       NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1754 ?
		 6'd4 :
		 IF_NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_N_ETC___d1766 } ;

  // value method wfi_resume
  assign wfi_resume = (csr_mip$mv_read & csr_mie$mv_read) != 64'd0 ;

  // action method nmi_req
  assign CAN_FIRE_nmi_req = 1'd1 ;
  assign WILL_FIRE_nmi_req = 1'd1 ;

  // value method nmi_pending
  assign nmi_pending = rg_nmi ;

  // action method debug
  assign RDY_debug = 1'd1 ;
  assign CAN_FIRE_debug = 1'd1 ;
  assign WILL_FIRE_debug = EN_debug ;

  // submodule csr_mie
  mkCSR_MIE csr_mie(.CLK(CLK),
		    .RST_N(RST_N),
		    .mav_write_misa(csr_mie$mav_write_misa),
		    .mav_write_wordxl(csr_mie$mav_write_wordxl),
		    .EN_reset(csr_mie$EN_reset),
		    .EN_mav_write(csr_mie$EN_mav_write),
		    .mv_read(csr_mie$mv_read),
		    .mav_write(csr_mie$mav_write));

  // submodule csr_mip
  mkCSR_MIP csr_mip(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_external_interrupt_req_req(csr_mip$m_external_interrupt_req_req),
		    .mav_write_misa(csr_mip$mav_write_misa),
		    .mav_write_wordxl(csr_mip$mav_write_wordxl),
		    .s_external_interrupt_req_req(csr_mip$s_external_interrupt_req_req),
		    .software_interrupt_req_req(csr_mip$software_interrupt_req_req),
		    .timer_interrupt_req_req(csr_mip$timer_interrupt_req_req),
		    .EN_reset(csr_mip$EN_reset),
		    .EN_mav_write(csr_mip$EN_mav_write),
		    .mv_read(csr_mip$mv_read),
		    .mav_write(csr_mip$mav_write));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(1'd1)) f_reset_rsps(.RST(RST_N),
					.CLK(CLK),
					.ENQ(f_reset_rsps$ENQ),
					.DEQ(f_reset_rsps$DEQ),
					.CLR(f_reset_rsps$CLR),
					.FULL_N(f_reset_rsps$FULL_N),
					.EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_near_mem_io_addr_range(),
		    .m_plic_addr_range(),
		    .m_uart0_addr_range(),
		    .m_boot_rom_addr_range(),
		    .m_mem0_controller_addr_range(),
		    .m_tcm_addr_range(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value(soc_map$m_nmivec_reset_value),
		    .m_pcc_reset_value(),
		    .m_ddc_reset_value(),
		    .m_mtcc_reset_value(soc_map$m_mtcc_reset_value),
		    .m_mepcc_reset_value(soc_map$m_mepcc_reset_value));

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start = !rg_state ;
  assign WILL_FIRE_RL_rl_reset_start =
	     CAN_FIRE_RL_rl_reset_start && !EN_mav_csr_write ;

  // rule RL_rl_mcycle_incr
  assign CAN_FIRE_RL_rl_mcycle_incr = 1'd1 ;
  assign WILL_FIRE_RL_rl_mcycle_incr = 1'd1 ;

  // rule RL_rl_mtime_incr
  assign CAN_FIRE_RL_rl_mtime_incr = 1'd1 ;
  assign WILL_FIRE_RL_rl_mtime_incr = 1'd1 ;

  // rule RL_rl_upd_minstret_csrrx
  assign CAN_FIRE_RL_rl_upd_minstret_csrrx =
	     MUX_rw_minstret$wset_1__SEL_1 || WILL_FIRE_RL_rl_reset_start ;
  assign WILL_FIRE_RL_rl_upd_minstret_csrrx =
	     CAN_FIRE_RL_rl_upd_minstret_csrrx ;

  // rule RL_rl_upd_minstret_incr
  assign CAN_FIRE_RL_rl_upd_minstret_incr =
	     !CAN_FIRE_RL_rl_upd_minstret_csrrx && EN_csr_minstret_incr ;
  assign WILL_FIRE_RL_rl_upd_minstret_incr =
	     CAN_FIRE_RL_rl_upd_minstret_incr ;

  // inputs to muxes for submodule ports
  assign MUX_csr_mstatus_rg_mstatus$write_1__SEL_2 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d576 ;
  assign MUX_rg_mcause$write_1__SEL_2 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d692 ;
  assign MUX_rg_mcounteren$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d644 ;
  assign MUX_rg_mepcc$write_1__SEL_2 =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd31 ;
  assign MUX_rg_mepcc$write_1__SEL_3 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d649 ;
  assign MUX_rg_mtcc$write_1__SEL_2 =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd28 &&
	     ((mav_scr_write_cap[34:29] == 6'd0) ?
		mav_scr_write_cap[2:1] :
		2'b0) ==
	     2'd0 ;
  assign MUX_rg_mtcc$write_1__SEL_3 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d592 ;
  assign MUX_rg_mtval$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d696 ;
  assign MUX_rg_tdata1$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d706 ;
  assign MUX_rw_minstret$wset_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d702 ;
  assign MUX_csr_mstatus_rg_mstatus$write_1__VAL_3 =
	     { 41'd1024, fixed_up_val_23__h16992 } ;
  assign MUX_rg_mcause$write_1__VAL_2 =
	     { mav_csr_write_word[63], mav_csr_write_word[5:0] } ;
  assign MUX_rg_mcause$write_1__VAL_3 =
	     { !csr_trap_actions_nmi && csr_trap_actions_interrupt,
	       exc_code__h15816 } ;
  assign MUX_rg_mepcc$write_1__VAL_2 =
	     { SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86_TO__ETC___d890 &&
	       mav_scr_write_cap[151],
	       cap_unpacked_capFat_address__h11664,
	       cap_unpacked_capFat_addrBits__h11665,
	       mav_scr_write_cap[72:0] } ;
  assign MUX_rg_mepcc$write_1__VAL_3 =
	     { (highOffsetBits__h7452 == 50'd0 &&
		IF_mav_csr_write_word_BIT_63_94_THEN_NOT_mav_c_ETC___d664 ||
		rg_mepcc[34:29] >= 6'd50) &&
	       rg_mepcc[53:36] == 18'd262143 &&
	       rg_mepcc[151],
	       x_address__h8171,
	       x_addrBits__h8172,
	       rg_mepcc[72:0] } ;
  assign MUX_rg_minstret$write_1__VAL_1 =
	     MUX_rw_minstret$wset_1__SEL_1 ? mav_csr_write_word : 64'd0 ;
  assign MUX_rg_minstret$write_1__VAL_2 = rg_minstret + 64'd1 ;
  assign MUX_rg_mtcc$write_1__VAL_2 =
	     { SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86_TO__ETC___d856 &&
	       mav_scr_write_cap[151],
	       cap_unpacked_capFat_address__h10397,
	       cap_unpacked_capFat_addrBits__h10398,
	       mav_scr_write_cap[72:0] } ;
  assign MUX_rg_mtcc$write_1__VAL_3 =
	     { (highOffsetBits__h6401 == 50'd0 &&
		IF_mav_csr_write_word_BIT_63_94_THEN_NOT_mav_c_ETC___d616 ||
		rg_mtcc[34:29] >= 6'd50) &&
	       rg_mtcc[53:36] == 18'd262143 &&
	       rg_mtcc[151],
	       x_address__h7169,
	       x_addrBits__h7170,
	       rg_mtcc[72:0] } ;
  assign MUX_rg_mtval$write_1__VAL_2 =
	     (csr_trap_actions_exc_code == 6'd28) ?
	       { 53'd0,
		 csr_trap_actions_cheri_exc_reg,
		 csr_trap_actions_cheri_exc_code } :
	       csr_trap_actions_xtval ;

  // inlined wires
  assign rw_mcycle$whas =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d700 ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = 4'h0 ;
  assign cfg_verbosity$EN = 1'b0 ;

  // register csr_mstatus_rg_mstatus
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_csr_mstatus_rg_mstatus$write_1__SEL_2 or
	  wordxl1__h5865 or
	  EN_csr_ret_actions or
	  MUX_csr_mstatus_rg_mstatus$write_1__VAL_3 or
	  EN_csr_trap_actions or x__h16933)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start:
	csr_mstatus_rg_mstatus$D_IN = 64'h0000000200000000;
    MUX_csr_mstatus_rg_mstatus$write_1__SEL_2:
	csr_mstatus_rg_mstatus$D_IN = wordxl1__h5865;
    EN_csr_ret_actions:
	csr_mstatus_rg_mstatus$D_IN =
	    MUX_csr_mstatus_rg_mstatus$write_1__VAL_3;
    EN_csr_trap_actions: csr_mstatus_rg_mstatus$D_IN = x__h16933;
    default: csr_mstatus_rg_mstatus$D_IN =
		 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign csr_mstatus_rg_mstatus$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d576 ||
	     EN_csr_trap_actions ||
	     EN_csr_ret_actions ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mcause
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_mcause$write_1__SEL_2 or
	  MUX_rg_mcause$write_1__VAL_2 or
	  EN_csr_trap_actions or MUX_rg_mcause$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mcause$D_IN = 7'd0;
    MUX_rg_mcause$write_1__SEL_2:
	rg_mcause$D_IN = MUX_rg_mcause$write_1__VAL_2;
    EN_csr_trap_actions: rg_mcause$D_IN = MUX_rg_mcause$write_1__VAL_3;
    default: rg_mcause$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign rg_mcause$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d692 ||
	     EN_csr_trap_actions ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mccsr
  assign rg_mccsr$D_IN =
	     { csr_trap_actions_cheri_exc_reg,
	       csr_trap_actions_cheri_exc_code } ;
  assign rg_mccsr$EN =
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     csr_trap_actions_exc_code == 6'd28 ;

  // register rg_mcounteren
  assign rg_mcounteren$D_IN =
	     MUX_rg_mcounteren$write_1__SEL_1 ?
	       mav_csr_write_word[31:0] :
	       32'd0 ;
  assign rg_mcounteren$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d644 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mcycle
  assign rg_mcycle$D_IN = rw_mcycle$whas ? mav_csr_write_word : x__h3333 ;
  assign rg_mcycle$EN = 1'd1 ;

  // register rg_mepcc
  always@(WILL_FIRE_RL_rl_reset_start or
	  soc_map$m_mepcc_reset_value or
	  MUX_rg_mepcc$write_1__SEL_2 or
	  MUX_rg_mepcc$write_1__VAL_2 or
	  MUX_rg_mepcc$write_1__SEL_3 or
	  MUX_rg_mepcc$write_1__VAL_3 or
	  EN_csr_trap_actions or csr_trap_actions_pcc)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mepcc$D_IN = soc_map$m_mepcc_reset_value;
    MUX_rg_mepcc$write_1__SEL_2: rg_mepcc$D_IN = MUX_rg_mepcc$write_1__VAL_2;
    MUX_rg_mepcc$write_1__SEL_3: rg_mepcc$D_IN = MUX_rg_mepcc$write_1__VAL_3;
    EN_csr_trap_actions: rg_mepcc$D_IN = csr_trap_actions_pcc[161:10];
    default: rg_mepcc$D_IN =
		 152'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign rg_mepcc$EN =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd31 ||
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d649 ||
	     WILL_FIRE_RL_rl_reset_start ||
	     EN_csr_trap_actions ;

  // register rg_minstret
  assign rg_minstret$D_IN =
	     WILL_FIRE_RL_rl_upd_minstret_csrrx ?
	       MUX_rg_minstret$write_1__VAL_1 :
	       MUX_rg_minstret$write_1__VAL_2 ;
  assign rg_minstret$EN =
	     WILL_FIRE_RL_rl_upd_minstret_csrrx ||
	     WILL_FIRE_RL_rl_upd_minstret_incr ;

  // register rg_mscratch
  assign rg_mscratch$D_IN = mav_csr_write_word ;
  assign rg_mscratch$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d647 ;

  // register rg_mscratchc
  assign rg_mscratchc$D_IN =
	     WILL_FIRE_RL_rl_reset_start ?
	       152'h0000000000000000000000003FFFFE88000000 :
	       mav_scr_write_cap ;
  assign rg_mscratchc$EN =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd30 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mtcc
  always@(WILL_FIRE_RL_rl_reset_start or
	  soc_map$m_mtcc_reset_value or
	  MUX_rg_mtcc$write_1__SEL_2 or
	  MUX_rg_mtcc$write_1__VAL_2 or
	  MUX_rg_mtcc$write_1__SEL_3 or MUX_rg_mtcc$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mtcc$D_IN = soc_map$m_mtcc_reset_value;
    MUX_rg_mtcc$write_1__SEL_2: rg_mtcc$D_IN = MUX_rg_mtcc$write_1__VAL_2;
    MUX_rg_mtcc$write_1__SEL_3: rg_mtcc$D_IN = MUX_rg_mtcc$write_1__VAL_3;
    default: rg_mtcc$D_IN =
		 152'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign rg_mtcc$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d592 ||
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd28 &&
	     ((mav_scr_write_cap[34:29] == 6'd0) ?
		mav_scr_write_cap[2:1] :
		2'b0) ==
	     2'd0 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mtdc
  assign rg_mtdc$D_IN =
	     WILL_FIRE_RL_rl_reset_start ?
	       152'h0000000000000000000000003FFFFE88000000 :
	       mav_scr_write_cap ;
  assign rg_mtdc$EN =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd29 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mtime
  assign rg_mtime$D_IN = rg_mtime + 64'd1 ;
  assign rg_mtime$EN = 1'd1 ;

  // register rg_mtval
  assign rg_mtval$D_IN =
	     MUX_rg_mtval$write_1__SEL_1 ?
	       mav_csr_write_word :
	       MUX_rg_mtval$write_1__VAL_2 ;
  assign rg_mtval$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d696 ||
	     EN_csr_trap_actions ;

  // register rg_nmi
  assign rg_nmi$D_IN = !WILL_FIRE_RL_rl_reset_start && nmi_req_set_not_clear ;
  assign rg_nmi$EN = 1'b1 ;

  // register rg_nmi_vector
  assign rg_nmi_vector$D_IN = soc_map$m_nmivec_reset_value ;
  assign rg_nmi_vector$EN = WILL_FIRE_RL_rl_reset_start ;

  // register rg_state
  assign rg_state$D_IN = !EN_server_reset_request_put ;
  assign rg_state$EN =
	     EN_server_reset_request_put || WILL_FIRE_RL_rl_reset_start ;

  // register rg_tdata1
  assign rg_tdata1$D_IN =
	     MUX_rg_tdata1$write_1__SEL_1 ? new_csr_value__h8998 : 64'd0 ;
  assign rg_tdata1$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d706 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_tdata2
  assign rg_tdata2$D_IN = mav_csr_write_word ;
  assign rg_tdata2$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d710 ;

  // register rg_tdata3
  assign rg_tdata3$D_IN = mav_csr_write_word ;
  assign rg_tdata3$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d712 ;

  // register rg_tselect
  assign rg_tselect$D_IN = 64'd0 ;
  assign rg_tselect$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d704 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // submodule csr_mie
  assign csr_mie$mav_write_misa = 28'd135266560 ;
  assign csr_mie$mav_write_wordxl = mav_csr_write_word ;
  assign csr_mie$EN_reset = WILL_FIRE_RL_rl_reset_start ;
  assign csr_mie$EN_mav_write =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d590 ;

  // submodule csr_mip
  assign csr_mip$m_external_interrupt_req_req =
	     m_external_interrupt_req_set_not_clear ;
  assign csr_mip$mav_write_misa = 28'd135266560 ;
  assign csr_mip$mav_write_wordxl = mav_csr_write_word ;
  assign csr_mip$s_external_interrupt_req_req =
	     s_external_interrupt_req_set_not_clear ;
  assign csr_mip$software_interrupt_req_req =
	     software_interrupt_req_set_not_clear ;
  assign csr_mip$timer_interrupt_req_req = timer_interrupt_req_set_not_clear ;
  assign csr_mip$EN_reset = WILL_FIRE_RL_rl_reset_start ;
  assign csr_mip$EN_mav_write =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d698 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ = EN_server_reset_request_put ;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign IF_IF_csr_trap_actions_interrupt_AND_NOT_csr_t_ETC___d1360 =
	     _theResult_____2__h15083[63] ?
	       x__h16576[13:0] >= toBounds__h15977 :
	       x__h16576[13:0] <= toBoundsM1__h15978 ;
  assign IF_IF_mav_scr_write_cap_BITS_34_TO_29_98_EQ_0__ETC___d1012 =
	     { (((mav_scr_write_cap[34:29] == 6'd0) ?
		   mav_scr_write_cap[2:1] :
		   2'b0) ==
		2'd0) ?
		 mav_scr_write_cap[34:29] :
		 6'd52,
	       x1_avValue_bounds_topBits__h13263,
	       x1_avValue_bounds_baseBits__h13264,
	       ((mav_scr_write_cap[34:29] == 6'd0) ?
		  mav_scr_write_cap[2:1] :
		  2'b0) ==
	       2'd0 &&
	       mav_scr_write_cap[0] } ;
  assign IF_NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_N_ETC___d1760 =
	     (!csr_mip$mv_read[11] || !csr_mie$mv_read[11] ||
	      interrupt_pending_cur_priv == 2'b11 &&
	      !csr_mstatus_rg_mstatus[3]) ?
	       6'd3 :
	       6'd11 ;
  assign IF_NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_N_ETC___d1762 =
	     NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1729 ?
	       6'd9 :
	       (NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1724 ?
		  6'd7 :
		  IF_NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_N_ETC___d1760) ;
  assign IF_NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_N_ETC___d1764 =
	     NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1739 ?
	       6'd5 :
	       (NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1734 ?
		  6'd1 :
		  IF_NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_N_ETC___d1762) ;
  assign IF_NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_N_ETC___d1766 =
	     NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1749 ?
	       6'd0 :
	       (NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1744 ?
		  6'd8 :
		  IF_NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_N_ETC___d1764) ;
  assign IF_SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86__ETC___d849 =
	     SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86_TO__ETC___d825[63] ?
	       x__h10257[13:0] >= toBounds__h10800 :
	       x__h10257[13:0] <= toBoundsM1__h10801 ;
  assign IF_SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86__ETC___d884 =
	     SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86_TO__ETC___d825[63] ?
	       x__h11499[13:0] >= toBounds__h10800 :
	       x__h11499[13:0] <= toBoundsM1__h10801 ;
  assign IF_csr_ret_actions_from_priv_EQ_0b11_387_THEN__ETC___d1407 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       _theResult___fst__h17100 :
	       _theResult___fst__h17301 ;
  assign IF_csr_ret_actions_from_priv_EQ_0b11_387_THEN__ETC___d1439 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       { csr_mstatus_rg_mstatus_48_AND_INV_1_SL_0_CONCA_ETC___d1400[12:11],
		 _theResult___fst__h17100 } :
	       { to_y__h17300, _theResult___fst__h17301 } ;
  assign IF_mav_csr_write_word_BIT_63_94_THEN_NOT_mav_c_ETC___d616 =
	     mav_csr_write_word[63] ?
	       x__h7024[13:0] >= toBounds__h6410 :
	       x__h7024[13:0] <= toBoundsM1__h6411 ;
  assign IF_mav_csr_write_word_BIT_63_94_THEN_NOT_mav_c_ETC___d664 =
	     mav_csr_write_word[63] ?
	       x__h8032[13:0] >= toBounds__h7461 :
	       x__h8032[13:0] <= toBoundsM1__h7462 ;
  assign IF_mav_scr_write_cap_BITS_34_TO_29_98_ULT_51_1_ETC___d951 =
	     (mav_scr_write_cap[34:29] < 6'd51 &&
	      _0b0_CONCAT_mav_scr_write_cap_BITS_150_TO_101_5_ETC___d943 >
	      2'd1) ?
	       result__h12733 :
	       ret__h12147 ;
  assign IF_mav_scr_write_scr_addr_EQ_29_76_THEN_mav_sc_ETC___d1062 =
	     { CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q4,
	       CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q5,
	       (mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[68],
	       (mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[67],
	       (mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[66],
	       (mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[65],
	       (mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[64],
	       (mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[63],
	       (mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[62],
	       (mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[61],
	       (mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[60],
	       (mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[59],
	       (mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[58],
	       (mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[57],
	       CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q6,
	       CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q7,
	       CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q8,
	       CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q9,
	       CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q10,
	       CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q11,
	       CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q12,
	       (mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[0] } ;
  assign IF_mav_scr_write_scr_addr_EQ_29_76_THEN_mav_sc_ETC___d1063 =
	     { CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q13,
	       CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q14,
	       IF_mav_scr_write_scr_addr_EQ_29_76_THEN_mav_sc_ETC___d1062 } ;
  assign IF_rg_mepcc_83_BITS_14_TO_12_86_ULT_rg_mepcc_8_ETC___d195 =
	     (rg_mepcc_83_BITS_14_TO_12_86_ULT_rg_mepcc_83_B_ETC___d188 ==
	      rg_mepcc_83_BITS_86_TO_84_89_ULT_rg_mepcc_83_B_ETC___d190) ?
	       2'd0 :
	       ((rg_mepcc_83_BITS_14_TO_12_86_ULT_rg_mepcc_83_B_ETC___d188 &&
		 !rg_mepcc_83_BITS_86_TO_84_89_ULT_rg_mepcc_83_B_ETC___d190) ?
		  2'd1 :
		  2'd3) ;
  assign IF_rg_mepcc_83_BITS_28_TO_26_425_ULT_rg_mepcc__ETC___d1431 =
	     { (rg_mepcc_83_BITS_28_TO_26_425_ULT_rg_mepcc_83__ETC___d1426 ==
		rg_mepcc_83_BITS_86_TO_84_89_ULT_rg_mepcc_83_B_ETC___d190) ?
		 2'd0 :
		 ((rg_mepcc_83_BITS_28_TO_26_425_ULT_rg_mepcc_83__ETC___d1426 &&
		   !rg_mepcc_83_BITS_86_TO_84_89_ULT_rg_mepcc_83_B_ETC___d190) ?
		    2'd1 :
		    2'd3),
	       IF_rg_mepcc_83_BITS_14_TO_12_86_ULT_rg_mepcc_8_ETC___d195 } ;
  assign NOT_access_permitted_1_csr_addr_ULT_0xC03_440__ETC___d1507 =
	     (!access_permitted_1_csr_addr_ULT_0xC03___d1440 &&
	      access_permitted_1_csr_addr_ULE_0xC1F___d1442 ||
	      access_permitted_1_csr_addr >= 12'hB03 &&
	      access_permitted_1_csr_addr <= 12'hB1F ||
	      access_permitted_1_csr_addr >= 12'h323 &&
	      access_permitted_1_csr_addr <= 12'h33F ||
	      access_permitted_1_csr_addr == 12'hC00 ||
	      access_permitted_1_csr_addr == 12'hC01 ||
	      access_permitted_1_csr_addr == 12'hC02 ||
	      access_permitted_1_csr_addr == 12'hF11 ||
	      access_permitted_1_csr_addr == 12'hF12 ||
	      access_permitted_1_csr_addr == 12'hF13 ||
	      access_permitted_1_csr_addr == 12'hF14 ||
	      access_permitted_1_csr_addr == 12'h300 ||
	      access_permitted_1_csr_addr == 12'h301 ||
	      access_permitted_1_csr_addr == 12'h304 ||
	      access_permitted_1_csr_addr == 12'h305 ||
	      access_permitted_1_csr_addr == 12'h306 ||
	      access_permitted_1_csr_addr == 12'h340 ||
	      access_permitted_1_csr_addr == 12'h341 ||
	      access_permitted_1_csr_addr == 12'h342 ||
	      access_permitted_1_csr_addr == 12'h343 ||
	      access_permitted_1_csr_addr == 12'h344 ||
	      access_permitted_1_csr_addr == 12'hBC0 ||
	      access_permitted_1_csr_addr == 12'hB00 ||
	      access_permitted_1_csr_addr == 12'hB02 ||
	      access_permitted_1_csr_addr == 12'h320 ||
	      access_permitted_1_csr_addr == 12'h7A0 ||
	      access_permitted_1_csr_addr == 12'h7A1 ||
	      access_permitted_1_csr_addr == 12'h7A2 ||
	      access_permitted_1_csr_addr == 12'h7A3) &&
	     access_permitted_1_priv >= access_permitted_1_csr_addr[9:8] ;
  assign NOT_access_permitted_2_csr_addr_ULT_0xC03_531__ETC___d1598 =
	     (!access_permitted_2_csr_addr_ULT_0xC03___d1531 &&
	      access_permitted_2_csr_addr_ULE_0xC1F___d1533 ||
	      access_permitted_2_csr_addr >= 12'hB03 &&
	      access_permitted_2_csr_addr <= 12'hB1F ||
	      access_permitted_2_csr_addr >= 12'h323 &&
	      access_permitted_2_csr_addr <= 12'h33F ||
	      access_permitted_2_csr_addr == 12'hC00 ||
	      access_permitted_2_csr_addr == 12'hC01 ||
	      access_permitted_2_csr_addr == 12'hC02 ||
	      access_permitted_2_csr_addr == 12'hF11 ||
	      access_permitted_2_csr_addr == 12'hF12 ||
	      access_permitted_2_csr_addr == 12'hF13 ||
	      access_permitted_2_csr_addr == 12'hF14 ||
	      access_permitted_2_csr_addr == 12'h300 ||
	      access_permitted_2_csr_addr == 12'h301 ||
	      access_permitted_2_csr_addr == 12'h304 ||
	      access_permitted_2_csr_addr == 12'h305 ||
	      access_permitted_2_csr_addr == 12'h306 ||
	      access_permitted_2_csr_addr == 12'h340 ||
	      access_permitted_2_csr_addr == 12'h341 ||
	      access_permitted_2_csr_addr == 12'h342 ||
	      access_permitted_2_csr_addr == 12'h343 ||
	      access_permitted_2_csr_addr == 12'h344 ||
	      access_permitted_2_csr_addr == 12'hBC0 ||
	      access_permitted_2_csr_addr == 12'hB00 ||
	      access_permitted_2_csr_addr == 12'hB02 ||
	      access_permitted_2_csr_addr == 12'h320 ||
	      access_permitted_2_csr_addr == 12'h7A0 ||
	      access_permitted_2_csr_addr == 12'h7A1 ||
	      access_permitted_2_csr_addr == 12'h7A2 ||
	      access_permitted_2_csr_addr == 12'h7A3) &&
	     access_permitted_2_priv >= access_permitted_2_csr_addr[9:8] ;
  assign NOT_cfg_verbosity_read__62_ULE_1_63___d764 = cfg_verbosity > 4'd1 ;
  assign NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1724 =
	     (!csr_mip$mv_read[11] || !csr_mie$mv_read[11] ||
	      interrupt_pending_cur_priv == 2'b11 &&
	      !csr_mstatus_rg_mstatus[3]) &&
	     (!csr_mip$mv_read[3] || !csr_mie$mv_read[3] ||
	      interrupt_pending_cur_priv == 2'b11 &&
	      !csr_mstatus_rg_mstatus[3]) ;
  assign NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1729 =
	     NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1724 &&
	     (!csr_mip$mv_read[7] || !csr_mie$mv_read[7] ||
	      interrupt_pending_cur_priv == 2'b11 &&
	      !csr_mstatus_rg_mstatus[3]) ;
  assign NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1734 =
	     NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1729 &&
	     (!csr_mip$mv_read[9] || !csr_mie$mv_read[9] ||
	      interrupt_pending_cur_priv == 2'b11 &&
	      !csr_mstatus_rg_mstatus[3]) ;
  assign NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1739 =
	     NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1734 &&
	     (!csr_mip$mv_read[1] || !csr_mie$mv_read[1] ||
	      interrupt_pending_cur_priv == 2'b11 &&
	      !csr_mstatus_rg_mstatus[3]) ;
  assign NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1744 =
	     NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1739 &&
	     (!csr_mip$mv_read[5] || !csr_mie$mv_read[5] ||
	      interrupt_pending_cur_priv == 2'b11 &&
	      !csr_mstatus_rg_mstatus[3]) ;
  assign NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1749 =
	     NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1744 &&
	     (!csr_mip$mv_read[8] || !csr_mie$mv_read[8] ||
	      interrupt_pending_cur_priv == 2'b11 &&
	      !csr_mstatus_rg_mstatus[3]) ;
  assign NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1754 =
	     NOT_csr_mip_mv_read__15_BIT_11_667_714_OR_NOT__ETC___d1749 &&
	     (!csr_mip$mv_read[0] || !csr_mie$mv_read[0] ||
	      interrupt_pending_cur_priv == 2'b11 &&
	      !csr_mstatus_rg_mstatus[3]) ;
  assign NOT_csr_trap_actions_nmi_210_AND_csr_trap_acti_ETC___d1288 =
	     !csr_trap_actions_nmi && csr_trap_actions_interrupt &&
	     exc_code__h15816 != 6'd0 &&
	     exc_code__h15816 != 6'd1 &&
	     exc_code__h15816 != 6'd2 &&
	     exc_code__h15816 != 6'd3 &&
	     exc_code__h15816 != 6'd4 &&
	     exc_code__h15816 != 6'd5 &&
	     exc_code__h15816 != 6'd6 &&
	     exc_code__h15816 != 6'd7 &&
	     exc_code__h15816 != 6'd8 &&
	     exc_code__h15816 != 6'd9 &&
	     exc_code__h15816 != 6'd10 &&
	     exc_code__h15816 != 6'd11 ;
  assign NOT_mav_scr_write_cap_BITS_34_TO_29_98_ULT_50_51___d852 =
	     mav_scr_write_cap[34:29] >= 6'd50 ;
  assign SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86_TO__ETC___d825 =
	     x__h10864 | addrLSB__h12884 ;
  assign SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86_TO__ETC___d856 =
	     (highOffsetBits__h10791 == 50'd0 &&
	      IF_SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86__ETC___d849 ||
	      NOT_mav_scr_write_cap_BITS_34_TO_29_98_ULT_50_51___d852) &&
	     mav_scr_write_cap[53:36] == 18'd262143 ;
  assign SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86_TO__ETC___d890 =
	     (highOffsetBits__h10791 == 50'd0 &&
	      IF_SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86__ETC___d884 ||
	      NOT_mav_scr_write_cap_BITS_34_TO_29_98_ULT_50_51___d852) &&
	     (mav_scr_write_cap[53:36] == 18'd262143 ||
	      SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86_TO__ETC___d825[1:0] ==
	      2'b0) ;
  assign SEXT__0b0_CONCAT_rg_mtcc_50_BITS_86_TO_73_51_5_ETC___d173 =
	     x__h3936 | addrLSB__h3925 ;
  assign _0b0_CONCAT_mav_scr_write_cap_BITS_150_TO_101_5_ETC___d943 =
	     ret__h12147[64:63] -
	     { 1'b0,
	       (mav_scr_write_cap[34:29] == 6'd50) ?
		 mav_scr_write_cap[14] :
		 mav_scr_write_cap_BITS_150_TO_101_PLUS_SEXT_x3_ETC__q3[49] } ;
  assign _theResult_____2__h15083 =
	     (csr_trap_actions_interrupt && !csr_trap_actions_nmi &&
	      !SEXT__0b0_CONCAT_rg_mtcc_50_BITS_86_TO_73_51_5_ETC___d173[1] &&
	      SEXT__0b0_CONCAT_rg_mtcc_50_BITS_86_TO_73_51_5_ETC___d173[0]) ?
	       exc_pc___1__h15137 :
	       exc_pc__h15081 ;
  assign _theResult___fst__h17100 =
	     { csr_mstatus_rg_mstatus_48_AND_INV_1_SL_0_CONCA_ETC___d1400[63:13],
	       2'd0,
	       csr_mstatus_rg_mstatus_48_AND_INV_1_SL_0_CONCA_ETC___d1400[10:0] } ;
  assign _theResult___fst__h17301 =
	     { csr_mstatus_rg_mstatus_48_AND_INV_1_SL_0_CONCA_ETC___d1400[63:9],
	       1'd0,
	       csr_mstatus_rg_mstatus_48_AND_INV_1_SL_0_CONCA_ETC___d1400[7:0] } ;
  assign a_capFat_otype__h17731 =
	     (rg_mepcc[53:36] == 18'd262142) ? 18'd262143 : rg_mepcc[53:36] ;
  assign access_permitted_1_csr_addr_ULE_0xC1F___d1442 =
	     access_permitted_1_csr_addr <= 12'hC1F ;
  assign access_permitted_1_csr_addr_ULT_0xC03___d1440 =
	     access_permitted_1_csr_addr < 12'hC03 ;
  assign access_permitted_2_csr_addr_ULE_0xC1F___d1533 =
	     access_permitted_2_csr_addr <= 12'hC1F ;
  assign access_permitted_2_csr_addr_ULT_0xC03___d1531 =
	     access_permitted_2_csr_addr < 12'hC03 ;
  assign addBase__h12029 =
	     { {48{x__h12080[15]}}, x__h12080 } << mav_scr_write_cap[34:29] ;
  assign addBase__h16671 =
	     { {48{x__h16722[15]}}, x__h16722 } << rg_mtcc[34:29] ;
  assign addBase__h7189 = { {48{x__h7240[15]}}, x__h7240 } << rg_mtcc[34:29] ;
  assign addBase__h8191 =
	     { {48{x__h8242[15]}}, x__h8242 } << rg_mepcc[34:29] ;
  assign addTop__h12145 =
	     { {49{x__h12205[15]}}, x__h12205 } << mav_scr_write_cap[34:29] ;
  assign addrLSB__h12884 = mav_scr_write_cap[150:87] & y__h12975 ;
  assign addrLSB__h13465 = csr_trap_actions_pcc[160:97] & y__h13600 ;
  assign addrLSB__h3925 = rg_mtcc[150:87] & y__h4070 ;
  assign addrLSB__h4198 = rg_mepcc[150:87] & y__h4340 ;
  assign b__h17137 = csr_mstatus_rg_mstatus[pie_from_x__h17085] ;
  assign base__h13463 =
	     { csr_trap_actions_pcc[1:0], csr_trap_actions_pcc[24:11] } ;
  assign cap_unpacked_capFat_addrBits__h10398 =
	     { mask__h10377, 12'd4095 } & newAddrBits__h10376 ;
  assign cap_unpacked_capFat_addrBits__h11665 =
	     { mask__h10377, 12'd4095 } & newAddrBits__h11643 ;
  assign cap_unpacked_capFat_address__h10397 =
	     mav_scr_write_cap_BITS_150_TO_101_59_AND_11258_ETC___d864 +
	     new_offset__h9429 ;
  assign cap_unpacked_capFat_address__h11664 =
	     mav_scr_write_cap_BITS_150_TO_101_59_AND_11258_ETC___d864 +
	     new_csr__h10774 ;
  assign csr_counter_read_fault_csr_addr_EQ_0xC00_642_A_ETC___d1666 =
	     csr_counter_read_fault_csr_addr == 12'hC00 &&
	     !rg_mcounteren[0] ||
	     csr_counter_read_fault_csr_addr == 12'hC01 &&
	     !rg_mcounteren[1] ||
	     csr_counter_read_fault_csr_addr == 12'hC02 &&
	     !rg_mcounteren[2] ||
	     csr_counter_read_fault_csr_addr >= 12'hC03 &&
	     csr_counter_read_fault_csr_addr <= 12'hC1F &&
	     !rg_mcounteren_BITS_31_TO_3__q15[i__h18558[4:0]] ;
  assign csr_mip_mv_read__15_BIT_11_667_AND_csr_mie_mv__ETC___d1678 =
	     csr_mip$mv_read[11] && csr_mie$mv_read[11] &&
	     (interrupt_pending_cur_priv != 2'b11 ||
	      csr_mstatus_rg_mstatus[3]) ||
	     csr_mip$mv_read[3] && csr_mie$mv_read[3] &&
	     (interrupt_pending_cur_priv != 2'b11 ||
	      csr_mstatus_rg_mstatus[3]) ;
  assign csr_mip_mv_read__15_BIT_11_667_AND_csr_mie_mv__ETC___d1683 =
	     csr_mip_mv_read__15_BIT_11_667_AND_csr_mie_mv__ETC___d1678 ||
	     csr_mip$mv_read[7] && csr_mie$mv_read[7] &&
	     (interrupt_pending_cur_priv != 2'b11 ||
	      csr_mstatus_rg_mstatus[3]) ;
  assign csr_mip_mv_read__15_BIT_11_667_AND_csr_mie_mv__ETC___d1688 =
	     csr_mip_mv_read__15_BIT_11_667_AND_csr_mie_mv__ETC___d1683 ||
	     csr_mip$mv_read[9] && csr_mie$mv_read[9] &&
	     (interrupt_pending_cur_priv != 2'b11 ||
	      csr_mstatus_rg_mstatus[3]) ;
  assign csr_mip_mv_read__15_BIT_11_667_AND_csr_mie_mv__ETC___d1693 =
	     csr_mip_mv_read__15_BIT_11_667_AND_csr_mie_mv__ETC___d1688 ||
	     csr_mip$mv_read[1] && csr_mie$mv_read[1] &&
	     (interrupt_pending_cur_priv != 2'b11 ||
	      csr_mstatus_rg_mstatus[3]) ;
  assign csr_mip_mv_read__15_BIT_11_667_AND_csr_mie_mv__ETC___d1698 =
	     csr_mip_mv_read__15_BIT_11_667_AND_csr_mie_mv__ETC___d1693 ||
	     csr_mip$mv_read[5] && csr_mie$mv_read[5] &&
	     (interrupt_pending_cur_priv != 2'b11 ||
	      csr_mstatus_rg_mstatus[3]) ;
  assign csr_mip_mv_read__15_BIT_11_667_AND_csr_mie_mv__ETC___d1703 =
	     csr_mip_mv_read__15_BIT_11_667_AND_csr_mie_mv__ETC___d1698 ||
	     csr_mip$mv_read[8] && csr_mie$mv_read[8] &&
	     (interrupt_pending_cur_priv != 2'b11 ||
	      csr_mstatus_rg_mstatus[3]) ;
  assign csr_mip_mv_read__15_BIT_11_667_AND_csr_mie_mv__ETC___d1708 =
	     csr_mip_mv_read__15_BIT_11_667_AND_csr_mie_mv__ETC___d1703 ||
	     csr_mip$mv_read[0] && csr_mie$mv_read[0] &&
	     (interrupt_pending_cur_priv != 2'b11 ||
	      csr_mstatus_rg_mstatus[3]) ;
  assign csr_mip_mv_read__15_BIT_11_667_AND_csr_mie_mv__ETC___d1713 =
	     csr_mip_mv_read__15_BIT_11_667_AND_csr_mie_mv__ETC___d1708 ||
	     csr_mip$mv_read[4] && csr_mie$mv_read[4] &&
	     (interrupt_pending_cur_priv != 2'b11 ||
	      csr_mstatus_rg_mstatus[3]) ;
  assign csr_mstatus_rg_mstatus_48_AND_INV_1_SL_0_CONCA_ETC___d1400 =
	     x__h17133 | mask__h17121 ;
  assign csr_trap_actions_nmi_OR_NOT_csr_trap_actions_i_ETC___d1339 =
	     (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	     exc_code__h15816 != 6'd0 &&
	     exc_code__h15816 != 6'd1 &&
	     exc_code__h15816 != 6'd2 &&
	     exc_code__h15816 != 6'd3 &&
	     exc_code__h15816 != 6'd4 &&
	     exc_code__h15816 != 6'd5 &&
	     exc_code__h15816 != 6'd6 &&
	     exc_code__h15816 != 6'd7 &&
	     exc_code__h15816 != 6'd8 &&
	     exc_code__h15816 != 6'd9 &&
	     exc_code__h15816 != 6'd11 &&
	     exc_code__h15816 != 6'd12 &&
	     exc_code__h15816 != 6'd13 &&
	     exc_code__h15816 != 6'd15 ;
  assign exc_code__h15816 =
	     csr_trap_actions_nmi ? 6'd0 : csr_trap_actions_exc_code ;
  assign exc_pc___1__h15137 = exc_pc__h15081 + vector_offset__h15082 ;
  assign exc_pc__h14723 =
	     { SEXT__0b0_CONCAT_rg_mtcc_50_BITS_86_TO_73_51_5_ETC___d173[63:2],
	       2'd0 } ;
  assign exc_pc__h15081 =
	     csr_trap_actions_nmi ? rg_nmi_vector : exc_pc__h14723 ;
  assign fixed_up_val_23__h14130 =
	     { csr_mstatus_rg_mstatus[22:17],
	       4'd0,
	       mpp__h15176,
	       csr_mstatus_rg_mstatus[10:9],
	       1'd0,
	       csr_mstatus_rg_mstatus[3],
	       csr_mstatus_rg_mstatus[6],
	       3'd0,
	       csr_mstatus_rg_mstatus[2],
	       2'd0 } ;
  assign fixed_up_val_23__h16992 =
	     { IF_csr_ret_actions_from_priv_EQ_0b11_387_THEN__ETC___d1407[22:17],
	       4'd0,
	       (IF_csr_ret_actions_from_priv_EQ_0b11_387_THEN__ETC___d1407[12:11] ==
		2'b11) ?
		 IF_csr_ret_actions_from_priv_EQ_0b11_387_THEN__ETC___d1407[12:11] :
		 2'b0,
	       IF_csr_ret_actions_from_priv_EQ_0b11_387_THEN__ETC___d1407[10:9],
	       1'd0,
	       IF_csr_ret_actions_from_priv_EQ_0b11_387_THEN__ETC___d1407[7:6],
	       2'd0,
	       IF_csr_ret_actions_from_priv_EQ_0b11_387_THEN__ETC___d1407[3:2],
	       2'd0 } ;
  assign fixed_up_val_23__h5904 =
	     { mav_csr_write_word[22:17],
	       4'd0,
	       (mav_csr_write_word[12:11] == 2'b11) ?
		 mav_csr_write_word[12:11] :
		 2'b0,
	       mav_csr_write_word[10:9],
	       1'd0,
	       mav_csr_write_word[7:6],
	       2'd0,
	       mav_csr_write_word[3:2],
	       2'd0 } ;
  assign highBitsfilter__h15967 = highBitsfilter__h6400 ;
  assign highBitsfilter__h6400 = 50'h3FFFFFFFFFFFF << rg_mtcc[34:29] ;
  assign highBitsfilter__h7451 = 50'h3FFFFFFFFFFFF << rg_mepcc[34:29] ;
  assign highOffsetBits__h10791 = x__h10818 & mask__h12030 ;
  assign highOffsetBits__h15968 = x__h15995 & highBitsfilter__h15967 ;
  assign highOffsetBits__h6401 = x__h7479 & highBitsfilter__h6400 ;
  assign highOffsetBits__h7452 = x__h7479 & highBitsfilter__h7451 ;
  assign i__h18558 = csr_counter_read_fault_csr_addr - 12'hC03 ;
  assign ie_from_x__h17084 = { 4'd0, csr_ret_actions_from_priv } ;
  assign length__h12792 = { 48'd0, x__h12796 } << mav_scr_write_cap[34:29] ;
  assign mask__h12030 = 50'h3FFFFFFFFFFFF << mav_scr_write_cap[34:29] ;
  assign mask__h12146 = 51'h7FFFFFFFFFFFF << mav_scr_write_cap[34:29] ;
  assign mask__h16636 = mask__h7149 ;
  assign mask__h17121 = 64'd1 << pie_from_x__h17085 ;
  assign mask__h17138 = 64'd1 << ie_from_x__h17084 ;
  assign mav_csr_write_csr_addr_ULE_0x33F___d571 =
	     mav_csr_write_csr_addr <= 12'h33F ;
  assign mav_csr_write_csr_addr_ULE_0xB1F___d567 =
	     mav_csr_write_csr_addr <= 12'hB1F ;
  assign mav_csr_write_csr_addr_ULT_0x323_70_OR_NOT_mav_ETC___d760 =
	     (mav_csr_write_csr_addr_ULT_0x323___d570 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d571) &&
	     mav_csr_write_csr_addr != 12'hF11 &&
	     mav_csr_write_csr_addr != 12'hF12 &&
	     mav_csr_write_csr_addr != 12'hF13 &&
	     mav_csr_write_csr_addr != 12'hF14 &&
	     mav_csr_write_csr_addr != 12'h300 &&
	     mav_csr_write_csr_addr != 12'h301 &&
	     mav_csr_write_csr_addr != 12'h304 &&
	     mav_csr_write_csr_addr != 12'h305 &&
	     mav_csr_write_csr_addr != 12'h306 &&
	     mav_csr_write_csr_addr != 12'h340 &&
	     mav_csr_write_csr_addr != 12'h341 &&
	     mav_csr_write_csr_addr != 12'h342 &&
	     mav_csr_write_csr_addr != 12'h343 &&
	     mav_csr_write_csr_addr != 12'h344 &&
	     mav_csr_write_csr_addr != 12'hB00 &&
	     mav_csr_write_csr_addr != 12'hB02 &&
	     mav_csr_write_csr_addr != 12'h320 &&
	     mav_csr_write_csr_addr != 12'h7A0 &&
	     mav_csr_write_csr_addr != 12'h7A1 &&
	     mav_csr_write_csr_addr != 12'h7A2 &&
	     mav_csr_write_csr_addr != 12'h7A3 ;
  assign mav_csr_write_csr_addr_ULT_0x323___d570 =
	     mav_csr_write_csr_addr < 12'h323 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d576 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d566 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d567) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d570 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d571) &&
	     mav_csr_write_csr_addr == 12'h300 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d590 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d566 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d567) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d570 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d571) &&
	     mav_csr_write_csr_addr == 12'h304 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d592 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d566 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d567) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d570 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d571) &&
	     mav_csr_write_csr_addr == 12'h305 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d644 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d566 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d567) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d570 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d571) &&
	     mav_csr_write_csr_addr == 12'h306 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d647 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d566 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d567) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d570 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d571) &&
	     mav_csr_write_csr_addr == 12'h340 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d649 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d566 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d567) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d570 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d571) &&
	     mav_csr_write_csr_addr == 12'h341 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d692 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d566 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d567) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d570 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d571) &&
	     mav_csr_write_csr_addr == 12'h342 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d696 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d566 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d567) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d570 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d571) &&
	     mav_csr_write_csr_addr == 12'h343 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d698 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d566 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d567) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d570 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d571) &&
	     mav_csr_write_csr_addr == 12'h344 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d700 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d566 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d567) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d570 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d571) &&
	     mav_csr_write_csr_addr == 12'hB00 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d702 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d566 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d567) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d570 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d571) &&
	     mav_csr_write_csr_addr == 12'hB02 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d704 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d566 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d567) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d570 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d571) &&
	     mav_csr_write_csr_addr == 12'h7A0 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d706 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d566 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d567) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d570 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d571) &&
	     mav_csr_write_csr_addr == 12'h7A1 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d710 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d566 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d567) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d570 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d571) &&
	     mav_csr_write_csr_addr == 12'h7A2 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_66_OR_NOT_mav_ETC___d712 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d566 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d567) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d570 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d571) &&
	     mav_csr_write_csr_addr == 12'h7A3 ;
  assign mav_csr_write_csr_addr_ULT_0xB03___d566 =
	     mav_csr_write_csr_addr < 12'hB03 ;
  assign mav_scr_write_cap_BITS_14_TO_12_06_ULT_mav_scr_ETC___d808 =
	     mav_scr_write_cap[14:12] < repBound__h13016 ;
  assign mav_scr_write_cap_BITS_150_TO_101_59_AND_11258_ETC___d864 =
	     { mav_scr_write_cap[150:101] & mask__h12030, 14'd0 } +
	     addBase__h12029 ;
  assign mav_scr_write_cap_BITS_150_TO_101_PLUS_SEXT_x3_ETC__q3 =
	     mav_scr_write_cap[150:101] +
	     ({ {48{x__h13096[1]}}, x__h13096 } << mav_scr_write_cap[34:29]) ;
  assign mav_scr_write_cap_BITS_28_TO_26_24_ULT_mav_scr_ETC___d925 =
	     mav_scr_write_cap[28:26] < repBound__h13016 ;
  assign mav_scr_write_cap_BITS_86_TO_84_09_ULT_mav_scr_ETC___d810 =
	     mav_scr_write_cap[86:84] < repBound__h13016 ;
  assign mpp__h15176 =
	     (csr_trap_actions_from_priv == 2'b11) ?
	       csr_trap_actions_from_priv :
	       2'b0 ;
  assign newAddrBits__h10376 = mav_scr_write_cap[14:1] + x__h10257[13:0] ;
  assign newAddrBits__h11643 = mav_scr_write_cap[14:1] + x__h11499[13:0] ;
  assign newAddrBits__h16635 = rg_mtcc[14:1] + x__h16576[13:0] ;
  assign newAddrBits__h7148 = rg_mtcc[14:1] + x__h7024[13:0] ;
  assign newAddrBits__h8150 = rg_mepcc[14:1] + x__h8032[13:0] ;
  assign new_csr__h10774 =
	     { SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86_TO__ETC___d825[63:2],
	       2'd0 } ;
  assign new_csr_value__h6367 =
	     { mav_csr_write_word[63:2],
	       1'b0,
	       !mav_csr_write_word[1] && mav_csr_write_word[0] } ;
  assign new_csr_value__h7418 = { mav_csr_write_word[63:2], 2'd0 } ;
  assign new_csr_value__h8998 = { 4'd0, mav_csr_write_word[59:0] } ;
  assign new_offset__h9429 =
	     { SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86_TO__ETC___d825[63:2],
	       1'b0,
	       !SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86_TO__ETC___d825[1] &&
	       SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86_TO__ETC___d825[0] } ;
  assign offset__h10852 = { 2'b0, mav_scr_write_cap[86:73] } - x__h12080 ;
  assign offset__h13464 =
	     { 2'b0, csr_trap_actions_pcc[96:83] } - base__h13463 ;
  assign offset__h3924 = { 2'b0, rg_mtcc[86:73] } - x__h7240 ;
  assign offset__h4197 = { 2'b0, rg_mepcc[86:73] } - x__h8242 ;
  assign pie_from_x__h17085 = { 4'd1, csr_ret_actions_from_priv } ;
  assign repBound__h13016 = mav_scr_write_cap[14:12] - 3'b001 ;
  assign repBound__h3971 = rg_mtcc[14:12] - 3'b001 ;
  assign repBound__h4244 = rg_mepcc[14:12] - 3'b001 ;
  assign result__h12733 = { ~ret__h12147[64], ret__h12147[63:0] } ;
  assign result_d_addrBits__h16648 =
	     { mask__h16636, 12'd4095 } & newAddrBits__h16635 ;
  assign result_d_address__h16647 =
	     { rg_mtcc_BITS_150_TO_87__q2[63:14] & highBitsfilter__h15967,
	       14'd0 } +
	     addBase__h16671 +
	     _theResult_____2__h15083 ;
  assign ret__h12147 =
	     { { 1'b0, mav_scr_write_cap[150:101] } & mask__h12146, 14'd0 } +
	     addTop__h12145 ;
  assign rg_mcounteren_BITS_31_TO_3__q15 = rg_mcounteren[31:3] ;
  assign rg_mepc__h1320 = x__h4209 | addrLSB__h4198 ;
  assign rg_mepcc_83_BITS_14_TO_12_86_ULT_rg_mepcc_83_B_ETC___d188 =
	     rg_mepcc[14:12] < repBound__h4244 ;
  assign rg_mepcc_83_BITS_28_TO_26_425_ULT_rg_mepcc_83__ETC___d1426 =
	     rg_mepcc[28:26] < repBound__h4244 ;
  assign rg_mepcc_83_BITS_86_TO_84_89_ULT_rg_mepcc_83_B_ETC___d190 =
	     rg_mepcc[86:84] < repBound__h4244 ;
  assign rg_mtcc_50_BITS_14_TO_12_53_ULT_rg_mtcc_50_BIT_ETC___d155 =
	     rg_mtcc[14:12] < repBound__h3971 ;
  assign rg_mtcc_50_BITS_86_TO_84_56_ULT_rg_mtcc_50_BIT_ETC___d157 =
	     rg_mtcc[86:84] < repBound__h3971 ;
  assign rg_mtcc_BITS_14_TO_1__q1 = rg_mtcc[14:1] ;
  assign rg_mtcc_BITS_150_TO_87__q2 = rg_mtcc[150:87] ;
  assign signBits__h10788 =
	     {50{SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86_TO__ETC___d825[63]}} ;
  assign signBits__h15965 = {50{_theResult_____2__h15083[63]}} ;
  assign signBits__h7449 = {50{mav_csr_write_word[63]}} ;
  assign toBoundsM1__h10801 = { 3'b110, ~mav_scr_write_cap[11:1] } ;
  assign toBoundsM1__h15978 = { 3'b110, ~rg_mtcc_BITS_14_TO_1__q1[10:0] } ;
  assign toBoundsM1__h6411 = { 3'b110, ~rg_mtcc[11:1] } ;
  assign toBoundsM1__h7462 = { 3'b110, ~rg_mepcc[11:1] } ;
  assign toBounds__h10800 = 14'd14336 - { 3'b0, mav_scr_write_cap[11:1] } ;
  assign toBounds__h15977 =
	     14'd14336 - { 3'b0, rg_mtcc_BITS_14_TO_1__q1[10:0] } ;
  assign toBounds__h6410 = 14'd14336 - { 3'b0, rg_mtcc[11:1] } ;
  assign toBounds__h7461 = 14'd14336 - { 3'b0, rg_mepcc[11:1] } ;
  assign to_y__h17300 =
	     { 1'b0,
	       csr_mstatus_rg_mstatus_48_AND_INV_1_SL_0_CONCA_ETC___d1400[8] } ;
  assign v__h7326 = { 32'd0, mav_csr_write_word[31:0] } ;
  assign v__h8328 =
	     { mav_csr_write_word[63], 57'd0, mav_csr_write_word[5:0] } ;
  assign val__h17139 = { 63'd0, b__h17137 } << ie_from_x__h17084 ;
  assign vector_offset__h15082 = { 56'd0, csr_trap_actions_exc_code, 2'd0 } ;
  assign wordxl1__h5865 = { 41'd1024, fixed_up_val_23__h5904 } ;
  assign x1_avValue_addrBits__h10678 =
	     (((mav_scr_write_cap[34:29] == 6'd0) ?
		 mav_scr_write_cap[2:1] :
		 2'b0) ==
	      2'd0) ?
	       cap_unpacked_capFat_addrBits__h10398 :
	       14'd0 ;
  assign x1_avValue_address__h10677 =
	     (((mav_scr_write_cap[34:29] == 6'd0) ?
		 mav_scr_write_cap[2:1] :
		 2'b0) ==
	      2'd0) ?
	       cap_unpacked_capFat_address__h10397 :
	       64'd0 ;
  assign x1_avValue_bounds_baseBits__h13264 =
	     (((mav_scr_write_cap[34:29] == 6'd0) ?
		 mav_scr_write_cap[2:1] :
		 2'b0) ==
	      2'd0) ?
	       mav_scr_write_cap[14:1] :
	       14'd0 ;
  assign x1_avValue_bounds_topBits__h13263 =
	     (((mav_scr_write_cap[34:29] == 6'd0) ?
		 mav_scr_write_cap[2:1] :
		 2'b0) ==
	      2'd0) ?
	       mav_scr_write_cap[28:15] :
	       14'd4096 ;
  assign x1_avValue_flags__h10680 =
	     ((mav_scr_write_cap[34:29] == 6'd0) ?
		mav_scr_write_cap[2:1] :
		2'b0) ==
	     2'd0 &&
	     mav_scr_write_cap[56] ;
  assign x1_avValue_otype__h10682 =
	     (((mav_scr_write_cap[34:29] == 6'd0) ?
		 mav_scr_write_cap[2:1] :
		 2'b0) ==
	      2'd0) ?
	       mav_scr_write_cap[53:36] :
	       18'd262143 ;
  assign x1_avValue_perms_soft__h13159 =
	     (((mav_scr_write_cap[34:29] == 6'd0) ?
		 mav_scr_write_cap[2:1] :
		 2'b0) ==
	      2'd0) ?
	       mav_scr_write_cap[72:69] :
	       4'd0 ;
  assign x1_avValue_reserved__h10681 =
	     (((mav_scr_write_cap[34:29] == 6'd0) ?
		 mav_scr_write_cap[2:1] :
		 2'b0) ==
	      2'd0) ?
	       mav_scr_write_cap[55:54] :
	       2'd0 ;
  assign x__h10257 = new_offset__h9429 >> mav_scr_write_cap[34:29] ;
  assign x__h10818 =
	     SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86_TO__ETC___d825[63:14] ^
	     signBits__h10788 ;
  assign x__h10864 = x__h10866 << mav_scr_write_cap[34:29] ;
  assign x__h10866 = { {48{offset__h10852[15]}}, offset__h10852 } ;
  assign x__h11499 = new_csr__h10774 >> mav_scr_write_cap[34:29] ;
  assign x__h12080 = { x__h13096, mav_scr_write_cap[14:1] } ;
  assign x__h12205 = { x__h13077, mav_scr_write_cap[28:15] } ;
  assign x__h12796 = x__h12205 - x__h12080 ;
  assign x__h12976 = 64'hFFFFFFFFFFFFFFFF << mav_scr_write_cap[34:29] ;
  assign x__h13077 =
	     (mav_scr_write_cap_BITS_28_TO_26_24_ULT_mav_scr_ETC___d925 ==
	      mav_scr_write_cap_BITS_86_TO_84_09_ULT_mav_scr_ETC___d810) ?
	       2'd0 :
	       ((mav_scr_write_cap_BITS_28_TO_26_24_ULT_mav_scr_ETC___d925 &&
		 !mav_scr_write_cap_BITS_86_TO_84_09_ULT_mav_scr_ETC___d810) ?
		  2'd1 :
		  2'd3) ;
  assign x__h13096 =
	     (mav_scr_write_cap_BITS_14_TO_12_06_ULT_mav_scr_ETC___d808 ==
	      mav_scr_write_cap_BITS_86_TO_84_09_ULT_mav_scr_ETC___d810) ?
	       2'd0 :
	       ((mav_scr_write_cap_BITS_14_TO_12_06_ULT_mav_scr_ETC___d808 &&
		 !mav_scr_write_cap_BITS_86_TO_84_09_ULT_mav_scr_ETC___d810) ?
		  2'd1 :
		  2'd3) ;
  assign x__h13476 = x__h13478 << csr_trap_actions_pcc[44:39] ;
  assign x__h13478 = { {48{offset__h13464[15]}}, offset__h13464 } ;
  assign x__h13601 = 64'hFFFFFFFFFFFFFFFF << csr_trap_actions_pcc[44:39] ;
  assign x__h15995 = _theResult_____2__h15083[63:14] ^ signBits__h15965 ;
  assign x__h16576 = _theResult_____2__h15083 >> rg_mtcc[34:29] ;
  assign x__h16722 = x__h7240 ;
  assign x__h16933 = { 41'd1024, fixed_up_val_23__h14130 } ;
  assign x__h16934 =
	     { !csr_trap_actions_nmi && csr_trap_actions_interrupt,
	       57'd0,
	       exc_code__h15816 } ;
  assign x__h17120 = x__h17150 | val__h17139 ;
  assign x__h17133 = x__h17120 & y__h17134 ;
  assign x__h17150 = csr_mstatus_rg_mstatus & y__h17151 ;
  assign x__h3333 = rg_mcycle + 64'd1 ;
  assign x__h3936 = x__h3938 << rg_mtcc[34:29] ;
  assign x__h3938 = { {48{offset__h3924[15]}}, offset__h3924 } ;
  assign x__h4071 = 64'hFFFFFFFFFFFFFFFF << rg_mtcc[34:29] ;
  assign x__h4209 = x__h4211 << rg_mepcc[34:29] ;
  assign x__h4211 = { {48{offset__h4197[15]}}, offset__h4197 } ;
  assign x__h4341 = 64'hFFFFFFFFFFFFFFFF << rg_mepcc[34:29] ;
  assign x__h4707 = { rg_mccsr, 5'd3 } ;
  assign x__h5681 =
	     (!mav_csr_write_csr_addr_ULT_0xB03___d566 &&
	      mav_csr_write_csr_addr_ULE_0xB1F___d567 ||
	      !mav_csr_write_csr_addr_ULT_0x323___d570 &&
	      mav_csr_write_csr_addr_ULE_0x33F___d571 ||
	      mav_csr_write_csr_addr == 12'hF11 ||
	      mav_csr_write_csr_addr == 12'hF12 ||
	      mav_csr_write_csr_addr == 12'hF13 ||
	      mav_csr_write_csr_addr == 12'hF14) ?
	       64'd0 :
	       IF_mav_csr_write_csr_addr_EQ_0x300_75_THEN_102_ETC___d795 ;
  assign x__h7024 = new_csr_value__h6367 >> rg_mtcc[34:29] ;
  assign x__h7240 =
	     { (rg_mtcc_50_BITS_14_TO_12_53_ULT_rg_mtcc_50_BIT_ETC___d155 ==
		rg_mtcc_50_BITS_86_TO_84_56_ULT_rg_mtcc_50_BIT_ETC___d157) ?
		 2'd0 :
		 ((rg_mtcc_50_BITS_14_TO_12_53_ULT_rg_mtcc_50_BIT_ETC___d155 &&
		   !rg_mtcc_50_BITS_86_TO_84_56_ULT_rg_mtcc_50_BIT_ETC___d157) ?
		    2'd1 :
		    2'd3),
	       rg_mtcc[14:1] } ;
  assign x__h7479 = mav_csr_write_word[63:14] ^ signBits__h7449 ;
  assign x__h8032 = new_csr_value__h7418 >> rg_mepcc[34:29] ;
  assign x__h8242 =
	     { IF_rg_mepcc_83_BITS_14_TO_12_86_ULT_rg_mepcc_8_ETC___d195,
	       rg_mepcc[14:1] } ;
  assign x_addrBits__h7170 = { mask__h7149, 12'd4095 } & newAddrBits__h7148 ;
  assign x_addrBits__h8172 = { mask__h8151, 12'd4095 } & newAddrBits__h8150 ;
  assign x_address__h7169 =
	     { rg_mtcc[150:101] & highBitsfilter__h6400, 14'd0 } +
	     addBase__h7189 +
	     new_csr_value__h6367 ;
  assign x_address__h8171 =
	     { rg_mepcc[150:101] & highBitsfilter__h7451, 14'd0 } +
	     addBase__h8191 +
	     new_csr_value__h7418 ;
  assign y__h12975 = ~x__h12976 ;
  assign y__h13600 = ~x__h13601 ;
  assign y__h17134 = ~mask__h17121 ;
  assign y__h17151 = ~mask__h17138 ;
  assign y__h4070 = ~x__h4071 ;
  assign y__h4340 = ~x__h4341 ;
  always@(rg_mtcc)
  begin
    case (rg_mtcc[34:29])
      6'd51: mask__h7149 = 2'b01;
      6'd52: mask__h7149 = 2'b0;
      default: mask__h7149 = 2'b11;
    endcase
  end
  always@(rg_mepcc)
  begin
    case (rg_mepcc[34:29])
      6'd51: mask__h8151 = 2'b01;
      6'd52: mask__h8151 = 2'b0;
      default: mask__h8151 = 2'b11;
    endcase
  end
  always@(mav_scr_write_cap)
  begin
    case (mav_scr_write_cap[34:29])
      6'd51: mask__h10377 = 2'b01;
      6'd52: mask__h10377 = 2'b0;
      default: mask__h10377 = 2'b11;
    endcase
  end
  always@(mav_csr_write_csr_addr or
	  mav_csr_write_word or
	  wordxl1__h5865 or
	  csr_mie$mav_write or
	  new_csr_value__h6367 or
	  v__h7326 or
	  new_csr_value__h7418 or
	  v__h8328 or csr_mip$mav_write or new_csr_value__h8998)
  begin
    case (mav_csr_write_csr_addr)
      12'h300:
	  IF_mav_csr_write_csr_addr_EQ_0x300_75_THEN_102_ETC___d795 =
	      wordxl1__h5865;
      12'h301:
	  IF_mav_csr_write_csr_addr_EQ_0x300_75_THEN_102_ETC___d795 =
	      64'h8000000000100100;
      12'h304:
	  IF_mav_csr_write_csr_addr_EQ_0x300_75_THEN_102_ETC___d795 =
	      csr_mie$mav_write;
      12'h305:
	  IF_mav_csr_write_csr_addr_EQ_0x300_75_THEN_102_ETC___d795 =
	      new_csr_value__h6367;
      12'h306:
	  IF_mav_csr_write_csr_addr_EQ_0x300_75_THEN_102_ETC___d795 =
	      v__h7326;
      12'h320, 12'h7A0:
	  IF_mav_csr_write_csr_addr_EQ_0x300_75_THEN_102_ETC___d795 = 64'd0;
      12'h340, 12'h343, 12'hB00, 12'hB02:
	  IF_mav_csr_write_csr_addr_EQ_0x300_75_THEN_102_ETC___d795 =
	      mav_csr_write_word;
      12'h341:
	  IF_mav_csr_write_csr_addr_EQ_0x300_75_THEN_102_ETC___d795 =
	      new_csr_value__h7418;
      12'h342:
	  IF_mav_csr_write_csr_addr_EQ_0x300_75_THEN_102_ETC___d795 =
	      v__h8328;
      12'h344:
	  IF_mav_csr_write_csr_addr_EQ_0x300_75_THEN_102_ETC___d795 =
	      csr_mip$mav_write;
      12'h7A1:
	  IF_mav_csr_write_csr_addr_EQ_0x300_75_THEN_102_ETC___d795 =
	      new_csr_value__h8998;
      default: IF_mav_csr_write_csr_addr_EQ_0x300_75_THEN_102_ETC___d795 =
		   mav_csr_write_word;
    endcase
  end
  always@(mav_scr_write_scr_addr or
	  mav_scr_write_cap or cap_unpacked_capFat_addrBits__h11665)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd30:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q4 =
	      mav_scr_write_cap[86:73];
      5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q4 =
	      cap_unpacked_capFat_addrBits__h11665;
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q4 = 14'd0;
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd30, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q5 =
	      mav_scr_write_cap[72:69];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q5 = 4'd0;
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q6 =
	      mav_scr_write_cap[56];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q6 =
		   mav_scr_write_scr_addr == 5'd30 && mav_scr_write_cap[56];
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd30, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q7 =
	      mav_scr_write_cap[55:54];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q7 = 2'd0;
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd30, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q8 =
	      mav_scr_write_cap[53:36];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q8 =
		   18'd262143;
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q9 =
	      mav_scr_write_cap[35];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q9 =
		   mav_scr_write_scr_addr != 5'd30 || mav_scr_write_cap[35];
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd30, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q10 =
	      mav_scr_write_cap[34:29];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q10 =
		   6'd52;
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd30, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q11 =
	      mav_scr_write_cap[28:15];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q11 =
		   14'd4096;
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd30, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q12 =
	      mav_scr_write_cap[14:1];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q12 =
		   14'd0;
    endcase
  end
  always@(read_csr_csr_addr or
	  rg_tdata3 or
	  csr_mstatus_rg_mstatus or
	  csr_mie$mv_read or
	  SEXT__0b0_CONCAT_rg_mtcc_50_BITS_86_TO_73_51_5_ETC___d173 or
	  rg_mcounteren or
	  rg_mscratch or
	  rg_mepc__h1320 or
	  rg_mcause or
	  rg_mtval or
	  csr_mip$mv_read or
	  rg_tselect or
	  rg_tdata1 or
	  rg_tdata2 or rg_mcycle or rg_minstret or x__h4707 or rg_mtime)
  begin
    case (read_csr_csr_addr)
      12'h300:
	  IF_read_csr_csr_addr_EQ_0xC00_3_THEN_rg_mcycle_ETC___d243 =
	      csr_mstatus_rg_mstatus;
      12'h301:
	  IF_read_csr_csr_addr_EQ_0xC00_3_THEN_rg_mcycle_ETC___d243 =
	      64'h8000000000100100;
      12'h304:
	  IF_read_csr_csr_addr_EQ_0xC00_3_THEN_rg_mcycle_ETC___d243 =
	      csr_mie$mv_read;
      12'h305:
	  IF_read_csr_csr_addr_EQ_0xC00_3_THEN_rg_mcycle_ETC___d243 =
	      { SEXT__0b0_CONCAT_rg_mtcc_50_BITS_86_TO_73_51_5_ETC___d173[63:2],
		1'b0,
		!SEXT__0b0_CONCAT_rg_mtcc_50_BITS_86_TO_73_51_5_ETC___d173[1] &&
		SEXT__0b0_CONCAT_rg_mtcc_50_BITS_86_TO_73_51_5_ETC___d173[0] };
      12'h306:
	  IF_read_csr_csr_addr_EQ_0xC00_3_THEN_rg_mcycle_ETC___d243 =
	      { 32'd0, rg_mcounteren };
      12'h320, 12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  IF_read_csr_csr_addr_EQ_0xC00_3_THEN_rg_mcycle_ETC___d243 = 64'd0;
      12'h340:
	  IF_read_csr_csr_addr_EQ_0xC00_3_THEN_rg_mcycle_ETC___d243 =
	      rg_mscratch;
      12'h341:
	  IF_read_csr_csr_addr_EQ_0xC00_3_THEN_rg_mcycle_ETC___d243 =
	      { rg_mepc__h1320[63:2], 1'd0, rg_mepc__h1320[0] };
      12'h342:
	  IF_read_csr_csr_addr_EQ_0xC00_3_THEN_rg_mcycle_ETC___d243 =
	      { rg_mcause[6], 57'd0, rg_mcause[5:0] };
      12'h343:
	  IF_read_csr_csr_addr_EQ_0xC00_3_THEN_rg_mcycle_ETC___d243 =
	      rg_mtval;
      12'h344:
	  IF_read_csr_csr_addr_EQ_0xC00_3_THEN_rg_mcycle_ETC___d243 =
	      csr_mip$mv_read;
      12'h7A0:
	  IF_read_csr_csr_addr_EQ_0xC00_3_THEN_rg_mcycle_ETC___d243 =
	      rg_tselect;
      12'h7A1:
	  IF_read_csr_csr_addr_EQ_0xC00_3_THEN_rg_mcycle_ETC___d243 =
	      rg_tdata1;
      12'h7A2:
	  IF_read_csr_csr_addr_EQ_0xC00_3_THEN_rg_mcycle_ETC___d243 =
	      rg_tdata2;
      12'hB00, 12'hC00:
	  IF_read_csr_csr_addr_EQ_0xC00_3_THEN_rg_mcycle_ETC___d243 =
	      rg_mcycle;
      12'hB02, 12'hC02:
	  IF_read_csr_csr_addr_EQ_0xC00_3_THEN_rg_mcycle_ETC___d243 =
	      rg_minstret;
      12'hBC0:
	  IF_read_csr_csr_addr_EQ_0xC00_3_THEN_rg_mcycle_ETC___d243 =
	      { 48'd0, x__h4707 };
      12'hC01:
	  IF_read_csr_csr_addr_EQ_0xC00_3_THEN_rg_mcycle_ETC___d243 =
	      rg_mtime;
      default: IF_read_csr_csr_addr_EQ_0xC00_3_THEN_rg_mcycle_ETC___d243 =
		   rg_tdata3;
    endcase
  end
  always@(mav_read_csr_csr_addr or
	  rg_tdata3 or
	  csr_mstatus_rg_mstatus or
	  csr_mie$mv_read or
	  SEXT__0b0_CONCAT_rg_mtcc_50_BITS_86_TO_73_51_5_ETC___d173 or
	  rg_mcounteren or
	  rg_mscratch or
	  rg_mepc__h1320 or
	  rg_mcause or
	  rg_mtval or
	  csr_mip$mv_read or
	  rg_tselect or
	  rg_tdata1 or
	  rg_tdata2 or rg_mcycle or rg_minstret or x__h4707 or rg_mtime)
  begin
    case (mav_read_csr_csr_addr)
      12'h300:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d563 =
	      csr_mstatus_rg_mstatus;
      12'h301:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d563 =
	      64'h8000000000100100;
      12'h304:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d563 =
	      csr_mie$mv_read;
      12'h305:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d563 =
	      { SEXT__0b0_CONCAT_rg_mtcc_50_BITS_86_TO_73_51_5_ETC___d173[63:2],
		1'b0,
		!SEXT__0b0_CONCAT_rg_mtcc_50_BITS_86_TO_73_51_5_ETC___d173[1] &&
		SEXT__0b0_CONCAT_rg_mtcc_50_BITS_86_TO_73_51_5_ETC___d173[0] };
      12'h306:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d563 =
	      { 32'd0, rg_mcounteren };
      12'h320, 12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d563 = 64'd0;
      12'h340:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d563 =
	      rg_mscratch;
      12'h341:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d563 =
	      { rg_mepc__h1320[63:2], 1'd0, rg_mepc__h1320[0] };
      12'h342:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d563 =
	      { rg_mcause[6], 57'd0, rg_mcause[5:0] };
      12'h343:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d563 =
	      rg_mtval;
      12'h344:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d563 =
	      csr_mip$mv_read;
      12'h7A0:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d563 =
	      rg_tselect;
      12'h7A1:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d563 =
	      rg_tdata1;
      12'h7A2:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d563 =
	      rg_tdata2;
      12'hB00, 12'hC00:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d563 =
	      rg_mcycle;
      12'hB02, 12'hC02:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d563 =
	      rg_minstret;
      12'hBC0:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d563 =
	      { 48'd0, x__h4707 };
      12'hC01:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d563 =
	      rg_mtime;
      default: IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d563 =
		   rg_tdata3;
    endcase
  end
  always@(read_csr_port2_csr_addr or
	  rg_tdata3 or
	  csr_mstatus_rg_mstatus or
	  csr_mie$mv_read or
	  SEXT__0b0_CONCAT_rg_mtcc_50_BITS_86_TO_73_51_5_ETC___d173 or
	  rg_mcounteren or
	  rg_mscratch or
	  rg_mepc__h1320 or
	  rg_mcause or
	  rg_mtval or
	  csr_mip$mv_read or
	  rg_tselect or
	  rg_tdata1 or
	  rg_tdata2 or rg_mcycle or rg_minstret or x__h4707 or rg_mtime)
  begin
    case (read_csr_port2_csr_addr)
      12'h300:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_58_THEN_rg_ETC___d393 =
	      csr_mstatus_rg_mstatus;
      12'h301:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_58_THEN_rg_ETC___d393 =
	      64'h8000000000100100;
      12'h304:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_58_THEN_rg_ETC___d393 =
	      csr_mie$mv_read;
      12'h305:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_58_THEN_rg_ETC___d393 =
	      { SEXT__0b0_CONCAT_rg_mtcc_50_BITS_86_TO_73_51_5_ETC___d173[63:2],
		1'b0,
		!SEXT__0b0_CONCAT_rg_mtcc_50_BITS_86_TO_73_51_5_ETC___d173[1] &&
		SEXT__0b0_CONCAT_rg_mtcc_50_BITS_86_TO_73_51_5_ETC___d173[0] };
      12'h306:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_58_THEN_rg_ETC___d393 =
	      { 32'd0, rg_mcounteren };
      12'h320, 12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_58_THEN_rg_ETC___d393 = 64'd0;
      12'h340:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_58_THEN_rg_ETC___d393 =
	      rg_mscratch;
      12'h341:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_58_THEN_rg_ETC___d393 =
	      { rg_mepc__h1320[63:2], 1'd0, rg_mepc__h1320[0] };
      12'h342:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_58_THEN_rg_ETC___d393 =
	      { rg_mcause[6], 57'd0, rg_mcause[5:0] };
      12'h343:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_58_THEN_rg_ETC___d393 =
	      rg_mtval;
      12'h344:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_58_THEN_rg_ETC___d393 =
	      csr_mip$mv_read;
      12'h7A0:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_58_THEN_rg_ETC___d393 =
	      rg_tselect;
      12'h7A1:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_58_THEN_rg_ETC___d393 =
	      rg_tdata1;
      12'h7A2:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_58_THEN_rg_ETC___d393 =
	      rg_tdata2;
      12'hB00, 12'hC00:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_58_THEN_rg_ETC___d393 =
	      rg_mcycle;
      12'hB02, 12'hC02:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_58_THEN_rg_ETC___d393 =
	      rg_minstret;
      12'hBC0:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_58_THEN_rg_ETC___d393 =
	      { 48'd0, x__h4707 };
      12'hC01:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_58_THEN_rg_ETC___d393 =
	      rg_mtime;
      default: IF_read_csr_port2_csr_addr_EQ_0xC00_58_THEN_rg_ETC___d393 =
		   rg_tdata3;
    endcase
  end
  always@(read_scr_scr_addr or rg_mepcc or rg_mtcc or rg_mtdc or rg_mscratchc)
  begin
    case (read_scr_scr_addr)
      5'd28:
	  IF_read_scr_scr_addr_EQ_28_96_THEN_rg_mtcc_50__ETC___d414 = rg_mtcc;
      5'd29:
	  IF_read_scr_scr_addr_EQ_28_96_THEN_rg_mtcc_50__ETC___d414 = rg_mtdc;
      5'd30:
	  IF_read_scr_scr_addr_EQ_28_96_THEN_rg_mtcc_50__ETC___d414 =
	      rg_mscratchc;
      default: IF_read_scr_scr_addr_EQ_28_96_THEN_rg_mtcc_50__ETC___d414 =
		   rg_mepcc;
    endcase
  end
  always@(mav_scr_write_scr_addr or
	  mav_scr_write_cap or
	  SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86_TO__ETC___d890)
  begin
    case (mav_scr_write_scr_addr)
      5'd29:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q13 =
	      mav_scr_write_cap[151];
      5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q13 =
	      SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86_TO__ETC___d890 &&
	      mav_scr_write_cap[151];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q13 =
		   mav_scr_write_scr_addr == 5'd30 && mav_scr_write_cap[151];
    endcase
  end
  always@(mav_scr_write_scr_addr or
	  mav_scr_write_cap or cap_unpacked_capFat_address__h11664)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd30:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q14 =
	      mav_scr_write_cap[150:87];
      5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q14 =
	      cap_unpacked_capFat_address__h11664;
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q14 =
		   64'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	csr_mstatus_rg_mstatus <= `BSV_ASSIGNMENT_DELAY 64'h0000000200000000;
	rg_mcause <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rg_mccsr <= `BSV_ASSIGNMENT_DELAY 11'd0;
	rg_mcounteren <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_mcycle <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mepcc <= `BSV_ASSIGNMENT_DELAY
	    152'h0000000000000000000000003FFFFE88000000;
	rg_minstret <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mscratch <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mscratchc <= `BSV_ASSIGNMENT_DELAY
	    152'h0000000000000000000000003FFFFE88000000;
	rg_mtcc <= `BSV_ASSIGNMENT_DELAY
	    152'h0000000000000000000000003FFFFE88000000;
	rg_mtdc <= `BSV_ASSIGNMENT_DELAY
	    152'h0000000000000000000000003FFFFE88000000;
	rg_mtime <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mtval <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_nmi <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_nmi_vector <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_tdata1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_tdata2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_tdata3 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_tselect <= `BSV_ASSIGNMENT_DELAY 64'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (csr_mstatus_rg_mstatus$EN)
	  csr_mstatus_rg_mstatus <= `BSV_ASSIGNMENT_DELAY
	      csr_mstatus_rg_mstatus$D_IN;
	if (rg_mcause$EN) rg_mcause <= `BSV_ASSIGNMENT_DELAY rg_mcause$D_IN;
	if (rg_mccsr$EN) rg_mccsr <= `BSV_ASSIGNMENT_DELAY rg_mccsr$D_IN;
	if (rg_mcounteren$EN)
	  rg_mcounteren <= `BSV_ASSIGNMENT_DELAY rg_mcounteren$D_IN;
	if (rg_mcycle$EN) rg_mcycle <= `BSV_ASSIGNMENT_DELAY rg_mcycle$D_IN;
	if (rg_mepcc$EN) rg_mepcc <= `BSV_ASSIGNMENT_DELAY rg_mepcc$D_IN;
	if (rg_minstret$EN)
	  rg_minstret <= `BSV_ASSIGNMENT_DELAY rg_minstret$D_IN;
	if (rg_mscratch$EN)
	  rg_mscratch <= `BSV_ASSIGNMENT_DELAY rg_mscratch$D_IN;
	if (rg_mscratchc$EN)
	  rg_mscratchc <= `BSV_ASSIGNMENT_DELAY rg_mscratchc$D_IN;
	if (rg_mtcc$EN) rg_mtcc <= `BSV_ASSIGNMENT_DELAY rg_mtcc$D_IN;
	if (rg_mtdc$EN) rg_mtdc <= `BSV_ASSIGNMENT_DELAY rg_mtdc$D_IN;
	if (rg_mtime$EN) rg_mtime <= `BSV_ASSIGNMENT_DELAY rg_mtime$D_IN;
	if (rg_mtval$EN) rg_mtval <= `BSV_ASSIGNMENT_DELAY rg_mtval$D_IN;
	if (rg_nmi$EN) rg_nmi <= `BSV_ASSIGNMENT_DELAY rg_nmi$D_IN;
	if (rg_nmi_vector$EN)
	  rg_nmi_vector <= `BSV_ASSIGNMENT_DELAY rg_nmi_vector$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (rg_tdata1$EN) rg_tdata1 <= `BSV_ASSIGNMENT_DELAY rg_tdata1$D_IN;
	if (rg_tdata2$EN) rg_tdata2 <= `BSV_ASSIGNMENT_DELAY rg_tdata2$D_IN;
	if (rg_tdata3$EN) rg_tdata3 <= `BSV_ASSIGNMENT_DELAY rg_tdata3$D_IN;
	if (rg_tselect$EN)
	  rg_tselect <= `BSV_ASSIGNMENT_DELAY rg_tselect$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    csr_mstatus_rg_mstatus = 64'hAAAAAAAAAAAAAAAA;
    rg_mcause = 7'h2A;
    rg_mccsr = 11'h2AA;
    rg_mcounteren = 32'hAAAAAAAA;
    rg_mcycle = 64'hAAAAAAAAAAAAAAAA;
    rg_mepcc = 152'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_minstret = 64'hAAAAAAAAAAAAAAAA;
    rg_mscratch = 64'hAAAAAAAAAAAAAAAA;
    rg_mscratchc = 152'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_mtcc = 152'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_mtdc = 152'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_mtime = 64'hAAAAAAAAAAAAAAAA;
    rg_mtval = 64'hAAAAAAAAAAAAAAAA;
    rg_nmi = 1'h0;
    rg_nmi_vector = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 1'h0;
    rg_tdata1 = 64'hAAAAAAAAAAAAAAAA;
    rg_tdata2 = 64'hAAAAAAAAAAAAAAAA;
    rg_tdata3 = 64'hAAAAAAAAAAAAAAAA;
    rg_tselect = 64'hAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("mstatus = 0x%0h", csr_mstatus_rg_mstatus);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("mip     = 0x%0h", csr_mip$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("mie     = 0x%0h", csr_mie$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$display("%0d: CSR_Regfile.csr_trap_actions:", rg_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$display("    from priv %0d  pc 0x%0h  interrupt %0d  exc_code %0d  xtval 0x%0h",
		 csr_trap_actions_from_priv,
		 x__h13476 | addrLSB__h13465,
		 csr_trap_actions_interrupt,
		 csr_trap_actions_exc_code,
		 csr_trap_actions_xtval);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write("    priv %0d: ", 2'b11);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" ip: 0x%0h", csr_mip$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" ie: 0x%0h", csr_mie$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" edeleg: 0x%0h", 29'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" ideleg: 0x%0h", 12'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" cause:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd0)
	$write("USER_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd1)
	$write("SUPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd2)
	$write("HYPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd3)
	$write("MACHINE_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd4)
	$write("USER_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd5)
	$write("SUPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd6)
	$write("HYPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd7)
	$write("MACHINE_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd8)
	$write("USER_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd9)
	$write("SUPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd10)
	$write("HYPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd11)
	$write("MACHINE_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] != 6'd0 &&
	  rg_mcause[5:0] != 6'd1 &&
	  rg_mcause[5:0] != 6'd2 &&
	  rg_mcause[5:0] != 6'd3 &&
	  rg_mcause[5:0] != 6'd4 &&
	  rg_mcause[5:0] != 6'd5 &&
	  rg_mcause[5:0] != 6'd6 &&
	  rg_mcause[5:0] != 6'd7 &&
	  rg_mcause[5:0] != 6'd8 &&
	  rg_mcause[5:0] != 6'd9 &&
	  rg_mcause[5:0] != 6'd10 &&
	  rg_mcause[5:0] != 6'd11)
	$write("unknown interrupt Exc_Code %d", rg_mcause[5:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] != 6'd0 &&
	  rg_mcause[5:0] != 6'd1 &&
	  rg_mcause[5:0] != 6'd2 &&
	  rg_mcause[5:0] != 6'd3 &&
	  rg_mcause[5:0] != 6'd4 &&
	  rg_mcause[5:0] != 6'd5 &&
	  rg_mcause[5:0] != 6'd6 &&
	  rg_mcause[5:0] != 6'd7 &&
	  rg_mcause[5:0] != 6'd8 &&
	  rg_mcause[5:0] != 6'd9 &&
	  rg_mcause[5:0] != 6'd11 &&
	  rg_mcause[5:0] != 6'd12 &&
	  rg_mcause[5:0] != 6'd13 &&
	  rg_mcause[5:0] != 6'd15)
	$write("unknown trap Exc_Code %d", rg_mcause[5:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" status: 0x%0h", csr_mstatus_rg_mstatus);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" tvec: 0x%0h",
	       { SEXT__0b0_CONCAT_rg_mtcc_50_BITS_86_TO_73_51_5_ETC___d173[63:2],
		 1'b0,
		 !SEXT__0b0_CONCAT_rg_mtcc_50_BITS_86_TO_73_51_5_ETC___d173[1] &&
		 SEXT__0b0_CONCAT_rg_mtcc_50_BITS_86_TO_73_51_5_ETC___d173[0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" epc: 0x%0h", rg_mepc__h1320);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" tval: 0x%0h", rg_mtval);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write("    Return: new pc 0x%0h  ", _theResult_____2__h15083);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" new mstatus:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write("MStatus{", "sd:%0d", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" sxl:%0d uxl:%0d", 2'd0, 2'd2);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" tsr:%0d", csr_mstatus_rg_mstatus[22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" tw:%0d", csr_mstatus_rg_mstatus[21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" tvm:%0d", csr_mstatus_rg_mstatus[20]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" mxr:%0d", csr_mstatus_rg_mstatus[19]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" sum:%0d", csr_mstatus_rg_mstatus[18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" mprv:%0d", csr_mstatus_rg_mstatus[17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" xs:%0d", 2'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" fs:%0d", 2'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" mpp:%0d", mpp__h15176);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" spp:%0d", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" pies:%0d_%0d%0d", csr_mstatus_rg_mstatus[3], 1'd0, 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" ies:%0d_%0d%0d", 1'd0, 1'd0, 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" new xcause:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h15816 == 6'd0)
	$write("USER_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h15816 == 6'd1)
	$write("SUPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h15816 == 6'd2)
	$write("HYPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h15816 == 6'd3)
	$write("MACHINE_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h15816 == 6'd4)
	$write("USER_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h15816 == 6'd5)
	$write("SUPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h15816 == 6'd6)
	$write("HYPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h15816 == 6'd7)
	$write("MACHINE_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h15816 == 6'd8)
	$write("USER_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h15816 == 6'd9)
	$write("SUPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h15816 == 6'd10)
	$write("HYPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h15816 == 6'd11)
	$write("MACHINE_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  NOT_csr_trap_actions_nmi_210_AND_csr_trap_acti_ETC___d1288)
	$write("unknown interrupt Exc_Code %d", exc_code__h15816);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h15816 == 6'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h15816 == 6'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h15816 == 6'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h15816 == 6'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h15816 == 6'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h15816 == 6'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h15816 == 6'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h15816 == 6'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h15816 == 6'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h15816 == 6'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h15816 == 6'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h15816 == 6'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h15816 == 6'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h15816 == 6'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  csr_trap_actions_nmi_OR_NOT_csr_trap_actions_i_ETC___d1339)
	$write("unknown trap Exc_Code %d", exc_code__h15816);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" new priv %0d", 2'b11);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_csr_write &&
	  (mav_csr_write_csr_addr_ULT_0xB03___d566 ||
	   !mav_csr_write_csr_addr_ULE_0xB1F___d567) &&
	  mav_csr_write_csr_addr_ULT_0x323_70_OR_NOT_mav_ETC___d760 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$display("%0d: ERROR: CSR-write addr 0x%0h val 0x%0h not successful",
		 rg_mcycle,
		 mav_csr_write_csr_addr,
		 mav_csr_write_word);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write("%0d: ERROR: SCR-write addr 0x%0h val ",
	       rg_mcycle,
	       mav_scr_write_scr_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write("valid:%b",
	       mav_scr_write_cap[151],
	       " perms:0x%x",
	       { 15'd0, mav_scr_write_cap[72:57] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" reserved:0x%x", mav_scr_write_cap[55:54]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" format:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  mav_scr_write_cap[35])
	$write("EmbeddedExp");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !mav_scr_write_cap[35])
	$write("Exp0");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" bounds:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write("Bounds { ", "exp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write("%d", $unsigned(mav_scr_write_cap[34:29]));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(", ", "topBits: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write("'h%h", mav_scr_write_cap[28:15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(", ", "baseBits: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write("'h%h", mav_scr_write_cap[14:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(", ", "overflow: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  mav_scr_write_cap[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !mav_scr_write_cap[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" address:0x%x", mav_scr_write_cap[150:87]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" addrBits:0x%x", mav_scr_write_cap[86:73]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" {bot:0x%x top:0x%x len:0x%x offset:0x%x}",
	       mav_scr_write_cap_BITS_150_TO_101_59_AND_11258_ETC___d864,
	       IF_mav_scr_write_cap_BITS_34_TO_29_98_ULT_51_1_ETC___d951,
	       (mav_scr_write_cap[34:29] == 6'd52) ?
		 64'hFFFFFFFFFFFFFFFF :
		 length__h12792,
	       SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_86_TO__ETC___d825);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" (TempFields: {");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write("MetaInfo { ", "repBoundTopBits: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write("'h%h", repBound__h13016);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(", ", "topHi: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  mav_scr_write_cap_BITS_28_TO_26_24_ULT_mav_scr_ETC___d925)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !mav_scr_write_cap_BITS_28_TO_26_24_ULT_mav_scr_ETC___d925)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(", ", "baseHi: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  mav_scr_write_cap_BITS_14_TO_12_06_ULT_mav_scr_ETC___d808)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !mav_scr_write_cap_BITS_14_TO_12_06_ULT_mav_scr_ETC___d808)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(", ", "addrHi: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  mav_scr_write_cap_BITS_86_TO_84_09_ULT_mav_scr_ETC___d810)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764 &&
	  !mav_scr_write_cap_BITS_86_TO_84_09_ULT_mav_scr_ETC___d810)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(", ", "topCorrection: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write("%d", $signed(x__h13077));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(", ", "baseCorrection: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write("%d", $signed(x__h13096), " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write("})");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$write(" not successful", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$display("%0d: CSR_RegFile: m_external_interrupt_req: %x",
		 rg_mcycle,
		 m_external_interrupt_req_set_not_clear);
    if (RST_N != `BSV_RESET_VALUE)
      if (NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$display("%0d: CSR_RegFile: s_external_interrupt_req: %x",
		 rg_mcycle,
		 s_external_interrupt_req_set_not_clear);
    if (RST_N != `BSV_RESET_VALUE)
      if (NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$display("%0d: CSR_RegFile: timer_interrupt_req: %x",
		 rg_mcycle,
		 timer_interrupt_req_set_not_clear);
    if (RST_N != `BSV_RESET_VALUE)
      if (NOT_cfg_verbosity_read__62_ULE_1_63___d764)
	$display("%0d: CSR_RegFile: software_interrupt_req: %x",
		 rg_mcycle,
		 software_interrupt_req_set_not_clear);
  end
  // synopsys translate_on
endmodule  // mkCSR_RegFile

