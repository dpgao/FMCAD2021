//
// Generated by Bluespec Compiler (build 7d25cde)
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    64 reg
// cword_fst                      O     1
// cword_snd                      O   128
// st_amo_val_fst                 O     1
// st_amo_val_snd                 O   128
// exc                            O     1
// exc_code                       O     6 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_aw_canPeek          O     1 reg
// mem_master_aw_peek             O    97 reg
// RDY_mem_master_aw_peek         O     1 reg
// RDY_mem_master_aw_drop         O     1 reg
// mem_master_w_canPeek           O     1 reg
// mem_master_w_peek              O    74 reg
// RDY_mem_master_w_peek          O     1 reg
// RDY_mem_master_w_drop          O     1 reg
// mem_master_b_canPut            O     1 reg
// RDY_mem_master_b_put           O     1 reg
// mem_master_ar_canPeek          O     1 reg
// mem_master_ar_peek             O    97 reg
// RDY_mem_master_ar_peek         O     1 reg
// RDY_mem_master_ar_drop         O     1 reg
// mem_master_r_canPut            O     1 reg
// RDY_mem_master_r_put           O     1 reg
// RDY_ma_ddr4_ready              O     1 const
// mv_status                      O     8
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     1
// req_width_code                 I     3
// req_is_unsigned                I     1 reg
// req_addr                       I    64
// req_st_value                   I   129 reg
// req_priv                       I     2 unused
// req_sstatus_SUM                I     1 unused
// req_mstatus_MXR                I     1 unused
// req_satp                       I    64 unused
// mem_master_b_put_val           I     6 reg
// mem_master_r_put_val           I    72 reg
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_commit                      I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1 unused
// EN_mem_master_aw_drop          I     1
// EN_mem_master_w_drop           I     1
// EN_mem_master_b_put            I     1
// EN_mem_master_ar_drop          I     1
// EN_mem_master_r_put            I     1
// EN_ma_ddr4_ready               I     1
//
// Combinational paths from inputs to outputs:
//   EN_commit -> valid
//   EN_commit -> cword_fst
//   EN_commit -> cword_snd
//   EN_commit -> st_amo_val_fst
//   EN_commit -> st_amo_val_snd
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_DCache(CLK,
		    RST_N,

		    set_verbosity_verbosity,
		    EN_set_verbosity,
		    RDY_set_verbosity,

		    EN_server_reset_request_put,
		    RDY_server_reset_request_put,

		    EN_server_reset_response_get,
		    RDY_server_reset_response_get,

		    req_op,
		    req_width_code,
		    req_is_unsigned,
		    req_addr,
		    req_st_value,
		    req_priv,
		    req_sstatus_SUM,
		    req_mstatus_MXR,
		    req_satp,
		    EN_req,

		    EN_commit,

		    valid,

		    addr,

		    cword_fst,

		    cword_snd,

		    st_amo_val_fst,

		    st_amo_val_snd,

		    exc,

		    exc_code,

		    EN_server_flush_request_put,
		    RDY_server_flush_request_put,

		    EN_server_flush_response_get,
		    RDY_server_flush_response_get,

		    EN_tlb_flush,
		    RDY_tlb_flush,

		    mem_master_aw_canPeek,

		    mem_master_aw_peek,
		    RDY_mem_master_aw_peek,

		    EN_mem_master_aw_drop,
		    RDY_mem_master_aw_drop,

		    mem_master_w_canPeek,

		    mem_master_w_peek,
		    RDY_mem_master_w_peek,

		    EN_mem_master_w_drop,
		    RDY_mem_master_w_drop,

		    mem_master_b_canPut,

		    mem_master_b_put_val,
		    EN_mem_master_b_put,
		    RDY_mem_master_b_put,

		    mem_master_ar_canPeek,

		    mem_master_ar_peek,
		    RDY_mem_master_ar_peek,

		    EN_mem_master_ar_drop,
		    RDY_mem_master_ar_drop,

		    mem_master_r_canPut,

		    mem_master_r_put_val,
		    EN_mem_master_r_put,
		    RDY_mem_master_r_put,

		    EN_ma_ddr4_ready,
		    RDY_ma_ddr4_ready,

		    mv_status);
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  req_op;
  input  [2 : 0] req_width_code;
  input  req_is_unsigned;
  input  [63 : 0] req_addr;
  input  [128 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [63 : 0] req_satp;
  input  EN_req;

  // action method commit
  input  EN_commit;

  // value method valid
  output valid;

  // value method addr
  output [63 : 0] addr;

  // value method cword_fst
  output cword_fst;

  // value method cword_snd
  output [127 : 0] cword_snd;

  // value method st_amo_val_fst
  output st_amo_val_fst;

  // value method st_amo_val_snd
  output [127 : 0] st_amo_val_snd;

  // value method exc
  output exc;

  // value method exc_code
  output [5 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_aw_canPeek
  output mem_master_aw_canPeek;

  // value method mem_master_aw_peek
  output [96 : 0] mem_master_aw_peek;
  output RDY_mem_master_aw_peek;

  // action method mem_master_aw_drop
  input  EN_mem_master_aw_drop;
  output RDY_mem_master_aw_drop;

  // value method mem_master_w_canPeek
  output mem_master_w_canPeek;

  // value method mem_master_w_peek
  output [73 : 0] mem_master_w_peek;
  output RDY_mem_master_w_peek;

  // action method mem_master_w_drop
  input  EN_mem_master_w_drop;
  output RDY_mem_master_w_drop;

  // value method mem_master_b_canPut
  output mem_master_b_canPut;

  // action method mem_master_b_put
  input  [5 : 0] mem_master_b_put_val;
  input  EN_mem_master_b_put;
  output RDY_mem_master_b_put;

  // value method mem_master_ar_canPeek
  output mem_master_ar_canPeek;

  // value method mem_master_ar_peek
  output [96 : 0] mem_master_ar_peek;
  output RDY_mem_master_ar_peek;

  // action method mem_master_ar_drop
  input  EN_mem_master_ar_drop;
  output RDY_mem_master_ar_drop;

  // value method mem_master_r_canPut
  output mem_master_r_canPut;

  // action method mem_master_r_put
  input  [71 : 0] mem_master_r_put_val;
  input  EN_mem_master_r_put;
  output RDY_mem_master_r_put;

  // action method ma_ddr4_ready
  input  EN_ma_ddr4_ready;
  output RDY_ma_ddr4_ready;

  // value method mv_status
  output [7 : 0] mv_status;

  // signals for module outputs
  wire [127 : 0] cword_snd, st_amo_val_snd;
  wire [96 : 0] mem_master_ar_peek, mem_master_aw_peek;
  wire [73 : 0] mem_master_w_peek;
  wire [63 : 0] addr;
  wire [7 : 0] mv_status;
  wire [5 : 0] exc_code;
  wire RDY_ma_ddr4_ready,
       RDY_mem_master_ar_drop,
       RDY_mem_master_ar_peek,
       RDY_mem_master_aw_drop,
       RDY_mem_master_aw_peek,
       RDY_mem_master_b_put,
       RDY_mem_master_r_put,
       RDY_mem_master_w_drop,
       RDY_mem_master_w_peek,
       RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       cword_fst,
       exc,
       mem_master_ar_canPeek,
       mem_master_aw_canPeek,
       mem_master_b_canPut,
       mem_master_r_canPut,
       mem_master_w_canPeek,
       st_amo_val_fst,
       valid;

  // inlined wires
  reg [128 : 0] cache_dw_output_ld_val$wget;
  wire [128 : 0] cache_dw_output_st_amo_val$wget;
  wire [3 : 0] cache_ctr_wr_rsps_pending_crg$port0__write_1,
	       cache_ctr_wr_rsps_pending_crg$port1__read,
	       cache_ctr_wr_rsps_pending_crg$port1__write_1,
	       cache_ctr_wr_rsps_pending_crg$port2__read,
	       cache_ctr_wr_rsps_pending_crg$port3__read;
  wire cache_ctr_wr_rsps_pending_crg$EN_port2__write,
       cache_dw_output_ld_val$whas,
       cache_dw_output_st_amo_val$whas,
       cache_dw_valid$wget,
       cache_dw_valid$whas,
       cache_rw_reset_req$whas;

  // register cache_cfg_verbosity
  reg [3 : 0] cache_cfg_verbosity;
  wire [3 : 0] cache_cfg_verbosity$D_IN;
  wire cache_cfg_verbosity$EN;

  // register cache_ctr_wr_rsps_pending_crg
  reg [3 : 0] cache_ctr_wr_rsps_pending_crg;
  wire [3 : 0] cache_ctr_wr_rsps_pending_crg$D_IN;
  wire cache_ctr_wr_rsps_pending_crg$EN;

  // register cache_rg_addr
  reg [63 : 0] cache_rg_addr;
  wire [63 : 0] cache_rg_addr$D_IN;
  wire cache_rg_addr$EN;

  // register cache_rg_allow_cap
  reg cache_rg_allow_cap;
  wire cache_rg_allow_cap$D_IN, cache_rg_allow_cap$EN;

  // register cache_rg_cset_cword_in_cache
  reg [7 : 0] cache_rg_cset_cword_in_cache;
  wire [7 : 0] cache_rg_cset_cword_in_cache$D_IN;
  wire cache_rg_cset_cword_in_cache$EN;

  // register cache_rg_cset_in_cache
  reg [5 : 0] cache_rg_cset_in_cache;
  wire [5 : 0] cache_rg_cset_in_cache$D_IN;
  wire cache_rg_cset_in_cache$EN;

  // register cache_rg_ddr4_ready
  reg cache_rg_ddr4_ready;
  wire cache_rg_ddr4_ready$D_IN, cache_rg_ddr4_ready$EN;

  // register cache_rg_error_during_refill
  reg cache_rg_error_during_refill;
  wire cache_rg_error_during_refill$D_IN, cache_rg_error_during_refill$EN;

  // register cache_rg_exc_code
  reg [5 : 0] cache_rg_exc_code;
  reg [5 : 0] cache_rg_exc_code$D_IN;
  wire cache_rg_exc_code$EN;

  // register cache_rg_is_unsigned
  reg cache_rg_is_unsigned;
  wire cache_rg_is_unsigned$D_IN, cache_rg_is_unsigned$EN;

  // register cache_rg_ld_val
  reg [128 : 0] cache_rg_ld_val;
  wire [128 : 0] cache_rg_ld_val$D_IN;
  wire cache_rg_ld_val$EN;

  // register cache_rg_lower_word64
  reg [63 : 0] cache_rg_lower_word64;
  wire [63 : 0] cache_rg_lower_word64$D_IN;
  wire cache_rg_lower_word64$EN;

  // register cache_rg_lower_word64_full
  reg cache_rg_lower_word64_full;
  reg cache_rg_lower_word64_full$D_IN;
  wire cache_rg_lower_word64_full$EN;

  // register cache_rg_op
  reg cache_rg_op;
  wire cache_rg_op$D_IN, cache_rg_op$EN;

  // register cache_rg_pa
  reg [63 : 0] cache_rg_pa;
  wire [63 : 0] cache_rg_pa$D_IN;
  wire cache_rg_pa$EN;

  // register cache_rg_st_amo_val
  reg [128 : 0] cache_rg_st_amo_val;
  wire [128 : 0] cache_rg_st_amo_val$D_IN;
  wire cache_rg_st_amo_val$EN;

  // register cache_rg_state
  reg [4 : 0] cache_rg_state;
  reg [4 : 0] cache_rg_state$D_IN;
  wire cache_rg_state$EN;

  // register cache_rg_victim_way
  reg cache_rg_victim_way;
  wire cache_rg_victim_way$D_IN, cache_rg_victim_way$EN;

  // register cache_rg_width_code
  reg [2 : 0] cache_rg_width_code;
  wire [2 : 0] cache_rg_width_code$D_IN;
  wire cache_rg_width_code$EN;

  // register cache_rg_wr_rsp_err
  reg cache_rg_wr_rsp_err;
  wire cache_rg_wr_rsp_err$D_IN, cache_rg_wr_rsp_err$EN;

  // ports of submodule cache_f_fabric_second_write_reqs
  wire [73 : 0] cache_f_fabric_second_write_reqs$D_IN,
		cache_f_fabric_second_write_reqs$D_OUT;
  wire cache_f_fabric_second_write_reqs$CLR,
       cache_f_fabric_second_write_reqs$DEQ,
       cache_f_fabric_second_write_reqs$EMPTY_N,
       cache_f_fabric_second_write_reqs$ENQ,
       cache_f_fabric_second_write_reqs$FULL_N;

  // ports of submodule cache_f_fabric_write_reqs
  wire [195 : 0] cache_f_fabric_write_reqs$D_IN,
		 cache_f_fabric_write_reqs$D_OUT;
  wire cache_f_fabric_write_reqs$CLR,
       cache_f_fabric_write_reqs$DEQ,
       cache_f_fabric_write_reqs$EMPTY_N,
       cache_f_fabric_write_reqs$ENQ,
       cache_f_fabric_write_reqs$FULL_N;

  // ports of submodule cache_f_reset_reqs
  wire cache_f_reset_reqs$CLR,
       cache_f_reset_reqs$DEQ,
       cache_f_reset_reqs$D_IN,
       cache_f_reset_reqs$D_OUT,
       cache_f_reset_reqs$EMPTY_N,
       cache_f_reset_reqs$ENQ,
       cache_f_reset_reqs$FULL_N;

  // ports of submodule cache_f_reset_rsps
  wire cache_f_reset_rsps$CLR,
       cache_f_reset_rsps$DEQ,
       cache_f_reset_rsps$D_IN,
       cache_f_reset_rsps$D_OUT,
       cache_f_reset_rsps$EMPTY_N,
       cache_f_reset_rsps$ENQ,
       cache_f_reset_rsps$FULL_N;

  // ports of submodule cache_masterPortShim_arff
  wire [96 : 0] cache_masterPortShim_arff$D_IN,
		cache_masterPortShim_arff$D_OUT;
  wire cache_masterPortShim_arff$CLR,
       cache_masterPortShim_arff$DEQ,
       cache_masterPortShim_arff$EMPTY_N,
       cache_masterPortShim_arff$ENQ,
       cache_masterPortShim_arff$FULL_N;

  // ports of submodule cache_masterPortShim_awff
  wire [96 : 0] cache_masterPortShim_awff$D_IN,
		cache_masterPortShim_awff$D_OUT;
  wire cache_masterPortShim_awff$CLR,
       cache_masterPortShim_awff$DEQ,
       cache_masterPortShim_awff$EMPTY_N,
       cache_masterPortShim_awff$ENQ,
       cache_masterPortShim_awff$FULL_N;

  // ports of submodule cache_masterPortShim_bff
  wire [5 : 0] cache_masterPortShim_bff$D_IN, cache_masterPortShim_bff$D_OUT;
  wire cache_masterPortShim_bff$CLR,
       cache_masterPortShim_bff$DEQ,
       cache_masterPortShim_bff$EMPTY_N,
       cache_masterPortShim_bff$ENQ,
       cache_masterPortShim_bff$FULL_N;

  // ports of submodule cache_masterPortShim_rff
  wire [71 : 0] cache_masterPortShim_rff$D_IN, cache_masterPortShim_rff$D_OUT;
  wire cache_masterPortShim_rff$CLR,
       cache_masterPortShim_rff$DEQ,
       cache_masterPortShim_rff$EMPTY_N,
       cache_masterPortShim_rff$ENQ,
       cache_masterPortShim_rff$FULL_N;

  // ports of submodule cache_masterPortShim_wff
  wire [73 : 0] cache_masterPortShim_wff$D_IN, cache_masterPortShim_wff$D_OUT;
  wire cache_masterPortShim_wff$CLR,
       cache_masterPortShim_wff$DEQ,
       cache_masterPortShim_wff$EMPTY_N,
       cache_masterPortShim_wff$ENQ,
       cache_masterPortShim_wff$FULL_N;

  // ports of submodule cache_ram_cword_set
  reg [257 : 0] cache_ram_cword_set$DIB;
  reg [7 : 0] cache_ram_cword_set$ADDRB;
  wire [257 : 0] cache_ram_cword_set$DIA, cache_ram_cword_set$DOB;
  wire [7 : 0] cache_ram_cword_set$ADDRA;
  wire cache_ram_cword_set$ENA,
       cache_ram_cword_set$ENB,
       cache_ram_cword_set$WEA,
       cache_ram_cword_set$WEB;

  // ports of submodule cache_ram_state_and_ctag_cset
  wire [105 : 0] cache_ram_state_and_ctag_cset$DIA,
		 cache_ram_state_and_ctag_cset$DIB,
		 cache_ram_state_and_ctag_cset$DOB;
  wire [5 : 0] cache_ram_state_and_ctag_cset$ADDRA,
	       cache_ram_state_and_ctag_cset$ADDRB;
  wire cache_ram_state_and_ctag_cset$ENA,
       cache_ram_state_and_ctag_cset$ENB,
       cache_ram_state_and_ctag_cset$WEA,
       cache_ram_state_and_ctag_cset$WEB;

  // ports of submodule cache_soc_map
  wire [63 : 0] cache_soc_map$m_is_IO_addr_addr,
		cache_soc_map$m_is_mem_addr_addr,
		cache_soc_map$m_is_near_mem_IO_addr_addr;
  wire cache_soc_map$m_is_mem_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_cache_do_req,
       CAN_FIRE_RL_cache_do_reset_req,
       CAN_FIRE_RL_cache_rl_ST_AMO_response,
       CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_cache_rl_discard_write_rsp,
       CAN_FIRE_RL_cache_rl_drive_exception_rsp,
       CAN_FIRE_RL_cache_rl_fabric_send_second_write_req,
       CAN_FIRE_RL_cache_rl_fabric_send_write_req,
       CAN_FIRE_RL_cache_rl_io_read_req,
       CAN_FIRE_RL_cache_rl_io_read_rsp,
       CAN_FIRE_RL_cache_rl_io_write_req,
       CAN_FIRE_RL_cache_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_cache_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_cache_rl_rereq,
       CAN_FIRE_RL_cache_rl_reset,
       CAN_FIRE_RL_cache_rl_start_cache_refill,
       CAN_FIRE_RL_cache_rl_start_reset,
       CAN_FIRE___me_check_15,
       CAN_FIRE_commit,
       CAN_FIRE_ma_ddr4_ready,
       CAN_FIRE_mem_master_ar_drop,
       CAN_FIRE_mem_master_aw_drop,
       CAN_FIRE_mem_master_b_put,
       CAN_FIRE_mem_master_r_put,
       CAN_FIRE_mem_master_w_drop,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_cache_do_req,
       WILL_FIRE_RL_cache_do_reset_req,
       WILL_FIRE_RL_cache_rl_ST_AMO_response,
       WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_cache_rl_discard_write_rsp,
       WILL_FIRE_RL_cache_rl_drive_exception_rsp,
       WILL_FIRE_RL_cache_rl_fabric_send_second_write_req,
       WILL_FIRE_RL_cache_rl_fabric_send_write_req,
       WILL_FIRE_RL_cache_rl_io_read_req,
       WILL_FIRE_RL_cache_rl_io_read_rsp,
       WILL_FIRE_RL_cache_rl_io_write_req,
       WILL_FIRE_RL_cache_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_cache_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_cache_rl_rereq,
       WILL_FIRE_RL_cache_rl_reset,
       WILL_FIRE_RL_cache_rl_start_cache_refill,
       WILL_FIRE_RL_cache_rl_start_reset,
       WILL_FIRE___me_check_15,
       WILL_FIRE_commit,
       WILL_FIRE_ma_ddr4_ready,
       WILL_FIRE_mem_master_ar_drop,
       WILL_FIRE_mem_master_aw_drop,
       WILL_FIRE_mem_master_b_put,
       WILL_FIRE_mem_master_r_put,
       WILL_FIRE_mem_master_w_drop,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [257 : 0] MUX_cache_ram_cword_set$a_put_3__VAL_1,
		 MUX_cache_ram_cword_set$a_put_3__VAL_2;
  wire [195 : 0] MUX_cache_f_fabric_write_reqs$enq_1__VAL_1,
		 MUX_cache_f_fabric_write_reqs$enq_1__VAL_2;
  wire [128 : 0] MUX_cache_dw_output_ld_val$wset_1__VAL_1,
		 MUX_cache_dw_output_ld_val$wset_1__VAL_3;
  wire [105 : 0] MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [96 : 0] MUX_cache_masterPortShim_arff$enq_1__VAL_1,
		MUX_cache_masterPortShim_arff$enq_1__VAL_2;
  wire [73 : 0] MUX_cache_masterPortShim_wff$enq_1__VAL_2;
  wire [7 : 0] MUX_cache_ram_cword_set$b_put_2__VAL_2,
	       MUX_cache_ram_cword_set$b_put_2__VAL_4;
  wire [5 : 0] MUX_cache_rg_cset_in_cache$write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_3,
	       MUX_cache_rg_exc_code$write_1__VAL_4;
  wire [4 : 0] MUX_cache_rg_state$write_1__VAL_1,
	       MUX_cache_rg_state$write_1__VAL_4,
	       MUX_cache_rg_state$write_1__VAL_7,
	       MUX_cache_rg_state$write_1__VAL_9;
  wire MUX_cache_dw_output_ld_val$wset_1__SEL_3,
       MUX_cache_dw_valid$wset_1__SEL_1,
       MUX_cache_dw_valid$wset_1__SEL_2,
       MUX_cache_f_fabric_write_reqs$enq_1__SEL_1,
       MUX_cache_ram_cword_set$a_put_1__SEL_1,
       MUX_cache_ram_cword_set$b_put_1__SEL_1,
       MUX_cache_ram_cword_set$b_put_1__SEL_2,
       MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_2,
       MUX_cache_rg_exc_code$write_1__SEL_3,
       MUX_cache_rg_lower_word64_full$write_1__SEL_1,
       MUX_cache_rg_lower_word64_full$write_1__SEL_3,
       MUX_cache_rg_pa$write_1__SEL_2,
       MUX_cache_rg_state$write_1__PSEL_4,
       MUX_cache_rg_state$write_1__SEL_10,
       MUX_cache_rg_state$write_1__SEL_3,
       MUX_cache_rg_state$write_1__SEL_4,
       MUX_cache_rg_state$write_1__SEL_5,
       MUX_cache_rg_state$write_1__SEL_7;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h4349;
  reg [31 : 0] v__h4433;
  reg [31 : 0] v__h4554;
  reg [31 : 0] v__h32904;
  reg [31 : 0] v__h45347;
  reg [31 : 0] v__h36540;
  reg [63 : 0] v__h36691;
  reg [31 : 0] v__h37260;
  reg [31 : 0] v__h37493;
  reg [31 : 0] v__h39869;
  reg [63 : 0] v__h40074;
  reg [63 : 0] v__h40164;
  reg [31 : 0] v__h40313;
  reg [31 : 0] v__h41453;
  reg [31 : 0] v__h41555;
  reg [31 : 0] v__h41305;
  reg [31 : 0] v__h41662;
  reg [31 : 0] v__h41772;
  reg [31 : 0] v__h41862;
  reg [31 : 0] v__h42404;
  reg [31 : 0] v__h42446;
  reg [31 : 0] v__h3901;
  reg [31 : 0] v__h43293;
  reg [31 : 0] v__h3895;
  reg [31 : 0] v__h4343;
  reg [31 : 0] v__h4427;
  reg [31 : 0] v__h4548;
  reg [31 : 0] v__h32898;
  reg [31 : 0] v__h36534;
  reg [31 : 0] v__h37254;
  reg [31 : 0] v__h37487;
  reg [31 : 0] v__h39863;
  reg [31 : 0] v__h40307;
  reg [31 : 0] v__h41299;
  reg [31 : 0] v__h41447;
  reg [31 : 0] v__h41549;
  reg [31 : 0] v__h41656;
  reg [31 : 0] v__h41766;
  reg [31 : 0] v__h41856;
  reg [31 : 0] v__h42398;
  reg [31 : 0] v__h42440;
  reg [31 : 0] v__h43287;
  reg [31 : 0] v__h45341;
  // synopsys translate_on

  // remaining internal signals
  reg [127 : 0] CASE_cache_rg_addr_BITS_3_TO_0_0x0_new_cword33_ETC__q43,
		IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d249,
		IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d267,
		IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d277,
		b__h33349,
		new_cword__h33331;
  reg [63 : 0] CASE_cache_rg_addr_BITS_2_TO_0_0_result_lo1094_ETC__q44,
	       IF_cache_rg_addr_01_BITS_2_TO_0_63_EQ_0_64_THE_ETC___d811,
	       IF_cache_rg_addr_01_BITS_2_TO_0_63_EQ_0_64_THE_ETC___d831,
	       IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d539,
	       IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d579,
	       IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d599,
	       _theResult___fst__h40518,
	       _theResult___fst__h6194,
	       _theResult___fst__h6240,
	       _theResult___snd_fst__h6196,
	       mem_req_wr_data_wdata__h3127;
  reg [7 : 0] fabric_2_strb__h2820, mem_req_wr_data_wstrb__h3128;
  reg [2 : 0] _theResult___snd_snd_snd_val__h3091, size_val__h40049;
  wire [128 : 0] IF_NOT_cache_ram_state_and_ctag_cset_b_read__3_ETC___d294,
		 IF_cache_ram_state_and_ctag_cset_b_read__32_BI_ETC___d291,
		 IF_cache_rg_victim_way_43_THEN_cache_masterPor_ETC___d720,
		 IF_cache_rg_victim_way_43_THEN_cache_ram_cword_ETC___d719,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450,
		 x__h6304,
		 y__h19050,
		 y__h6305,
		 y__h6358;
  wire [127 : 0] b__h37668, x__h31743;
  wire [63 : 0] _theResult___fst__h40582,
		cline_fabric_addr__h36578,
		result_lo__h31778,
		result_lo__h31813,
		result_lo__h31846,
		result_lo__h31879,
		result_lo__h31912,
		result_lo__h31945,
		result_lo__h31978,
		result_lo__h32011,
		result_lo__h32044,
		result_lo__h32077,
		result_lo__h32110,
		result_lo__h32143,
		result_lo__h32176,
		result_lo__h32209,
		result_lo__h32242,
		result_lo__h32275,
		result_lo__h32330,
		result_lo__h32363,
		result_lo__h32396,
		result_lo__h32429,
		result_lo__h32462,
		result_lo__h32495,
		result_lo__h32528,
		result_lo__h32561,
		result_lo__h32608,
		result_lo__h32641,
		result_lo__h32674,
		result_lo__h32707,
		result_lo__h40650,
		result_lo__h40683,
		result_lo__h40716,
		result_lo__h40749,
		result_lo__h40782,
		result_lo__h40815,
		result_lo__h40848,
		result_lo__h40881,
		result_lo__h40944,
		result_lo__h40977,
		result_lo__h41010,
		result_lo__h41043,
		result_lo__h41094,
		result_lo__h41127,
		word64__h3071;
  wire [31 : 0] cache_masterPortShim_rffD_OUT_BITS_35_TO_4__q3,
		cache_masterPortShim_rffD_OUT_BITS_67_TO_36__q10,
		cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q17,
		cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q24,
		cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q32,
		cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q38;
  wire [15 : 0] cache_masterPortShim_rffD_OUT_BITS_19_TO_4__q2,
		cache_masterPortShim_rffD_OUT_BITS_35_TO_20__q6,
		cache_masterPortShim_rffD_OUT_BITS_51_TO_36__q9,
		cache_masterPortShim_rffD_OUT_BITS_67_TO_52__q13,
		cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q16,
		cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q20,
		cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q23,
		cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q26,
		cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q30,
		cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q34,
		cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q37,
		cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q41;
  wire [7 : 0] cache_masterPortShim_rffD_OUT_BITS_11_TO_4__q1,
	       cache_masterPortShim_rffD_OUT_BITS_19_TO_12__q5,
	       cache_masterPortShim_rffD_OUT_BITS_27_TO_20__q4,
	       cache_masterPortShim_rffD_OUT_BITS_35_TO_28__q7,
	       cache_masterPortShim_rffD_OUT_BITS_43_TO_36__q8,
	       cache_masterPortShim_rffD_OUT_BITS_51_TO_44__q11,
	       cache_masterPortShim_rffD_OUT_BITS_59_TO_52__q12,
	       cache_masterPortShim_rffD_OUT_BITS_67_TO_60__q14,
	       cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q15,
	       cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q18,
	       cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q19,
	       cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q21,
	       cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q22,
	       cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q25,
	       cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q27,
	       cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q28,
	       cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q29,
	       cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q31,
	       cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q33,
	       cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q35,
	       cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q36,
	       cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q39,
	       cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q40,
	       cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q42,
	       mem_req_wr_addr_awlen__h3053,
	       strobe64__h3072,
	       strobe64__h3076,
	       strobe64__h3080,
	       strobe64__h3084;
  wire [5 : 0] new_exc_code___1__h36444,
	       shift_bits__h2843,
	       y_avValue_snd__h36412;
  wire [4 : 0] IF_cache_ram_state_and_ctag_cset_b_read__32_BI_ETC___d621,
	       IF_cache_soc_map_m_is_mem_addr_cache_rg_addr_0_ETC___d623;
  wire [3 : 0] b__h36494;
  wire [1 : 0] tmp__h36740, tmp__h36741;
  wire NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655,
       NOT_cache_ram_state_and_ctag_cset_b_read__32_B_ETC___d304,
       NOT_cache_rg_addr_01_ULT_2147483648_02_52_AND__ETC___d159,
       NOT_cache_rg_addr_01_ULT_2147483648_02_52_AND__ETC___d612,
       NOT_cache_rg_addr_01_ULT_2147483648_02_52_AND__ETC___d617,
       NOT_cache_rg_op_08_09_AND_cache_ram_state_and__ETC___d317,
       NOT_cache_w_req_width_code_wget__39_EQ_0b0_59__ETC___d979,
       _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740,
       a__h33348,
       cache_cfg_verbosity_read__0_ULE_1___d61,
       cache_dw_commit_whas__10_AND_cache_dw_commit_w_ETC___d156,
       cache_ram_state_and_ctag_cset_b_read__32_BITS__ETC___d146,
       cache_ram_state_and_ctag_cset_b_read__32_BITS__ETC___d148,
       cache_ram_state_and_ctag_cset_b_read__32_BIT_5_ETC___d296,
       cache_rg_addr_01_ULT_2147483648___d102,
       cache_rg_addr_01_ULT_2155872256___d103,
       cache_rg_op_08_AND_cache_dw_commit_whas__10_AN_ETC___d298,
       cache_rg_op_08_AND_cache_dw_commit_whas__10_AN_ETC___d310,
       cache_soc_map_m_is_mem_addr_cache_rg_addr_01_0_ETC___d314,
       cache_w_req_width_code_wget__39_EQ_0b0_59_OR_c_ETC___d1000,
       cache_w_req_width_code_wget__39_EQ_0b0_59_OR_c_ETC___d995,
       mem_req_wr_second_data_wuser__h2955;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // action method commit
  assign CAN_FIRE_commit = 1'd1 ;
  assign WILL_FIRE_commit = EN_commit ;

  // value method valid
  assign valid = cache_dw_valid$whas && cache_dw_valid$wget ;

  // value method addr
  assign addr = cache_rg_addr ;

  // value method cword_fst
  assign cword_fst =
	     cache_dw_output_ld_val$whas && cache_dw_output_ld_val$wget[128] ;

  // value method cword_snd
  assign cword_snd = cache_dw_output_ld_val$wget[127:0] ;

  // value method st_amo_val_fst
  assign st_amo_val_fst =
	     cache_dw_output_st_amo_val$whas &&
	     cache_dw_output_st_amo_val$wget[128] ;

  // value method st_amo_val_snd
  assign st_amo_val_snd = cache_dw_output_st_amo_val$wget[127:0] ;

  // value method exc
  assign exc = CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // value method exc_code
  assign exc_code = cache_rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_aw_canPeek
  assign mem_master_aw_canPeek = cache_masterPortShim_awff$EMPTY_N ;

  // value method mem_master_aw_peek
  assign mem_master_aw_peek = cache_masterPortShim_awff$D_OUT ;
  assign RDY_mem_master_aw_peek = cache_masterPortShim_awff$EMPTY_N ;

  // action method mem_master_aw_drop
  assign RDY_mem_master_aw_drop = cache_masterPortShim_awff$EMPTY_N ;
  assign CAN_FIRE_mem_master_aw_drop = cache_masterPortShim_awff$EMPTY_N ;
  assign WILL_FIRE_mem_master_aw_drop = EN_mem_master_aw_drop ;

  // value method mem_master_w_canPeek
  assign mem_master_w_canPeek = cache_masterPortShim_wff$EMPTY_N ;

  // value method mem_master_w_peek
  assign mem_master_w_peek = cache_masterPortShim_wff$D_OUT ;
  assign RDY_mem_master_w_peek = cache_masterPortShim_wff$EMPTY_N ;

  // action method mem_master_w_drop
  assign RDY_mem_master_w_drop = cache_masterPortShim_wff$EMPTY_N ;
  assign CAN_FIRE_mem_master_w_drop = cache_masterPortShim_wff$EMPTY_N ;
  assign WILL_FIRE_mem_master_w_drop = EN_mem_master_w_drop ;

  // value method mem_master_b_canPut
  assign mem_master_b_canPut = cache_masterPortShim_bff$FULL_N ;

  // action method mem_master_b_put
  assign RDY_mem_master_b_put = cache_masterPortShim_bff$FULL_N ;
  assign CAN_FIRE_mem_master_b_put = cache_masterPortShim_bff$FULL_N ;
  assign WILL_FIRE_mem_master_b_put = EN_mem_master_b_put ;

  // value method mem_master_ar_canPeek
  assign mem_master_ar_canPeek = cache_masterPortShim_arff$EMPTY_N ;

  // value method mem_master_ar_peek
  assign mem_master_ar_peek = cache_masterPortShim_arff$D_OUT ;
  assign RDY_mem_master_ar_peek = cache_masterPortShim_arff$EMPTY_N ;

  // action method mem_master_ar_drop
  assign RDY_mem_master_ar_drop = cache_masterPortShim_arff$EMPTY_N ;
  assign CAN_FIRE_mem_master_ar_drop = cache_masterPortShim_arff$EMPTY_N ;
  assign WILL_FIRE_mem_master_ar_drop = EN_mem_master_ar_drop ;

  // value method mem_master_r_canPut
  assign mem_master_r_canPut = cache_masterPortShim_rff$FULL_N ;

  // action method mem_master_r_put
  assign RDY_mem_master_r_put = cache_masterPortShim_rff$FULL_N ;
  assign CAN_FIRE_mem_master_r_put = cache_masterPortShim_rff$FULL_N ;
  assign WILL_FIRE_mem_master_r_put = EN_mem_master_r_put ;

  // action method ma_ddr4_ready
  assign RDY_ma_ddr4_ready = 1'd1 ;
  assign CAN_FIRE_ma_ddr4_ready = 1'd1 ;
  assign WILL_FIRE_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // value method mv_status
  assign mv_status = cache_rg_wr_rsp_err ? 8'd1 : 8'd0 ;

  // submodule cache_f_fabric_second_write_reqs
  FIFO1 #(.width(32'd74),
	  .guarded(1'd1)) cache_f_fabric_second_write_reqs(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(cache_f_fabric_second_write_reqs$D_IN),
							   .ENQ(cache_f_fabric_second_write_reqs$ENQ),
							   .DEQ(cache_f_fabric_second_write_reqs$DEQ),
							   .CLR(cache_f_fabric_second_write_reqs$CLR),
							   .D_OUT(cache_f_fabric_second_write_reqs$D_OUT),
							   .FULL_N(cache_f_fabric_second_write_reqs$FULL_N),
							   .EMPTY_N(cache_f_fabric_second_write_reqs$EMPTY_N));

  // submodule cache_f_fabric_write_reqs
  FIFO2 #(.width(32'd196),
	  .guarded(1'd1)) cache_f_fabric_write_reqs(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(cache_f_fabric_write_reqs$D_IN),
						    .ENQ(cache_f_fabric_write_reqs$ENQ),
						    .DEQ(cache_f_fabric_write_reqs$DEQ),
						    .CLR(cache_f_fabric_write_reqs$CLR),
						    .D_OUT(cache_f_fabric_write_reqs$D_OUT),
						    .FULL_N(cache_f_fabric_write_reqs$FULL_N),
						    .EMPTY_N(cache_f_fabric_write_reqs$EMPTY_N));

  // submodule cache_f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(1'd1)) cache_f_reset_reqs(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(cache_f_reset_reqs$D_IN),
							    .ENQ(cache_f_reset_reqs$ENQ),
							    .DEQ(cache_f_reset_reqs$DEQ),
							    .CLR(cache_f_reset_reqs$CLR),
							    .D_OUT(cache_f_reset_reqs$D_OUT),
							    .FULL_N(cache_f_reset_reqs$FULL_N),
							    .EMPTY_N(cache_f_reset_reqs$EMPTY_N));

  // submodule cache_f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(1'd1)) cache_f_reset_rsps(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(cache_f_reset_rsps$D_IN),
							    .ENQ(cache_f_reset_rsps$ENQ),
							    .DEQ(cache_f_reset_rsps$DEQ),
							    .CLR(cache_f_reset_rsps$CLR),
							    .D_OUT(cache_f_reset_rsps$D_OUT),
							    .FULL_N(cache_f_reset_rsps$FULL_N),
							    .EMPTY_N(cache_f_reset_rsps$EMPTY_N));

  // submodule cache_masterPortShim_arff
  FIFO2 #(.width(32'd97),
	  .guarded(1'd1)) cache_masterPortShim_arff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(cache_masterPortShim_arff$D_IN),
						    .ENQ(cache_masterPortShim_arff$ENQ),
						    .DEQ(cache_masterPortShim_arff$DEQ),
						    .CLR(cache_masterPortShim_arff$CLR),
						    .D_OUT(cache_masterPortShim_arff$D_OUT),
						    .FULL_N(cache_masterPortShim_arff$FULL_N),
						    .EMPTY_N(cache_masterPortShim_arff$EMPTY_N));

  // submodule cache_masterPortShim_awff
  FIFO2 #(.width(32'd97),
	  .guarded(1'd1)) cache_masterPortShim_awff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(cache_masterPortShim_awff$D_IN),
						    .ENQ(cache_masterPortShim_awff$ENQ),
						    .DEQ(cache_masterPortShim_awff$DEQ),
						    .CLR(cache_masterPortShim_awff$CLR),
						    .D_OUT(cache_masterPortShim_awff$D_OUT),
						    .FULL_N(cache_masterPortShim_awff$FULL_N),
						    .EMPTY_N(cache_masterPortShim_awff$EMPTY_N));

  // submodule cache_masterPortShim_bff
  FIFO2 #(.width(32'd6), .guarded(1'd1)) cache_masterPortShim_bff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(cache_masterPortShim_bff$D_IN),
								  .ENQ(cache_masterPortShim_bff$ENQ),
								  .DEQ(cache_masterPortShim_bff$DEQ),
								  .CLR(cache_masterPortShim_bff$CLR),
								  .D_OUT(cache_masterPortShim_bff$D_OUT),
								  .FULL_N(cache_masterPortShim_bff$FULL_N),
								  .EMPTY_N(cache_masterPortShim_bff$EMPTY_N));

  // submodule cache_masterPortShim_rff
  FIFO2 #(.width(32'd72),
	  .guarded(1'd1)) cache_masterPortShim_rff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(cache_masterPortShim_rff$D_IN),
						   .ENQ(cache_masterPortShim_rff$ENQ),
						   .DEQ(cache_masterPortShim_rff$DEQ),
						   .CLR(cache_masterPortShim_rff$CLR),
						   .D_OUT(cache_masterPortShim_rff$D_OUT),
						   .FULL_N(cache_masterPortShim_rff$FULL_N),
						   .EMPTY_N(cache_masterPortShim_rff$EMPTY_N));

  // submodule cache_masterPortShim_wff
  FIFO2 #(.width(32'd74),
	  .guarded(1'd1)) cache_masterPortShim_wff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(cache_masterPortShim_wff$D_IN),
						   .ENQ(cache_masterPortShim_wff$ENQ),
						   .DEQ(cache_masterPortShim_wff$DEQ),
						   .CLR(cache_masterPortShim_wff$CLR),
						   .D_OUT(cache_masterPortShim_wff$D_OUT),
						   .FULL_N(cache_masterPortShim_wff$FULL_N),
						   .EMPTY_N(cache_masterPortShim_wff$EMPTY_N));

  // submodule cache_ram_cword_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd258),
	  .MEMSIZE(9'd256)) cache_ram_cword_set(.CLKA(CLK),
						.CLKB(CLK),
						.ADDRA(cache_ram_cword_set$ADDRA),
						.ADDRB(cache_ram_cword_set$ADDRB),
						.DIA(cache_ram_cword_set$DIA),
						.DIB(cache_ram_cword_set$DIB),
						.WEA(cache_ram_cword_set$WEA),
						.WEB(cache_ram_cword_set$WEB),
						.ENA(cache_ram_cword_set$ENA),
						.ENB(cache_ram_cword_set$ENB),
						.DOA(),
						.DOB(cache_ram_cword_set$DOB));

  // submodule cache_ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd106),
	  .MEMSIZE(7'd64)) cache_ram_state_and_ctag_cset(.CLKA(CLK),
							 .CLKB(CLK),
							 .ADDRA(cache_ram_state_and_ctag_cset$ADDRA),
							 .ADDRB(cache_ram_state_and_ctag_cset$ADDRB),
							 .DIA(cache_ram_state_and_ctag_cset$DIA),
							 .DIB(cache_ram_state_and_ctag_cset$DIB),
							 .WEA(cache_ram_state_and_ctag_cset$WEA),
							 .WEB(cache_ram_state_and_ctag_cset$WEB),
							 .ENA(cache_ram_state_and_ctag_cset$ENA),
							 .ENB(cache_ram_state_and_ctag_cset$ENB),
							 .DOA(),
							 .DOB(cache_ram_state_and_ctag_cset$DOB));

  // submodule cache_soc_map
  mkSoC_Map cache_soc_map(.CLK(CLK),
			  .RST_N(RST_N),
			  .m_is_IO_addr_addr(cache_soc_map$m_is_IO_addr_addr),
			  .m_is_mem_addr_addr(cache_soc_map$m_is_mem_addr_addr),
			  .m_is_near_mem_IO_addr_addr(cache_soc_map$m_is_near_mem_IO_addr_addr),
			  .m_near_mem_io_addr_range(),
			  .m_plic_addr_range(),
			  .m_uart0_addr_range(),
			  .m_boot_rom_addr_range(),
			  .m_mem0_controller_addr_range(),
			  .m_tcm_addr_range(),
			  .m_is_mem_addr(cache_soc_map$m_is_mem_addr),
			  .m_is_IO_addr(),
			  .m_is_near_mem_IO_addr(),
			  .m_pc_reset_value(),
			  .m_mtvec_reset_value(),
			  .m_nmivec_reset_value(),
			  .m_pcc_reset_value(),
			  .m_ddc_reset_value(),
			  .m_mtcc_reset_value(),
			  .m_mepcc_reset_value());

  // rule RL_cache_rl_fabric_send_second_write_req
  assign CAN_FIRE_RL_cache_rl_fabric_send_second_write_req =
	     cache_masterPortShim_wff$FULL_N &&
	     cache_f_fabric_second_write_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_cache_rl_fabric_send_second_write_req =
	     CAN_FIRE_RL_cache_rl_fabric_send_second_write_req ;

  // rule RL_cache_rl_fabric_send_write_req
  assign CAN_FIRE_RL_cache_rl_fabric_send_write_req =
	     cache_ctr_wr_rsps_pending_crg != 4'd15 &&
	     cache_masterPortShim_wff$FULL_N &&
	     cache_f_fabric_write_reqs$EMPTY_N &&
	     cache_masterPortShim_awff$FULL_N &&
	     (cache_f_fabric_write_reqs$D_OUT[195:193] != 3'b100 ||
	      cache_f_fabric_second_write_reqs$FULL_N) ;
  assign WILL_FIRE_RL_cache_rl_fabric_send_write_req =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req &&
	     !WILL_FIRE_RL_cache_rl_fabric_send_second_write_req ;

  // rule RL_cache_rl_reset
  assign CAN_FIRE_RL_cache_rl_reset =
	     (cache_rg_cset_in_cache != 6'd63 ||
	      cache_f_reset_reqs$EMPTY_N && cache_f_reset_rsps$FULL_N) &&
	     cache_rg_state == 5'd1 ;
  assign WILL_FIRE_RL_cache_rl_reset = CAN_FIRE_RL_cache_rl_reset ;

  // rule RL_cache_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     (cache_rg_addr_01_ULT_2147483648___d102 ||
	      !cache_rg_addr_01_ULT_2155872256___d103 ||
	      !cache_soc_map$m_is_mem_addr ||
	      !cache_rg_op ||
	      !EN_commit ||
	      cache_f_fabric_write_reqs$FULL_N) &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_ddr4_ready &&
	     cache_rg_state == 5'd3 ;
  assign WILL_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // rule RL_cache_rl_start_cache_refill
  assign CAN_FIRE_RL_cache_rl_start_cache_refill =
	     cache_masterPortShim_arff$FULL_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 5'd9 &&
	     b__h36494 == 4'd0 ;
  assign WILL_FIRE_RL_cache_rl_start_cache_refill =
	     CAN_FIRE_RL_cache_rl_start_cache_refill ;

  // rule RL_cache_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     cache_masterPortShim_rff$EMPTY_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 5'd10 ;
  assign WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop ;

  // rule RL_cache_rl_rereq
  assign CAN_FIRE_RL_cache_rl_rereq =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 5'd11 ;
  assign WILL_FIRE_RL_cache_rl_rereq = CAN_FIRE_RL_cache_rl_rereq ;

  // rule RL_cache_rl_ST_AMO_response
  assign CAN_FIRE_RL_cache_rl_ST_AMO_response = cache_rg_state == 5'd12 ;
  assign WILL_FIRE_RL_cache_rl_ST_AMO_response =
	     CAN_FIRE_RL_cache_rl_ST_AMO_response ;

  // rule RL_cache_rl_io_read_req
  assign CAN_FIRE_RL_cache_rl_io_read_req =
	     MUX_cache_rg_state$write_1__SEL_5 ;
  assign WILL_FIRE_RL_cache_rl_io_read_req =
	     MUX_cache_rg_state$write_1__SEL_5 ;

  // rule RL_cache_rl_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_read_rsp =
	     MUX_cache_rg_state$write_1__PSEL_4 ;
  assign WILL_FIRE_RL_cache_rl_io_read_rsp =
	     MUX_cache_rg_state$write_1__PSEL_4 ;

  // rule RL_cache_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_maintain_io_read_rsp =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 5'd15 ;
  assign WILL_FIRE_RL_cache_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_maintain_io_read_rsp ;

  // rule RL_cache_rl_io_write_req
  assign CAN_FIRE_RL_cache_rl_io_write_req =
	     MUX_cache_rg_state$write_1__SEL_3 ;
  assign WILL_FIRE_RL_cache_rl_io_write_req =
	     MUX_cache_rg_state$write_1__SEL_3 ;

  // rule RL_cache_rl_discard_write_rsp
  assign CAN_FIRE_RL_cache_rl_discard_write_rsp =
	     b__h36494 != 4'd0 && cache_masterPortShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_cache_rl_discard_write_rsp =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ;

  // rule RL_cache_rl_start_reset
  assign CAN_FIRE_RL_cache_rl_start_reset =
	     cache_f_reset_reqs$EMPTY_N && cache_rg_state != 5'd1 ;
  assign WILL_FIRE_RL_cache_rl_start_reset =
	     CAN_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_drive_exception_rsp
  assign CAN_FIRE_RL_cache_rl_drive_exception_rsp =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 5'd4 ;
  assign WILL_FIRE_RL_cache_rl_drive_exception_rsp =
	     CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // rule RL_cache_do_req
  assign CAN_FIRE_RL_cache_do_req = EN_req && !cache_f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_cache_do_req =
	     CAN_FIRE_RL_cache_do_req && !WILL_FIRE_RL_cache_rl_reset ;

  // rule RL_cache_do_reset_req
  assign CAN_FIRE_RL_cache_do_reset_req =
	     cache_f_reset_reqs$FULL_N && cache_rw_reset_req$whas ;
  assign WILL_FIRE_RL_cache_do_reset_req = CAN_FIRE_RL_cache_do_reset_req ;

  // rule __me_check_15
  assign CAN_FIRE___me_check_15 = 1'b1 ;
  assign WILL_FIRE___me_check_15 = 1'b1 ;

  // inputs to muxes for submodule ports
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  assign MUX_cache_dw_valid$wset_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     !cache_rg_addr_01_ULT_2147483648___d102 &&
	     cache_rg_addr_01_ULT_2155872256___d103 &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_08_09_AND_cache_ram_state_and__ETC___d317 ;
  assign MUX_cache_dw_valid$wset_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[1] &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ;
  assign MUX_cache_f_fabric_write_reqs$enq_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     !cache_rg_addr_01_ULT_2147483648___d102 &&
	     cache_rg_addr_01_ULT_2155872256___d103 &&
	     cache_soc_map_m_is_mem_addr_cache_rg_addr_01_0_ETC___d314 ;
  assign MUX_cache_ram_cword_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     NOT_cache_rg_addr_01_ULT_2147483648_02_52_AND__ETC___d159 ;
  assign MUX_cache_ram_cword_set$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_do_req &&
	     (cache_w_req_width_code_wget__39_EQ_0b0_59_OR_c_ETC___d995 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) ;
  assign MUX_cache_ram_cword_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] != 2'd3 ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_do_req &&
	     NOT_cache_w_req_width_code_wget__39_EQ_0b0_59__ETC___d979 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ;
  assign MUX_cache_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[1] &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ;
  assign MUX_cache_rg_lower_word64_full$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (cache_rg_lower_word64_full ||
	      !cache_masterPortShim_rff$D_OUT[1]) &&
	     (cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ||
	      !cache_masterPortShim_rff$D_OUT[1]) ;
  assign MUX_cache_rg_lower_word64_full$write_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;
  assign MUX_cache_rg_pa$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     !cache_rg_addr_01_ULT_2147483648___d102 &&
	     cache_rg_addr_01_ULT_2155872256___d103 ;
  assign MUX_cache_rg_state$write_1__SEL_3 =
	     cache_f_fabric_write_reqs$FULL_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 5'd13 &&
	     cache_rg_op ;
  assign MUX_cache_rg_state$write_1__PSEL_4 =
	     cache_masterPortShim_rff$EMPTY_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 5'd14 ;
  assign MUX_cache_rg_state$write_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (!cache_rg_lower_word64_full &&
	      cache_masterPortShim_rff$D_OUT[1] ||
	      cache_masterPortShim_rff$D_OUT[1] &&
	      cache_masterPortShim_rff$D_OUT[3:2] != 2'd0) ;
  assign MUX_cache_rg_state$write_1__SEL_5 =
	     cache_masterPortShim_arff$FULL_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 5'd13 &&
	     !cache_rg_op &&
	     b__h36494 == 4'd0 ;
  assign MUX_cache_rg_state$write_1__SEL_7 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] == 2'd3 ;
  assign MUX_cache_rg_state$write_1__SEL_10 =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_1 =
	     { cache_rg_width_code == 3'd4 &&
	       cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[128],
	       x__h31743 } ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_3 =
	     { cache_rg_allow_cap && cache_rg_ld_val[128],
	       cache_rg_ld_val[127:0] } ;
  assign MUX_cache_f_fabric_write_reqs$enq_1__VAL_1 =
	     { cache_rg_width_code, cache_rg_addr, cache_rg_st_amo_val } ;
  assign MUX_cache_f_fabric_write_reqs$enq_1__VAL_2 =
	     { cache_rg_width_code, cache_rg_pa, cache_rg_st_amo_val } ;
  assign MUX_cache_masterPortShim_arff$enq_1__VAL_1 =
	     { 4'd0, cline_fabric_addr__h36578, 29'd15532032 } ;
  assign MUX_cache_masterPortShim_arff$enq_1__VAL_2 =
	     { 4'd0,
	       cache_rg_pa,
	       _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 ?
		 { 8'd0, size_val__h40049, 18'd65536 } :
		 29'd2949120 } ;
  assign MUX_cache_masterPortShim_wff$enq_1__VAL_2 =
	     { mem_req_wr_data_wdata__h3127,
	       mem_req_wr_data_wstrb__h3128,
	       cache_f_fabric_write_reqs$D_OUT[195:193] != 3'b100,
	       mem_req_wr_second_data_wuser__h2955 } ;
  assign MUX_cache_ram_cword_set$a_put_3__VAL_1 =
	     { IF_cache_ram_state_and_ctag_cset_b_read__32_BI_ETC___d291,
	       IF_NOT_cache_ram_state_and_ctag_cset_b_read__3_ETC___d294 } ;
  assign MUX_cache_ram_cword_set$a_put_3__VAL_2 =
	     cache_rg_victim_way ?
	       { cache_masterPortShim_rff$D_OUT[0],
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_lower_word64,
		 cache_ram_cword_set$DOB[128:0] } :
	       { cache_ram_cword_set$DOB[257:129],
		 cache_masterPortShim_rff$D_OUT[0],
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_lower_word64 } ;
  assign MUX_cache_ram_cword_set$b_put_2__VAL_2 =
	     cache_rg_cset_cword_in_cache + 8'd1 ;
  assign MUX_cache_ram_cword_set$b_put_2__VAL_4 =
	     { cache_rg_addr[11:6], 2'd0 } ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 =
	     { cache_rg_victim_way || cache_ram_state_and_ctag_cset$DOB[105],
	       cache_rg_victim_way ?
		 cache_rg_pa[63:12] :
		 cache_ram_state_and_ctag_cset$DOB[104:53],
	       !cache_rg_victim_way || cache_ram_state_and_ctag_cset$DOB[52],
	       cache_rg_victim_way ?
		 cache_ram_state_and_ctag_cset$DOB[51:0] :
		 cache_rg_pa[63:12] } ;
  assign MUX_cache_rg_cset_in_cache$write_1__VAL_1 =
	     cache_rg_cset_in_cache + 6'd1 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_1 = req_op ? 6'd6 : 6'd4 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_3 = cache_rg_op ? 6'd7 : 6'd5 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_4 =
	     EN_commit ? y_avValue_snd__h36412 : 6'd28 ;
  assign MUX_cache_rg_state$write_1__VAL_1 =
	     (NOT_cache_w_req_width_code_wget__39_EQ_0b0_59__ETC___d979 &&
	      (req_width_code != 3'b100 || req_addr[3:0] != 4'b0)) ?
	       5'd4 :
	       5'd3 ;
  assign MUX_cache_rg_state$write_1__VAL_4 =
	     (!cache_rg_lower_word64_full &&
	      cache_masterPortShim_rff$D_OUT[1]) ?
	       ((cache_masterPortShim_rff$D_OUT[3:2] == 2'd0) ?
		  5'd15 :
		  5'd4) :
	       5'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_7 =
	     (cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	      cache_rg_error_during_refill) ?
	       5'd4 :
	       5'd11 ;
  assign MUX_cache_rg_state$write_1__VAL_9 =
	     (!EN_commit || cache_rg_addr_01_ULT_2147483648___d102 ||
	      !cache_rg_addr_01_ULT_2155872256___d103) ?
	       5'd4 :
	       IF_cache_soc_map_m_is_mem_addr_cache_rg_addr_0_ETC___d623 ;

  // inlined wires
  assign cache_rw_reset_req$whas =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign cache_dw_valid$wget =
	     !MUX_cache_dw_valid$wset_1__SEL_1 || EN_commit ;
  assign cache_dw_valid$whas =
	     MUX_cache_dw_valid$wset_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[1] &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  always@(MUX_cache_dw_valid$wset_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 or
	  MUX_cache_dw_valid$wset_1__SEL_2 or
	  cache_rg_ld_val$D_IN or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_dw_valid$wset_1__SEL_1:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_1;
      MUX_cache_dw_valid$wset_1__SEL_2:
	  cache_dw_output_ld_val$wget = cache_rg_ld_val$D_IN;
      MUX_cache_dw_output_ld_val$wset_1__SEL_3:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_3;
      default: cache_dw_output_ld_val$wget =
		   129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_dw_output_ld_val$whas =
	     MUX_cache_dw_valid$wset_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[1] &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  assign cache_dw_output_st_amo_val$wget =
	     MUX_cache_dw_valid$wset_1__SEL_1 ? 129'd0 : cache_rg_st_amo_val ;
  assign cache_dw_output_st_amo_val$whas =
	     MUX_cache_dw_valid$wset_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  assign cache_ctr_wr_rsps_pending_crg$port0__write_1 =
	     cache_ctr_wr_rsps_pending_crg + 4'd1 ;
  assign cache_ctr_wr_rsps_pending_crg$port1__read =
	     WILL_FIRE_RL_cache_rl_fabric_send_write_req ?
	       cache_ctr_wr_rsps_pending_crg$port0__write_1 :
	       cache_ctr_wr_rsps_pending_crg ;
  assign cache_ctr_wr_rsps_pending_crg$port1__write_1 = b__h36494 - 4'd1 ;
  assign cache_ctr_wr_rsps_pending_crg$port2__read =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ?
	       cache_ctr_wr_rsps_pending_crg$port1__write_1 :
	       cache_ctr_wr_rsps_pending_crg$port1__read ;
  assign cache_ctr_wr_rsps_pending_crg$EN_port2__write =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;
  assign cache_ctr_wr_rsps_pending_crg$port3__read =
	     cache_ctr_wr_rsps_pending_crg$EN_port2__write ?
	       4'd0 :
	       cache_ctr_wr_rsps_pending_crg$port2__read ;

  // register cache_cfg_verbosity
  assign cache_cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cache_cfg_verbosity$EN = EN_set_verbosity ;

  // register cache_ctr_wr_rsps_pending_crg
  assign cache_ctr_wr_rsps_pending_crg$D_IN =
	     cache_ctr_wr_rsps_pending_crg$port3__read ;
  assign cache_ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register cache_rg_addr
  assign cache_rg_addr$D_IN = req_addr ;
  assign cache_rg_addr$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_allow_cap
  assign cache_rg_allow_cap$D_IN = 1'd1 ;
  assign cache_rg_allow_cap$EN = MUX_cache_rg_pa$write_1__SEL_2 ;

  // register cache_rg_cset_cword_in_cache
  assign cache_rg_cset_cword_in_cache$D_IN =
	     MUX_cache_ram_cword_set$b_put_1__SEL_2 ?
	       MUX_cache_ram_cword_set$b_put_2__VAL_2 :
	       MUX_cache_ram_cword_set$b_put_2__VAL_4 ;
  assign cache_rg_cset_cword_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_cset_in_cache
  assign cache_rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_cache_rl_reset ?
	       MUX_cache_rg_cset_in_cache$write_1__VAL_1 :
	       6'd0 ;
  assign cache_rg_cset_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_reset ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_ddr4_ready
  assign cache_rg_ddr4_ready$D_IN = 1'd1 ;
  assign cache_rg_ddr4_ready$EN = EN_ma_ddr4_ready ;

  // register cache_rg_error_during_refill
  assign cache_rg_error_during_refill$D_IN =
	     MUX_cache_rg_exc_code$write_1__SEL_3 ;
  assign cache_rg_error_during_refill$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_exc_code
  always@(MUX_cache_rg_exc_code$write_1__SEL_1 or
	  MUX_cache_rg_exc_code$write_1__VAL_1 or
	  MUX_cache_rg_exc_code$write_1__SEL_2 or
	  MUX_cache_rg_exc_code$write_1__SEL_3 or
	  MUX_cache_rg_exc_code$write_1__VAL_3 or
	  WILL_FIRE_RL_cache_rl_probe_and_immed_rsp or
	  MUX_cache_rg_exc_code$write_1__VAL_4)
  case (1'b1)
    MUX_cache_rg_exc_code$write_1__SEL_1:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_1;
    MUX_cache_rg_exc_code$write_1__SEL_2: cache_rg_exc_code$D_IN = 6'd5;
    MUX_cache_rg_exc_code$write_1__SEL_3:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_3;
    WILL_FIRE_RL_cache_rl_probe_and_immed_rsp:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_4;
    default: cache_rg_exc_code$D_IN = 6'b101010 /* unspecified value */ ;
  endcase
  assign cache_rg_exc_code$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_do_req &&
	     NOT_cache_w_req_width_code_wget__39_EQ_0b0_59__ETC___d979 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[1] &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // register cache_rg_is_unsigned
  assign cache_rg_is_unsigned$D_IN = req_is_unsigned ;
  assign cache_rg_is_unsigned$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_ld_val
  assign cache_rg_ld_val$D_IN =
	     (!cache_rg_lower_word64_full &&
	      cache_masterPortShim_rff$D_OUT[1]) ?
	       { 65'd0, _theResult___fst__h40518 } :
	       { 1'd0, b__h37668 } ;
  assign cache_rg_ld_val$EN =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (!cache_rg_lower_word64_full &&
	      cache_masterPortShim_rff$D_OUT[1] ||
	      cache_masterPortShim_rff$D_OUT[1] &&
	      cache_masterPortShim_rff$D_OUT[3:2] == 2'd0) ;

  // register cache_rg_lower_word64
  assign cache_rg_lower_word64$D_IN = cache_masterPortShim_rff$D_OUT[67:4] ;
  assign cache_rg_lower_word64$EN =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     !cache_masterPortShim_rff$D_OUT[1] ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     !cache_rg_lower_word64_full ;

  // register cache_rg_lower_word64_full
  always@(MUX_cache_rg_lower_word64_full$write_1__SEL_1 or
	  cache_masterPortShim_rff$D_OUT or
	  WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop or
	  cache_rg_lower_word64_full or
	  MUX_cache_rg_lower_word64_full$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_rg_lower_word64_full$write_1__SEL_1:
	  cache_rg_lower_word64_full$D_IN =
	      !cache_masterPortShim_rff$D_OUT[1];
      WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop:
	  cache_rg_lower_word64_full$D_IN = !cache_rg_lower_word64_full;
      MUX_cache_rg_lower_word64_full$write_1__SEL_3:
	  cache_rg_lower_word64_full$D_IN = 1'd0;
      default: cache_rg_lower_word64_full$D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign cache_rg_lower_word64_full$EN =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (cache_rg_lower_word64_full ||
	      !cache_masterPortShim_rff$D_OUT[1]) &&
	     (cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ||
	      !cache_masterPortShim_rff$D_OUT[1]) ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_op
  assign cache_rg_op$D_IN = req_op ;
  assign cache_rg_op$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_pa
  assign cache_rg_pa$D_IN =
	     WILL_FIRE_RL_cache_do_req ? req_addr : cache_rg_addr ;
  assign cache_rg_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     !cache_rg_addr_01_ULT_2147483648___d102 &&
	     cache_rg_addr_01_ULT_2155872256___d103 ||
	     WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_st_amo_val
  assign cache_rg_st_amo_val$D_IN = req_st_value ;
  assign cache_rg_st_amo_val$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_state
  always@(WILL_FIRE_RL_cache_do_req or
	  MUX_cache_rg_state$write_1__VAL_1 or
	  WILL_FIRE_RL_cache_rl_start_reset or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  MUX_cache_rg_state$write_1__SEL_4 or
	  MUX_cache_rg_state$write_1__VAL_4 or
	  WILL_FIRE_RL_cache_rl_io_read_req or
	  WILL_FIRE_RL_cache_rl_rereq or
	  MUX_cache_rg_state$write_1__SEL_7 or
	  MUX_cache_rg_state$write_1__VAL_7 or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  WILL_FIRE_RL_cache_rl_probe_and_immed_rsp or
	  MUX_cache_rg_state$write_1__VAL_9 or
	  MUX_cache_rg_state$write_1__SEL_10)
  case (1'b1)
    WILL_FIRE_RL_cache_do_req:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_1;
    WILL_FIRE_RL_cache_rl_start_reset: cache_rg_state$D_IN = 5'd1;
    WILL_FIRE_RL_cache_rl_io_write_req: cache_rg_state$D_IN = 5'd12;
    MUX_cache_rg_state$write_1__SEL_4:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_4;
    WILL_FIRE_RL_cache_rl_io_read_req: cache_rg_state$D_IN = 5'd14;
    WILL_FIRE_RL_cache_rl_rereq: cache_rg_state$D_IN = 5'd3;
    MUX_cache_rg_state$write_1__SEL_7:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_7;
    WILL_FIRE_RL_cache_rl_start_cache_refill: cache_rg_state$D_IN = 5'd10;
    WILL_FIRE_RL_cache_rl_probe_and_immed_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_9;
    MUX_cache_rg_state$write_1__SEL_10: cache_rg_state$D_IN = 5'd2;
    default: cache_rg_state$D_IN = 5'b01010 /* unspecified value */ ;
  endcase
  assign cache_rg_state$EN =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] == 2'd3 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (!cache_rg_lower_word64_full &&
	      cache_masterPortShim_rff$D_OUT[1] ||
	      cache_masterPortShim_rff$D_OUT[1] &&
	      cache_masterPortShim_rff$D_OUT[3:2] != 2'd0) ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp ||
	     WILL_FIRE_RL_cache_do_req ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_io_write_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ;

  // register cache_rg_victim_way
  assign cache_rg_victim_way$D_IN = tmp__h36741[0] ;
  assign cache_rg_victim_way$EN = CAN_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_width_code
  assign cache_rg_width_code$D_IN = req_width_code ;
  assign cache_rg_width_code$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_wr_rsp_err
  assign cache_rg_wr_rsp_err$D_IN = 1'd1 ;
  assign cache_rg_wr_rsp_err$EN =
	     WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	     cache_masterPortShim_bff$D_OUT[1:0] != 2'd0 ;

  // submodule cache_f_fabric_second_write_reqs
  assign cache_f_fabric_second_write_reqs$D_IN =
	     { cache_f_fabric_write_reqs$D_OUT[127:64],
	       fabric_2_strb__h2820,
	       1'd1,
	       mem_req_wr_second_data_wuser__h2955 } ;
  assign cache_f_fabric_second_write_reqs$ENQ =
	     WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	     cache_f_fabric_write_reqs$D_OUT[195:193] == 3'b100 ;
  assign cache_f_fabric_second_write_reqs$DEQ =
	     cache_masterPortShim_wff$FULL_N &&
	     cache_f_fabric_second_write_reqs$EMPTY_N ;
  assign cache_f_fabric_second_write_reqs$CLR = 1'b0 ;

  // submodule cache_f_fabric_write_reqs
  assign cache_f_fabric_write_reqs$D_IN =
	     MUX_cache_f_fabric_write_reqs$enq_1__SEL_1 ?
	       MUX_cache_f_fabric_write_reqs$enq_1__VAL_1 :
	       MUX_cache_f_fabric_write_reqs$enq_1__VAL_2 ;
  assign cache_f_fabric_write_reqs$ENQ =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     !cache_rg_addr_01_ULT_2147483648___d102 &&
	     cache_rg_addr_01_ULT_2155872256___d103 &&
	     cache_soc_map_m_is_mem_addr_cache_rg_addr_01_0_ETC___d314 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  assign cache_f_fabric_write_reqs$DEQ =
	     WILL_FIRE_RL_cache_rl_fabric_send_write_req ;
  assign cache_f_fabric_write_reqs$CLR = 1'b0 ;

  // submodule cache_f_reset_reqs
  assign cache_f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign cache_f_reset_reqs$ENQ = CAN_FIRE_RL_cache_do_reset_req ;
  assign cache_f_reset_reqs$DEQ =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ;
  assign cache_f_reset_reqs$CLR = 1'b0 ;

  // submodule cache_f_reset_rsps
  assign cache_f_reset_rsps$D_IN = cache_f_reset_reqs$D_OUT ;
  assign cache_f_reset_rsps$ENQ =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ;
  assign cache_f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign cache_f_reset_rsps$CLR = 1'b0 ;

  // submodule cache_masterPortShim_arff
  assign cache_masterPortShim_arff$D_IN =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ?
	       MUX_cache_masterPortShim_arff$enq_1__VAL_1 :
	       MUX_cache_masterPortShim_arff$enq_1__VAL_2 ;
  assign cache_masterPortShim_arff$ENQ =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_io_read_req ;
  assign cache_masterPortShim_arff$DEQ = EN_mem_master_ar_drop ;
  assign cache_masterPortShim_arff$CLR =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_awff
  assign cache_masterPortShim_awff$D_IN =
	     { 4'd0,
	       cache_f_fabric_write_reqs$D_OUT[192:129],
	       mem_req_wr_addr_awlen__h3053,
	       _theResult___snd_snd_snd_val__h3091,
	       18'd65536 } ;
  assign cache_masterPortShim_awff$ENQ =
	     WILL_FIRE_RL_cache_rl_fabric_send_write_req ;
  assign cache_masterPortShim_awff$DEQ = EN_mem_master_aw_drop ;
  assign cache_masterPortShim_awff$CLR =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_bff
  assign cache_masterPortShim_bff$D_IN = mem_master_b_put_val ;
  assign cache_masterPortShim_bff$ENQ = EN_mem_master_b_put ;
  assign cache_masterPortShim_bff$DEQ =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ;
  assign cache_masterPortShim_bff$CLR =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_rff
  assign cache_masterPortShim_rff$D_IN = mem_master_r_put_val ;
  assign cache_masterPortShim_rff$ENQ = EN_mem_master_r_put ;
  assign cache_masterPortShim_rff$DEQ =
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ;
  assign cache_masterPortShim_rff$CLR =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_wff
  assign cache_masterPortShim_wff$D_IN =
	     WILL_FIRE_RL_cache_rl_fabric_send_second_write_req ?
	       cache_f_fabric_second_write_reqs$D_OUT :
	       MUX_cache_masterPortShim_wff$enq_1__VAL_2 ;
  assign cache_masterPortShim_wff$ENQ =
	     WILL_FIRE_RL_cache_rl_fabric_send_second_write_req ||
	     WILL_FIRE_RL_cache_rl_fabric_send_write_req ;
  assign cache_masterPortShim_wff$DEQ = EN_mem_master_w_drop ;
  assign cache_masterPortShim_wff$CLR =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_ram_cword_set
  assign cache_ram_cword_set$ADDRA =
	     MUX_cache_ram_cword_set$a_put_1__SEL_1 ?
	       cache_rg_addr[11:4] :
	       cache_rg_cset_cword_in_cache ;
  always@(MUX_cache_ram_cword_set$b_put_1__SEL_1 or
	  req_addr or
	  MUX_cache_ram_cword_set$b_put_1__SEL_2 or
	  MUX_cache_ram_cword_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  cache_rg_addr or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  MUX_cache_ram_cword_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_cword_set$b_put_1__SEL_1:
	  cache_ram_cword_set$ADDRB = req_addr[11:4];
      MUX_cache_ram_cword_set$b_put_1__SEL_2:
	  cache_ram_cword_set$ADDRB = MUX_cache_ram_cword_set$b_put_2__VAL_2;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_cword_set$ADDRB = cache_rg_addr[11:4];
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_cword_set$ADDRB = MUX_cache_ram_cword_set$b_put_2__VAL_4;
      default: cache_ram_cword_set$ADDRB =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign cache_ram_cword_set$DIA =
	     MUX_cache_ram_cword_set$a_put_1__SEL_1 ?
	       MUX_cache_ram_cword_set$a_put_3__VAL_1 :
	       MUX_cache_ram_cword_set$a_put_3__VAL_2 ;
  always@(MUX_cache_ram_cword_set$b_put_1__SEL_1 or
	  MUX_cache_ram_cword_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_cword_set$b_put_1__SEL_1:
	  cache_ram_cword_set$DIB =
	      258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_cache_ram_cword_set$b_put_1__SEL_2:
	  cache_ram_cword_set$DIB =
	      258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_cword_set$DIB =
	      258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_cword_set$DIB =
	      258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: cache_ram_cword_set$DIB =
		   258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_ram_cword_set$WEA = 1'd1 ;
  assign cache_ram_cword_set$WEB = 1'd0 ;
  assign cache_ram_cword_set$ENA =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     NOT_cache_rg_addr_01_ULT_2147483648_02_52_AND__ETC___d159 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ;
  assign cache_ram_cword_set$ENB =
	     MUX_cache_ram_cword_set$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_ram_state_and_ctag_cset
  assign cache_ram_state_and_ctag_cset$ADDRA =
	     MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 ?
	       cache_rg_addr[11:6] :
	       cache_rg_cset_in_cache ;
  assign cache_ram_state_and_ctag_cset$ADDRB =
	     MUX_cache_ram_cword_set$b_put_1__SEL_1 ?
	       req_addr[11:6] :
	       cache_rg_addr[11:6] ;
  assign cache_ram_state_and_ctag_cset$DIA =
	     MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 ?
	       MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       106'h15555555555554AAAAAAAAAAAAA ;
  assign cache_ram_state_and_ctag_cset$DIB =
	     MUX_cache_ram_cword_set$b_put_1__SEL_1 ?
	       106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  :
	       106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign cache_ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign cache_ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign cache_ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_reset ;
  assign cache_ram_state_and_ctag_cset$ENB =
	     MUX_cache_ram_cword_set$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_rereq ;

  // submodule cache_soc_map
  assign cache_soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign cache_soc_map$m_is_mem_addr_addr = cache_rg_addr ;
  assign cache_soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign IF_NOT_cache_ram_state_and_ctag_cset_b_read__3_ETC___d294 =
	     (!cache_ram_state_and_ctag_cset$DOB[105] ||
	      !cache_ram_state_and_ctag_cset_b_read__32_BITS__ETC___d148) ?
	       { a__h33348, b__h33349 } :
	       cache_ram_cword_set$DOB[128:0] ;
  assign IF_cache_ram_state_and_ctag_cset_b_read__32_BI_ETC___d291 =
	     (cache_ram_state_and_ctag_cset$DOB[105] &&
	      cache_ram_state_and_ctag_cset_b_read__32_BITS__ETC___d148) ?
	       { a__h33348, b__h33349 } :
	       cache_ram_cword_set$DOB[257:129] ;
  assign IF_cache_ram_state_and_ctag_cset_b_read__32_BI_ETC___d621 =
	     (cache_ram_state_and_ctag_cset$DOB[52] &&
	      cache_ram_state_and_ctag_cset_b_read__32_BITS__ETC___d146 ||
	      cache_ram_state_and_ctag_cset$DOB[105] &&
	      cache_ram_state_and_ctag_cset_b_read__32_BITS__ETC___d148) ?
	       cache_rg_state :
	       5'd9 ;
  assign IF_cache_rg_victim_way_43_THEN_cache_masterPor_ETC___d720 =
	     cache_rg_victim_way ?
	       { cache_masterPortShim_rff$D_OUT[0],
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_lower_word64 } :
	       cache_ram_cword_set$DOB[257:129] ;
  assign IF_cache_rg_victim_way_43_THEN_cache_ram_cword_ETC___d719 =
	     cache_rg_victim_way ?
	       cache_ram_cword_set$DOB[128:0] :
	       { cache_masterPortShim_rff$D_OUT[0],
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_lower_word64 } ;
  assign IF_cache_soc_map_m_is_mem_addr_cache_rg_addr_0_ETC___d623 =
	     cache_soc_map$m_is_mem_addr ?
	       (cache_rg_op ?
		  5'd12 :
		  IF_cache_ram_state_and_ctag_cset_b_read__32_BI_ETC___d621) :
	       5'd13 ;
  assign NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655 =
	     cache_cfg_verbosity > 4'd2 ;
  assign NOT_cache_ram_state_and_ctag_cset_b_read__32_B_ETC___d304 =
	     (!cache_ram_state_and_ctag_cset$DOB[52] ||
	      !cache_ram_state_and_ctag_cset_b_read__32_BITS__ETC___d146) &&
	     (!cache_ram_state_and_ctag_cset$DOB[105] ||
	      !cache_ram_state_and_ctag_cset_b_read__32_BITS__ETC___d148) &&
	     !cache_cfg_verbosity_read__0_ULE_1___d61 ;
  assign NOT_cache_rg_addr_01_ULT_2147483648_02_52_AND__ETC___d159 =
	     !cache_rg_addr_01_ULT_2147483648___d102 &&
	     cache_rg_addr_01_ULT_2155872256___d103 &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op &&
	     cache_dw_commit_whas__10_AND_cache_dw_commit_w_ETC___d156 ;
  assign NOT_cache_rg_addr_01_ULT_2147483648_02_52_AND__ETC___d612 =
	     !cache_rg_addr_01_ULT_2147483648___d102 &&
	     cache_rg_addr_01_ULT_2155872256___d103 &&
	     cache_soc_map$m_is_mem_addr &&
	     !cache_rg_op &&
	     cache_ram_state_and_ctag_cset_b_read__32_BIT_5_ETC___d296 ;
  assign NOT_cache_rg_addr_01_ULT_2147483648_02_52_AND__ETC___d617 =
	     !cache_rg_addr_01_ULT_2147483648___d102 &&
	     cache_rg_addr_01_ULT_2155872256___d103 &&
	     cache_soc_map$m_is_mem_addr &&
	     !cache_rg_op &&
	     NOT_cache_ram_state_and_ctag_cset_b_read__32_B_ETC___d304 ;
  assign NOT_cache_rg_op_08_09_AND_cache_ram_state_and__ETC___d317 =
	     !cache_rg_op &&
	     (cache_ram_state_and_ctag_cset$DOB[52] &&
	      cache_ram_state_and_ctag_cset_b_read__32_BITS__ETC___d146 ||
	      cache_ram_state_and_ctag_cset$DOB[105] &&
	      cache_ram_state_and_ctag_cset_b_read__32_BITS__ETC___d148) ;
  assign NOT_cache_w_req_width_code_wget__39_EQ_0b0_59__ETC___d979 =
	     req_width_code != 3'b0 &&
	     (req_width_code != 3'b001 || req_addr[0]) &&
	     (req_width_code != 3'b010 || req_addr[1:0] != 2'b0) &&
	     (req_width_code != 3'b011 || req_addr[2:0] != 3'b0) ;
  assign _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 =
	     8'd1 << size_val__h40049 <= 8'd8 ;
  assign _theResult___fst__h40582 =
	     (cache_rg_addr[2:0] == 3'd0) ?
	       cache_masterPortShim_rff$D_OUT[67:4] :
	       64'd0 ;
  assign a__h33348 = cache_rg_width_code == 3'd4 && cache_rg_st_amo_val[128] ;
  assign b__h36494 = cache_ctr_wr_rsps_pending_crg$port1__read ;
  assign b__h37668 =
	     { cache_masterPortShim_rff$D_OUT[67:4], cache_rg_lower_word64 } ;
  assign cache_cfg_verbosity_read__0_ULE_1___d61 =
	     cache_cfg_verbosity <= 4'd1 ;
  assign cache_dw_commit_whas__10_AND_cache_dw_commit_w_ETC___d156 =
	     EN_commit &&
	     (cache_ram_state_and_ctag_cset$DOB[52] &&
	      cache_ram_state_and_ctag_cset_b_read__32_BITS__ETC___d146 ||
	      cache_ram_state_and_ctag_cset$DOB[105] &&
	      cache_ram_state_and_ctag_cset_b_read__32_BITS__ETC___d148) ;
  assign cache_masterPortShim_rffD_OUT_BITS_11_TO_4__q1 =
	     cache_masterPortShim_rff$D_OUT[11:4] ;
  assign cache_masterPortShim_rffD_OUT_BITS_19_TO_12__q5 =
	     cache_masterPortShim_rff$D_OUT[19:12] ;
  assign cache_masterPortShim_rffD_OUT_BITS_19_TO_4__q2 =
	     cache_masterPortShim_rff$D_OUT[19:4] ;
  assign cache_masterPortShim_rffD_OUT_BITS_27_TO_20__q4 =
	     cache_masterPortShim_rff$D_OUT[27:20] ;
  assign cache_masterPortShim_rffD_OUT_BITS_35_TO_20__q6 =
	     cache_masterPortShim_rff$D_OUT[35:20] ;
  assign cache_masterPortShim_rffD_OUT_BITS_35_TO_28__q7 =
	     cache_masterPortShim_rff$D_OUT[35:28] ;
  assign cache_masterPortShim_rffD_OUT_BITS_35_TO_4__q3 =
	     cache_masterPortShim_rff$D_OUT[35:4] ;
  assign cache_masterPortShim_rffD_OUT_BITS_43_TO_36__q8 =
	     cache_masterPortShim_rff$D_OUT[43:36] ;
  assign cache_masterPortShim_rffD_OUT_BITS_51_TO_36__q9 =
	     cache_masterPortShim_rff$D_OUT[51:36] ;
  assign cache_masterPortShim_rffD_OUT_BITS_51_TO_44__q11 =
	     cache_masterPortShim_rff$D_OUT[51:44] ;
  assign cache_masterPortShim_rffD_OUT_BITS_59_TO_52__q12 =
	     cache_masterPortShim_rff$D_OUT[59:52] ;
  assign cache_masterPortShim_rffD_OUT_BITS_67_TO_36__q10 =
	     cache_masterPortShim_rff$D_OUT[67:36] ;
  assign cache_masterPortShim_rffD_OUT_BITS_67_TO_52__q13 =
	     cache_masterPortShim_rff$D_OUT[67:52] ;
  assign cache_masterPortShim_rffD_OUT_BITS_67_TO_60__q14 =
	     cache_masterPortShim_rff$D_OUT[67:60] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450 =
	     x__h6304 | y__h6305 ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q15 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[7:0] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q16 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[15:0] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q17 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[31:0] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q18 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[15:8] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q19 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[23:16] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q20 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[31:16] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q21 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[31:24] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q22 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[39:32] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q23 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[47:32] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q24 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[63:32] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q25 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[47:40] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q26 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[63:48] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q27 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[55:48] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q28 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[63:56] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q29 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[71:64] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q30 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[79:64] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q31 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[79:72] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q32 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[95:64] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q33 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[87:80] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q34 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[95:80] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q35 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[95:88] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q36 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[103:96] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q37 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[111:96] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q38 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[127:96] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q39 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[119:112] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q40 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[111:104] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q41 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[127:112] ;
  assign cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q42 =
	     cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[127:120] ;
  assign cache_ram_state_and_ctag_cset_b_read__32_BITS__ETC___d146 =
	     cache_ram_state_and_ctag_cset$DOB[51:0] == cache_rg_addr[63:12] ;
  assign cache_ram_state_and_ctag_cset_b_read__32_BITS__ETC___d148 =
	     cache_ram_state_and_ctag_cset$DOB[104:53] ==
	     cache_rg_addr[63:12] ;
  assign cache_ram_state_and_ctag_cset_b_read__32_BIT_5_ETC___d296 =
	     (cache_ram_state_and_ctag_cset$DOB[52] &&
	      cache_ram_state_and_ctag_cset_b_read__32_BITS__ETC___d146 ||
	      cache_ram_state_and_ctag_cset$DOB[105] &&
	      cache_ram_state_and_ctag_cset_b_read__32_BITS__ETC___d148) &&
	     !cache_cfg_verbosity_read__0_ULE_1___d61 ;
  assign cache_rg_addr_01_ULT_2147483648___d102 =
	     cache_rg_addr < 64'h0000000080000000 ;
  assign cache_rg_addr_01_ULT_2155872256___d103 =
	     cache_rg_addr < 64'h0000000080800000 ;
  assign cache_rg_op_08_AND_cache_dw_commit_whas__10_AN_ETC___d298 =
	     cache_rg_op && EN_commit &&
	     cache_ram_state_and_ctag_cset_b_read__32_BIT_5_ETC___d296 ;
  assign cache_rg_op_08_AND_cache_dw_commit_whas__10_AN_ETC___d310 =
	     cache_rg_op && EN_commit &&
	     !cache_cfg_verbosity_read__0_ULE_1___d61 ;
  assign cache_soc_map_m_is_mem_addr_cache_rg_addr_01_0_ETC___d314 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op && EN_commit ;
  assign cache_w_req_width_code_wget__39_EQ_0b0_59_OR_c_ETC___d1000 =
	     (cache_w_req_width_code_wget__39_EQ_0b0_59_OR_c_ETC___d995 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) &&
	     !cache_cfg_verbosity_read__0_ULE_1___d61 ;
  assign cache_w_req_width_code_wget__39_EQ_0b0_59_OR_c_ETC___d995 =
	     req_width_code == 3'b0 ||
	     req_width_code == 3'b001 && !req_addr[0] ||
	     req_width_code == 3'b010 && req_addr[1:0] == 2'b0 ||
	     req_width_code == 3'b011 && req_addr[2:0] == 3'b0 ;
  assign cline_fabric_addr__h36578 = { cache_rg_pa[63:6], 6'd0 } ;
  assign mem_req_wr_addr_awlen__h3053 =
	     (cache_f_fabric_write_reqs$D_OUT[195:193] == 3'b100) ?
	       8'd1 :
	       8'd0 ;
  assign mem_req_wr_second_data_wuser__h2955 =
	     cache_f_fabric_write_reqs$D_OUT[195:193] == 3'b100 &&
	     cache_f_fabric_write_reqs$D_OUT[128] ;
  assign new_exc_code___1__h36444 = MUX_cache_rg_exc_code$write_1__VAL_3 ;
  assign result_lo__h31778 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[7:0] } :
	       { {56{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q15[7]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q15 } ;
  assign result_lo__h31813 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[15:8] } :
	       { {56{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q18[7]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q18 } ;
  assign result_lo__h31846 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[23:16] } :
	       { {56{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q19[7]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q19 } ;
  assign result_lo__h31879 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[31:24] } :
	       { {56{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q21[7]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q21 } ;
  assign result_lo__h31912 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[39:32] } :
	       { {56{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q22[7]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q22 } ;
  assign result_lo__h31945 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[47:40] } :
	       { {56{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q25[7]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q25 } ;
  assign result_lo__h31978 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[55:48] } :
	       { {56{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q27[7]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q27 } ;
  assign result_lo__h32011 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[63:56] } :
	       { {56{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q28[7]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q28 } ;
  assign result_lo__h32044 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[71:64] } :
	       { {56{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q29[7]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q29 } ;
  assign result_lo__h32077 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[79:72] } :
	       { {56{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q31[7]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q31 } ;
  assign result_lo__h32110 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[87:80] } :
	       { {56{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q33[7]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q33 } ;
  assign result_lo__h32143 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[95:88] } :
	       { {56{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q35[7]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q35 } ;
  assign result_lo__h32176 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[103:96] } :
	       { {56{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q36[7]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q36 } ;
  assign result_lo__h32209 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[111:104] } :
	       { {56{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q40[7]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q40 } ;
  assign result_lo__h32242 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[119:112] } :
	       { {56{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q39[7]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q39 } ;
  assign result_lo__h32275 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[127:120] } :
	       { {56{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q42[7]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q42 } ;
  assign result_lo__h32330 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[15:0] } :
	       { {48{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q16[15]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q16 } ;
  assign result_lo__h32363 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[31:16] } :
	       { {48{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q20[15]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q20 } ;
  assign result_lo__h32396 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[47:32] } :
	       { {48{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q23[15]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q23 } ;
  assign result_lo__h32429 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[63:48] } :
	       { {48{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q26[15]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q26 } ;
  assign result_lo__h32462 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[79:64] } :
	       { {48{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q30[15]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q30 } ;
  assign result_lo__h32495 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[95:80] } :
	       { {48{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q34[15]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q34 } ;
  assign result_lo__h32528 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[111:96] } :
	       { {48{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q37[15]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q37 } ;
  assign result_lo__h32561 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[127:112] } :
	       { {48{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q41[15]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q41 } ;
  assign result_lo__h32608 =
	     cache_rg_is_unsigned ?
	       { 32'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[31:0] } :
	       { {32{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q17[31]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q17 } ;
  assign result_lo__h32641 =
	     cache_rg_is_unsigned ?
	       { 32'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[63:32] } :
	       { {32{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q24[31]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q24 } ;
  assign result_lo__h32674 =
	     cache_rg_is_unsigned ?
	       { 32'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[95:64] } :
	       { {32{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q32[31]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q32 } ;
  assign result_lo__h32707 =
	     cache_rg_is_unsigned ?
	       { 32'd0,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[127:96] } :
	       { {32{cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q38[31]}},
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC__q38 } ;
  assign result_lo__h40650 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_masterPortShim_rff$D_OUT[11:4] } :
	       { {56{cache_masterPortShim_rffD_OUT_BITS_11_TO_4__q1[7]}},
		 cache_masterPortShim_rffD_OUT_BITS_11_TO_4__q1 } ;
  assign result_lo__h40683 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_masterPortShim_rff$D_OUT[19:12] } :
	       { {56{cache_masterPortShim_rffD_OUT_BITS_19_TO_12__q5[7]}},
		 cache_masterPortShim_rffD_OUT_BITS_19_TO_12__q5 } ;
  assign result_lo__h40716 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_masterPortShim_rff$D_OUT[27:20] } :
	       { {56{cache_masterPortShim_rffD_OUT_BITS_27_TO_20__q4[7]}},
		 cache_masterPortShim_rffD_OUT_BITS_27_TO_20__q4 } ;
  assign result_lo__h40749 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_masterPortShim_rff$D_OUT[35:28] } :
	       { {56{cache_masterPortShim_rffD_OUT_BITS_35_TO_28__q7[7]}},
		 cache_masterPortShim_rffD_OUT_BITS_35_TO_28__q7 } ;
  assign result_lo__h40782 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_masterPortShim_rff$D_OUT[43:36] } :
	       { {56{cache_masterPortShim_rffD_OUT_BITS_43_TO_36__q8[7]}},
		 cache_masterPortShim_rffD_OUT_BITS_43_TO_36__q8 } ;
  assign result_lo__h40815 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_masterPortShim_rff$D_OUT[51:44] } :
	       { {56{cache_masterPortShim_rffD_OUT_BITS_51_TO_44__q11[7]}},
		 cache_masterPortShim_rffD_OUT_BITS_51_TO_44__q11 } ;
  assign result_lo__h40848 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_masterPortShim_rff$D_OUT[59:52] } :
	       { {56{cache_masterPortShim_rffD_OUT_BITS_59_TO_52__q12[7]}},
		 cache_masterPortShim_rffD_OUT_BITS_59_TO_52__q12 } ;
  assign result_lo__h40881 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_masterPortShim_rff$D_OUT[67:60] } :
	       { {56{cache_masterPortShim_rffD_OUT_BITS_67_TO_60__q14[7]}},
		 cache_masterPortShim_rffD_OUT_BITS_67_TO_60__q14 } ;
  assign result_lo__h40944 =
	     cache_rg_is_unsigned ?
	       { 48'd0, cache_masterPortShim_rff$D_OUT[19:4] } :
	       { {48{cache_masterPortShim_rffD_OUT_BITS_19_TO_4__q2[15]}},
		 cache_masterPortShim_rffD_OUT_BITS_19_TO_4__q2 } ;
  assign result_lo__h40977 =
	     cache_rg_is_unsigned ?
	       { 48'd0, cache_masterPortShim_rff$D_OUT[35:20] } :
	       { {48{cache_masterPortShim_rffD_OUT_BITS_35_TO_20__q6[15]}},
		 cache_masterPortShim_rffD_OUT_BITS_35_TO_20__q6 } ;
  assign result_lo__h41010 =
	     cache_rg_is_unsigned ?
	       { 48'd0, cache_masterPortShim_rff$D_OUT[51:36] } :
	       { {48{cache_masterPortShim_rffD_OUT_BITS_51_TO_36__q9[15]}},
		 cache_masterPortShim_rffD_OUT_BITS_51_TO_36__q9 } ;
  assign result_lo__h41043 =
	     cache_rg_is_unsigned ?
	       { 48'd0, cache_masterPortShim_rff$D_OUT[67:52] } :
	       { {48{cache_masterPortShim_rffD_OUT_BITS_67_TO_52__q13[15]}},
		 cache_masterPortShim_rffD_OUT_BITS_67_TO_52__q13 } ;
  assign result_lo__h41094 =
	     cache_rg_is_unsigned ?
	       { 32'd0, cache_masterPortShim_rff$D_OUT[35:4] } :
	       { {32{cache_masterPortShim_rffD_OUT_BITS_35_TO_4__q3[31]}},
		 cache_masterPortShim_rffD_OUT_BITS_35_TO_4__q3 } ;
  assign result_lo__h41127 =
	     cache_rg_is_unsigned ?
	       { 32'd0, cache_masterPortShim_rff$D_OUT[67:36] } :
	       { {32{cache_masterPortShim_rffD_OUT_BITS_67_TO_36__q10[31]}},
		 cache_masterPortShim_rffD_OUT_BITS_67_TO_36__q10 } ;
  assign shift_bits__h2843 =
	     { cache_f_fabric_write_reqs$D_OUT[131:129], 3'b0 } ;
  assign strobe64__h3072 =
	     8'b00000001 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign strobe64__h3076 =
	     8'b00000011 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign strobe64__h3080 =
	     8'b00001111 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign strobe64__h3084 =
	     8'b11111111 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign tmp__h36740 = { 1'd0, cache_rg_victim_way } ;
  assign tmp__h36741 = tmp__h36740 + 2'd1 ;
  assign word64__h3071 =
	     cache_f_fabric_write_reqs$D_OUT[63:0] << shift_bits__h2843 ;
  assign x__h31743 =
	     { _theResult___snd_fst__h6196, _theResult___fst__h6194 } ;
  assign x__h6304 = cache_ram_cword_set$DOB[128:0] & y__h6358 ;
  assign y__h19050 =
	     {129{cache_ram_state_and_ctag_cset$DOB[105] &&
		  cache_ram_state_and_ctag_cset_b_read__32_BITS__ETC___d148}} ;
  assign y__h6305 = cache_ram_cword_set$DOB[257:129] & y__h19050 ;
  assign y__h6358 =
	     {129{cache_ram_state_and_ctag_cset$DOB[52] &&
		  cache_ram_state_and_ctag_cset_b_read__32_BITS__ETC___d146}} ;
  assign y_avValue_snd__h36412 =
	     (cache_rg_addr_01_ULT_2147483648___d102 ||
	      !cache_rg_addr_01_ULT_2155872256___d103) ?
	       new_exc_code___1__h36444 :
	       cache_rg_exc_code ;
  always@(cache_f_fabric_write_reqs$D_OUT)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[195:193])
      3'b0, 3'b001, 3'b010, 3'b011: fabric_2_strb__h2820 = 8'd0;
      3'b100: fabric_2_strb__h2820 = 8'b11111111;
      default: fabric_2_strb__h2820 = 8'd0;
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[195:193])
      3'b0, 3'b001, 3'b010:
	  _theResult___snd_snd_snd_val__h3091 =
	      cache_f_fabric_write_reqs$D_OUT[195:193];
      3'b011, 3'b100: _theResult___snd_snd_snd_val__h3091 = 3'b011;
      default: _theResult___snd_snd_snd_val__h3091 = 3'b110;
    endcase
  end
  always@(cache_rg_width_code)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3: size_val__h40049 = cache_rg_width_code;
      default: size_val__h40049 = 3'b100;
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT or
	  strobe64__h3072 or
	  strobe64__h3076 or strobe64__h3080 or strobe64__h3084)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[195:193])
      3'b0: mem_req_wr_data_wstrb__h3128 = strobe64__h3072;
      3'b001: mem_req_wr_data_wstrb__h3128 = strobe64__h3076;
      3'b010: mem_req_wr_data_wstrb__h3128 = strobe64__h3080;
      3'b011: mem_req_wr_data_wstrb__h3128 = strobe64__h3084;
      3'b100: mem_req_wr_data_wstrb__h3128 = 8'b11111111;
      default: mem_req_wr_data_wstrb__h3128 = 8'd0;
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT or word64__h3071)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[195:193])
      3'b0, 3'b001, 3'b010, 3'b011:
	  mem_req_wr_data_wdata__h3127 = word64__h3071;
      default: mem_req_wr_data_wdata__h3127 =
		   cache_f_fabric_write_reqs$D_OUT[63:0];
    endcase
  end
  always@(cache_ram_state_and_ctag_cset$DOB or
	  cache_ram_state_and_ctag_cset_b_read__32_BITS__ETC___d148 or
	  cache_ram_cword_set$DOB)
  begin
    case (cache_ram_state_and_ctag_cset$DOB[105] &&
	  cache_ram_state_and_ctag_cset_b_read__32_BITS__ETC___d148)
      1'd0: new_cword__h33331 = cache_ram_cword_set$DOB[127:0];
      1'd1: new_cword__h33331 = cache_ram_cword_set$DOB[256:129];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3: _theResult___snd_fst__h6196 = 64'd0;
      3'd4:
	  _theResult___snd_fst__h6196 =
	      cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[127:64];
      default: _theResult___snd_fst__h6196 = 64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  _theResult___fst__h6240 =
	      cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[63:0];
      4'h8:
	  _theResult___fst__h6240 =
	      cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[127:64];
      default: _theResult___fst__h6240 = 64'd0;
    endcase
  end
  always@(cache_rg_addr or new_cword__h33331 or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d249 =
	      { new_cword__h33331[127:8], cache_rg_st_amo_val[7:0] };
      4'h1:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d249 =
	      { new_cword__h33331[127:16],
		cache_rg_st_amo_val[7:0],
		new_cword__h33331[7:0] };
      4'h2:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d249 =
	      { new_cword__h33331[127:24],
		cache_rg_st_amo_val[7:0],
		new_cword__h33331[15:0] };
      4'h3:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d249 =
	      { new_cword__h33331[127:32],
		cache_rg_st_amo_val[7:0],
		new_cword__h33331[23:0] };
      4'h4:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d249 =
	      { new_cword__h33331[127:40],
		cache_rg_st_amo_val[7:0],
		new_cword__h33331[31:0] };
      4'h5:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d249 =
	      { new_cword__h33331[127:48],
		cache_rg_st_amo_val[7:0],
		new_cword__h33331[39:0] };
      4'h6:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d249 =
	      { new_cword__h33331[127:56],
		cache_rg_st_amo_val[7:0],
		new_cword__h33331[47:0] };
      4'h7:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d249 =
	      { new_cword__h33331[127:64],
		cache_rg_st_amo_val[7:0],
		new_cword__h33331[55:0] };
      4'h8:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d249 =
	      { new_cword__h33331[127:72],
		cache_rg_st_amo_val[7:0],
		new_cword__h33331[63:0] };
      4'h9:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d249 =
	      { new_cword__h33331[127:80],
		cache_rg_st_amo_val[7:0],
		new_cword__h33331[71:0] };
      4'hA:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d249 =
	      { new_cword__h33331[127:88],
		cache_rg_st_amo_val[7:0],
		new_cword__h33331[79:0] };
      4'hB:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d249 =
	      { new_cword__h33331[127:96],
		cache_rg_st_amo_val[7:0],
		new_cword__h33331[87:0] };
      4'hC:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d249 =
	      { new_cword__h33331[127:104],
		cache_rg_st_amo_val[7:0],
		new_cword__h33331[95:0] };
      4'hD:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d249 =
	      { new_cword__h33331[127:112],
		cache_rg_st_amo_val[7:0],
		new_cword__h33331[103:0] };
      4'hE:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d249 =
	      { new_cword__h33331[127:120],
		cache_rg_st_amo_val[7:0],
		new_cword__h33331[111:0] };
      4'hF:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d249 =
	      { cache_rg_st_amo_val[7:0], new_cword__h33331[119:0] };
    endcase
  end
  always@(cache_rg_addr or new_cword__h33331 or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d267 =
	      { new_cword__h33331[127:16], cache_rg_st_amo_val[15:0] };
      4'h2:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d267 =
	      { new_cword__h33331[127:32],
		cache_rg_st_amo_val[15:0],
		new_cword__h33331[15:0] };
      4'h4:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d267 =
	      { new_cword__h33331[127:48],
		cache_rg_st_amo_val[15:0],
		new_cword__h33331[31:0] };
      4'h6:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d267 =
	      { new_cword__h33331[127:64],
		cache_rg_st_amo_val[15:0],
		new_cword__h33331[47:0] };
      4'h8:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d267 =
	      { new_cword__h33331[127:80],
		cache_rg_st_amo_val[15:0],
		new_cword__h33331[63:0] };
      4'hA:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d267 =
	      { new_cword__h33331[127:96],
		cache_rg_st_amo_val[15:0],
		new_cword__h33331[79:0] };
      4'hC:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d267 =
	      { new_cword__h33331[127:112],
		cache_rg_st_amo_val[15:0],
		new_cword__h33331[95:0] };
      4'hE:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d267 =
	      { cache_rg_st_amo_val[15:0], new_cword__h33331[111:0] };
      default: IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d267 =
		   new_cword__h33331;
    endcase
  end
  always@(cache_rg_addr or new_cword__h33331 or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d277 =
	      { new_cword__h33331[127:32], cache_rg_st_amo_val[31:0] };
      4'h4:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d277 =
	      { new_cword__h33331[127:64],
		cache_rg_st_amo_val[31:0],
		new_cword__h33331[31:0] };
      4'h8:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d277 =
	      { new_cword__h33331[127:96],
		cache_rg_st_amo_val[31:0],
		new_cword__h33331[63:0] };
      4'hC:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d277 =
	      { cache_rg_st_amo_val[31:0], new_cword__h33331[95:0] };
      default: IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d277 =
		   new_cword__h33331;
    endcase
  end
  always@(cache_rg_addr or new_cword__h33331 or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_new_cword33_ETC__q43 =
	      { new_cword__h33331[127:64], cache_rg_st_amo_val[63:0] };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_new_cword33_ETC__q43 =
	      { cache_rg_st_amo_val[63:0], new_cword__h33331[63:0] };
      default: CASE_cache_rg_addr_BITS_3_TO_0_0x0_new_cword33_ETC__q43 =
		   new_cword__h33331;
    endcase
  end
  always@(cache_rg_width_code or
	  new_cword__h33331 or
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d249 or
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d267 or
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d277 or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_new_cword33_ETC__q43 or
	  cache_rg_st_amo_val)
  begin
    case (cache_rg_width_code)
      3'd0:
	  b__h33349 =
	      IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d249;
      3'd1:
	  b__h33349 =
	      IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d267;
      3'd2:
	  b__h33349 =
	      IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d277;
      3'd3:
	  b__h33349 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_new_cword33_ETC__q43;
      3'd4: b__h33349 = cache_rg_st_amo_val[127:0];
      default: b__h33349 = new_cword__h33331;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h32608 or
	  result_lo__h32641 or result_lo__h32674 or result_lo__h32707)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d599 =
	      result_lo__h32608;
      4'h4:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d599 =
	      result_lo__h32641;
      4'h8:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d599 =
	      result_lo__h32674;
      4'hC:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d599 =
	      result_lo__h32707;
      default: IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d599 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h40944 or
	  result_lo__h40977 or result_lo__h41010 or result_lo__h41043)
  begin
    case (cache_rg_addr[2:0])
      3'd0:
	  IF_cache_rg_addr_01_BITS_2_TO_0_63_EQ_0_64_THE_ETC___d831 =
	      result_lo__h40944;
      3'd2:
	  IF_cache_rg_addr_01_BITS_2_TO_0_63_EQ_0_64_THE_ETC___d831 =
	      result_lo__h40977;
      3'd4:
	  IF_cache_rg_addr_01_BITS_2_TO_0_63_EQ_0_64_THE_ETC___d831 =
	      result_lo__h41010;
      3'd6:
	  IF_cache_rg_addr_01_BITS_2_TO_0_63_EQ_0_64_THE_ETC___d831 =
	      result_lo__h41043;
      default: IF_cache_rg_addr_01_BITS_2_TO_0_63_EQ_0_64_THE_ETC___d831 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h32330 or
	  result_lo__h32363 or
	  result_lo__h32396 or
	  result_lo__h32429 or
	  result_lo__h32462 or
	  result_lo__h32495 or result_lo__h32528 or result_lo__h32561)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d579 =
	      result_lo__h32330;
      4'h2:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d579 =
	      result_lo__h32363;
      4'h4:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d579 =
	      result_lo__h32396;
      4'h6:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d579 =
	      result_lo__h32429;
      4'h8:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d579 =
	      result_lo__h32462;
      4'hA:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d579 =
	      result_lo__h32495;
      4'hC:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d579 =
	      result_lo__h32528;
      4'hE:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d579 =
	      result_lo__h32561;
      default: IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d579 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h31778 or
	  result_lo__h31813 or
	  result_lo__h31846 or
	  result_lo__h31879 or
	  result_lo__h31912 or
	  result_lo__h31945 or
	  result_lo__h31978 or
	  result_lo__h32011 or
	  result_lo__h32044 or
	  result_lo__h32077 or
	  result_lo__h32110 or
	  result_lo__h32143 or
	  result_lo__h32176 or
	  result_lo__h32209 or result_lo__h32242 or result_lo__h32275)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d539 =
	      result_lo__h31778;
      4'h1:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d539 =
	      result_lo__h31813;
      4'h2:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d539 =
	      result_lo__h31846;
      4'h3:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d539 =
	      result_lo__h31879;
      4'h4:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d539 =
	      result_lo__h31912;
      4'h5:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d539 =
	      result_lo__h31945;
      4'h6:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d539 =
	      result_lo__h31978;
      4'h7:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d539 =
	      result_lo__h32011;
      4'h8:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d539 =
	      result_lo__h32044;
      4'h9:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d539 =
	      result_lo__h32077;
      4'hA:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d539 =
	      result_lo__h32110;
      4'hB:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d539 =
	      result_lo__h32143;
      4'hC:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d539 =
	      result_lo__h32176;
      4'hD:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d539 =
	      result_lo__h32209;
      4'hE:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d539 =
	      result_lo__h32242;
      4'hF:
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d539 =
	      result_lo__h32275;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d539 or
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d579 or
	  IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d599 or
	  _theResult___fst__h6240 or
	  cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450)
  begin
    case (cache_rg_width_code)
      3'd0:
	  _theResult___fst__h6194 =
	      IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d539;
      3'd1:
	  _theResult___fst__h6194 =
	      IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d579;
      3'd2:
	  _theResult___fst__h6194 =
	      IF_cache_rg_addr_01_BITS_3_TO_0_31_EQ_0x0_67_T_ETC___d599;
      3'd3: _theResult___fst__h6194 = _theResult___fst__h6240;
      3'd4:
	  _theResult___fst__h6194 =
	      cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450[63:0];
      default: _theResult___fst__h6194 = 64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h40650 or
	  result_lo__h40683 or
	  result_lo__h40716 or
	  result_lo__h40749 or
	  result_lo__h40782 or
	  result_lo__h40815 or result_lo__h40848 or result_lo__h40881)
  begin
    case (cache_rg_addr[2:0])
      3'd0:
	  IF_cache_rg_addr_01_BITS_2_TO_0_63_EQ_0_64_THE_ETC___d811 =
	      result_lo__h40650;
      3'd1:
	  IF_cache_rg_addr_01_BITS_2_TO_0_63_EQ_0_64_THE_ETC___d811 =
	      result_lo__h40683;
      3'd2:
	  IF_cache_rg_addr_01_BITS_2_TO_0_63_EQ_0_64_THE_ETC___d811 =
	      result_lo__h40716;
      3'd3:
	  IF_cache_rg_addr_01_BITS_2_TO_0_63_EQ_0_64_THE_ETC___d811 =
	      result_lo__h40749;
      3'd4:
	  IF_cache_rg_addr_01_BITS_2_TO_0_63_EQ_0_64_THE_ETC___d811 =
	      result_lo__h40782;
      3'd5:
	  IF_cache_rg_addr_01_BITS_2_TO_0_63_EQ_0_64_THE_ETC___d811 =
	      result_lo__h40815;
      3'd6:
	  IF_cache_rg_addr_01_BITS_2_TO_0_63_EQ_0_64_THE_ETC___d811 =
	      result_lo__h40848;
      3'd7:
	  IF_cache_rg_addr_01_BITS_2_TO_0_63_EQ_0_64_THE_ETC___d811 =
	      result_lo__h40881;
    endcase
  end
  always@(cache_rg_addr or result_lo__h41094 or result_lo__h41127)
  begin
    case (cache_rg_addr[2:0])
      3'd0:
	  CASE_cache_rg_addr_BITS_2_TO_0_0_result_lo1094_ETC__q44 =
	      result_lo__h41094;
      3'd4:
	  CASE_cache_rg_addr_BITS_2_TO_0_0_result_lo1094_ETC__q44 =
	      result_lo__h41127;
      default: CASE_cache_rg_addr_BITS_2_TO_0_0_result_lo1094_ETC__q44 =
		   64'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_01_BITS_2_TO_0_63_EQ_0_64_THE_ETC___d811 or
	  IF_cache_rg_addr_01_BITS_2_TO_0_63_EQ_0_64_THE_ETC___d831 or
	  CASE_cache_rg_addr_BITS_2_TO_0_0_result_lo1094_ETC__q44 or
	  _theResult___fst__h40582 or cache_masterPortShim_rff$D_OUT)
  begin
    case (cache_rg_width_code)
      3'd0:
	  _theResult___fst__h40518 =
	      IF_cache_rg_addr_01_BITS_2_TO_0_63_EQ_0_64_THE_ETC___d811;
      3'd1:
	  _theResult___fst__h40518 =
	      IF_cache_rg_addr_01_BITS_2_TO_0_63_EQ_0_64_THE_ETC___d831;
      3'd2:
	  _theResult___fst__h40518 =
	      CASE_cache_rg_addr_BITS_2_TO_0_0_result_lo1094_ETC__q44;
      3'd3: _theResult___fst__h40518 = _theResult___fst__h40582;
      3'd4: _theResult___fst__h40518 = cache_masterPortShim_rff$D_OUT[67:4];
      default: _theResult___fst__h40518 = 64'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 6'd0;
	cache_rg_ddr4_ready <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_ld_val <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_state <= `BSV_ASSIGNMENT_DELAY 5'd0;
	cache_rg_wr_rsp_err <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cache_cfg_verbosity$EN)
	  cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY
	      cache_cfg_verbosity$D_IN;
	if (cache_ctr_wr_rsps_pending_crg$EN)
	  cache_ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_crg$D_IN;
	if (cache_rg_cset_in_cache$EN)
	  cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_cset_in_cache$D_IN;
	if (cache_rg_ddr4_ready$EN)
	  cache_rg_ddr4_ready <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_ddr4_ready$D_IN;
	if (cache_rg_ld_val$EN)
	  cache_rg_ld_val <= `BSV_ASSIGNMENT_DELAY cache_rg_ld_val$D_IN;
	if (cache_rg_lower_word64_full$EN)
	  cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lower_word64_full$D_IN;
	if (cache_rg_state$EN)
	  cache_rg_state <= `BSV_ASSIGNMENT_DELAY cache_rg_state$D_IN;
	if (cache_rg_wr_rsp_err$EN)
	  cache_rg_wr_rsp_err <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_wr_rsp_err$D_IN;
      end
    if (cache_rg_addr$EN)
      cache_rg_addr <= `BSV_ASSIGNMENT_DELAY cache_rg_addr$D_IN;
    if (cache_rg_allow_cap$EN)
      cache_rg_allow_cap <= `BSV_ASSIGNMENT_DELAY cache_rg_allow_cap$D_IN;
    if (cache_rg_cset_cword_in_cache$EN)
      cache_rg_cset_cword_in_cache <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_cset_cword_in_cache$D_IN;
    if (cache_rg_error_during_refill$EN)
      cache_rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_error_during_refill$D_IN;
    if (cache_rg_exc_code$EN)
      cache_rg_exc_code <= `BSV_ASSIGNMENT_DELAY cache_rg_exc_code$D_IN;
    if (cache_rg_is_unsigned$EN)
      cache_rg_is_unsigned <= `BSV_ASSIGNMENT_DELAY cache_rg_is_unsigned$D_IN;
    if (cache_rg_lower_word64$EN)
      cache_rg_lower_word64 <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_lower_word64$D_IN;
    if (cache_rg_op$EN) cache_rg_op <= `BSV_ASSIGNMENT_DELAY cache_rg_op$D_IN;
    if (cache_rg_pa$EN) cache_rg_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pa$D_IN;
    if (cache_rg_st_amo_val$EN)
      cache_rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY cache_rg_st_amo_val$D_IN;
    if (cache_rg_victim_way$EN)
      cache_rg_victim_way <= `BSV_ASSIGNMENT_DELAY cache_rg_victim_way$D_IN;
    if (cache_rg_width_code$EN)
      cache_rg_width_code <= `BSV_ASSIGNMENT_DELAY cache_rg_width_code$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cache_cfg_verbosity = 4'hA;
    cache_ctr_wr_rsps_pending_crg = 4'hA;
    cache_rg_addr = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_allow_cap = 1'h0;
    cache_rg_cset_cword_in_cache = 8'hAA;
    cache_rg_cset_in_cache = 6'h2A;
    cache_rg_ddr4_ready = 1'h0;
    cache_rg_error_during_refill = 1'h0;
    cache_rg_exc_code = 6'h2A;
    cache_rg_is_unsigned = 1'h0;
    cache_rg_ld_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_lower_word64 = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_lower_word64_full = 1'h0;
    cache_rg_op = 1'h0;
    cache_rg_pa = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_st_amo_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_state = 5'h0A;
    cache_rg_victim_way = 1'h0;
    cache_rg_width_code = 3'h2;
    cache_rg_wr_rsp_err = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", cache_f_fabric_write_reqs$D_OUT[192:129]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", mem_req_wr_addr_awlen__h3053);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", _theResult___snd_snd_snd_val__h3091, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", mem_req_wr_data_wdata__h3127);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", mem_req_wr_data_wstrb__h3128);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61 &&
	  cache_f_fabric_write_reqs$D_OUT[195:193] == 3'b100)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61 &&
	  cache_f_fabric_write_reqs$D_OUT[195:193] != 3'b100)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", mem_req_wr_second_data_wuser__h2955, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	begin
	  v__h4349 = $stime;
	  #0;
	end
    v__h4343 = v__h4349 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		 v__h4343,
		 "D_MMU_Cache",
		 $signed(32'd64),
		 $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61 &&
	  cache_f_reset_reqs$D_OUT)
	begin
	  v__h4433 = $stime;
	  #0;
	end
    v__h4427 = v__h4433 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61 &&
	  cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: Flushed", v__h4427, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	begin
	  v__h4554 = $stime;
	  #0;
	end
    v__h4548 = v__h4554 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		 v__h4548,
		 "D_MMU_Cache",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  CWord 0x%0h  Byte 0x%0h}",
		 cache_rg_addr[63:12],
		 cache_rg_addr[11:6],
		 cache_rg_addr[5:4],
		 cache_rg_addr[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("        CSet 0x%0x: (state, tag):", cache_rg_addr[11:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61 &&
	  cache_ram_state_and_ctag_cset$DOB[52])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61 &&
	  !cache_ram_state_and_ctag_cset$DOB[52])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61 &&
	  cache_ram_state_and_ctag_cset$DOB[52])
	$write(", 0x%0x", cache_ram_state_and_ctag_cset$DOB[51:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61 &&
	  !cache_ram_state_and_ctag_cset$DOB[52])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61 &&
	  cache_ram_state_and_ctag_cset$DOB[105])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61 &&
	  !cache_ram_state_and_ctag_cset$DOB[105])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61 &&
	  cache_ram_state_and_ctag_cset$DOB[105])
	$write(", 0x%0x", cache_ram_state_and_ctag_cset$DOB[104:53]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61 &&
	  !cache_ram_state_and_ctag_cset$DOB[105])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("        CSet 0x%0x, CWord 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(" 0x%0x", cache_ram_cword_set$DOB[128:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(" 0x%0x", cache_ram_cword_set$DOB[257:129]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_ram_state_and_ctag_cset$DOB[52] &&
	  cache_ram_state_and_ctag_cset_b_read__32_BITS__ETC___d146 &&
	  cache_ram_state_and_ctag_cset$DOB[105] &&
	  cache_ram_state_and_ctag_cset_b_read__32_BITS__ETC___d148)
	$display("        ASSERTION ERROR: fn_test_cache_hit_or_miss: multiple hits in set at [%0d] and [%0d]",
		 $signed(32'd1),
		 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "allow_cap: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 6'h2A, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_rg_addr_01_ULT_2147483648___d102 &&
	  cache_rg_addr_01_ULT_2155872256___d103 &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_08_AND_cache_dw_commit_whas__10_AN_ETC___d298)
	$display("        Write-Cache-Hit: pa 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_rg_addr_01_ULT_2147483648___d102 &&
	  cache_rg_addr_01_ULT_2155872256___d103 &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_08_AND_cache_dw_commit_whas__10_AN_ETC___d298)
	$write("        New Word128_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_rg_addr_01_ULT_2147483648___d102 &&
	  cache_rg_addr_01_ULT_2155872256___d103 &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_08_AND_cache_dw_commit_whas__10_AN_ETC___d298)
	$write("        CSet 0x%0x, CWord 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_rg_addr_01_ULT_2147483648___d102 &&
	  cache_rg_addr_01_ULT_2155872256___d103 &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_08_AND_cache_dw_commit_whas__10_AN_ETC___d298)
	$write(" 0x%0x",
	       IF_NOT_cache_ram_state_and_ctag_cset_b_read__3_ETC___d294);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_rg_addr_01_ULT_2147483648___d102 &&
	  cache_rg_addr_01_ULT_2155872256___d103 &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_08_AND_cache_dw_commit_whas__10_AN_ETC___d298)
	$write(" 0x%0x",
	       IF_cache_ram_state_and_ctag_cset_b_read__32_BI_ETC___d291);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_rg_addr_01_ULT_2147483648___d102 &&
	  cache_rg_addr_01_ULT_2155872256___d103 &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_08_AND_cache_dw_commit_whas__10_AN_ETC___d298)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_rg_addr_01_ULT_2147483648___d102 &&
	  cache_rg_addr_01_ULT_2155872256___d103 &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op &&
	  EN_commit &&
	  NOT_cache_ram_state_and_ctag_cset_b_read__32_B_ETC___d304)
	$display("        Write-Cache-Miss: pa 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_rg_addr_01_ULT_2147483648___d102 &&
	  cache_rg_addr_01_ULT_2155872256___d103 &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_08_AND_cache_dw_commit_whas__10_AN_ETC___d310)
	$display("        Write-Cache-Hit/Miss: eaddr 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_rg_addr_01_ULT_2147483648___d102 &&
	  cache_rg_addr_01_ULT_2155872256___d103 &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_08_AND_cache_dw_commit_whas__10_AN_ETC___d310)
	$display("        => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_addr_01_ULT_2147483648_02_52_AND__ETC___d612)
	begin
	  v__h32904 = $stime;
	  #0;
	end
    v__h32898 = v__h32904 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_addr_01_ULT_2147483648_02_52_AND__ETC___d612)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h32898,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450,
		 129'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_addr_01_ULT_2147483648_02_52_AND__ETC___d612)
	$display("        Read-hit: addr 0x%0h centry 0x%0h",
		 cache_rg_addr,
		 cache_ram_cword_set_b_read__43_BITS_128_TO_0_4_ETC___d450);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_addr_01_ULT_2147483648_02_52_AND__ETC___d617)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_rg_addr_01_ULT_2147483648___d102 &&
	  cache_rg_addr_01_ULT_2155872256___d103 &&
	  !cache_soc_map$m_is_mem_addr &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_ddr4_ready)
	begin
	  v__h45347 = $stime;
	  #0;
	end
    v__h45341 = v__h45347 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_ddr4_ready)
	$display("%0d: %m.ma_ddr4_ready: Enabling MMU_Cache", v__h45341);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	begin
	  v__h36540 = $stime;
	  #0;
	end
    v__h36534 = v__h36540 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$display("%0d: %s.rl_start_cache_refill: ", v__h36534, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	begin
	  v__h36691 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("%0t            To fabric: ", v__h36691);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", cline_fabric_addr__h36578);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 8'd7);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$display("    Victim way %0d; => CACHE_REFILL", tmp__h36741[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655)
	begin
	  v__h37260 = $stime;
	  #0;
	end
    v__h37254 = v__h37260 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655)
	$display("%0d: %s.rl_cache_refill_rsps_loop:",
		 v__h37254,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[71:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[67:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655 &&
	  cache_masterPortShim_rff$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655 &&
	  !cache_masterPortShim_rff$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	begin
	  v__h37493 = $stime;
	  #0;
	end
    v__h37487 = v__h37493 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		 v__h37487,
		 "D_MMU_Cache",
		 new_exc_code___1__h36444);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655)
	$display("        64b fabric: concat with rg_lower_word64: new_word128 0x%0x",
		 { cache_masterPortShim_rff$D_OUT[0],
		   cache_masterPortShim_rff$D_OUT[67:4],
		   cache_rg_lower_word64 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  cache_rg_cset_cword_in_cache[1:0] == 2'd3 &&
	  (cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	   cache_rg_error_during_refill) &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  cache_rg_cset_cword_in_cache[1:0] == 2'd3 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  !cache_rg_error_during_refill &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655)
	$display("        Updating Cache cword_set 0x%0h, cword_in_cline %0d) old => new",
		 cache_rg_cset_cword_in_cache,
		 cache_rg_cset_cword_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655)
	$write("        CSet 0x%0x, CWord 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_cset_cword_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655)
	$write(" 0x%0x", cache_ram_cword_set$DOB[128:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655)
	$write(" 0x%0x", cache_ram_cword_set$DOB[257:129]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655)
	$write("        CSet 0x%0x, CWord 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_cset_cword_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655)
	$write(" 0x%0x",
	       IF_cache_rg_victim_way_43_THEN_cache_ram_cword_ETC___d719);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655)
	$write(" 0x%0x",
	       IF_cache_rg_victim_way_43_THEN_cache_masterPor_ETC___d720);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  !cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__0_ULE_2_54___d655)
	$display("        Recording rdata in rg_lower_word64");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_rereq &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$display("    fa_req_ram_B tagCSet [0x%0x] cword_set [0x%0d]",
		 cache_rg_addr[11:6],
		 cache_rg_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	begin
	  v__h39869 = $stime;
	  #0;
	end
    v__h39863 = v__h39869 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$display("%0d: %s.rl_io_read_req; width_code 0x%0h vaddr %0h  paddr %0h",
		 v__h39863,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	begin
	  v__h40074 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("%0t            To fabric: ", v__h40074);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", size_val__h40049, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	begin
	  v__h40164 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("%0t            To fabric: ", v__h40164);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 8'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_61_EQ_0_66_OR_cach_ETC___d740 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	begin
	  v__h40313 = $stime;
	  #0;
	end
    v__h40307 = v__h40313 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h40307,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[71:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[67:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61 &&
	  cache_masterPortShim_rff$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61 &&
	  !cache_masterPortShim_rff$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && !cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	begin
	  v__h41453 = $stime;
	  #0;
	end
    v__h41447 = v__h41453 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && !cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h41447,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 { 65'd0, _theResult___fst__h40518 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && !cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	begin
	  v__h41555 = $stime;
	  #0;
	end
    v__h41549 = v__h41555 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && !cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		 v__h41549,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	begin
	  v__h41305 = $stime;
	  #0;
	end
    v__h41299 = v__h41305 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h41299,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 { 1'd0, b__h37668 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	begin
	  v__h41662 = $stime;
	  #0;
	end
    v__h41656 = v__h41662 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		 v__h41656,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	begin
	  v__h41772 = $stime;
	  #0;
	end
    v__h41766 = v__h41772 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h41766,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 { cache_rg_allow_cap && cache_rg_ld_val[128],
		   cache_rg_ld_val[127:0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	begin
	  v__h41862 = $stime;
	  #0;
	end
    v__h41856 = v__h41862 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$display("%0d: %s: rl_io_write_req; width_code 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h41856,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	begin
	  v__h42404 = $stime;
	  #0;
	end
    v__h42398 = v__h42404 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("%0d: %s.rl_discard_write_rsp: pending %0d ",
	       v__h42398,
	       "D_MMU_Cache",
	       $unsigned(b__h36494));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", cache_masterPortShim_bff$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	begin
	  v__h42446 = $stime;
	  #0;
	end
    v__h42440 = v__h42446 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		 v__h42440,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("'h%h", cache_masterPortShim_bff$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0 &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd1 &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset)
	begin
	  v__h3901 = $stime;
	  #0;
	end
    v__h3895 = v__h3901 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset)
	$display("%0d: %s: cache size %0d KB, associativity %0d, line size %0d bytes (= %0d XLEN words)",
		 v__h3895,
		 "D_MMU_Cache",
		 $signed(32'd8),
		 $signed(32'd2),
		 $signed(32'd32),
		 $signed(32'd4));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	begin
	  v__h43293 = $stime;
	  #0;
	end
    v__h43287 = v__h43293 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("%0d: %m.req: op:", v__h43287);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61 &&
	  req_op)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61 &&
	  !req_op)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(" width_code:%0d addr:0x%0h st_value:0x%0h",
	       req_width_code,
	       req_addr,
	       req_st_value,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write("    priv:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61 &&
	  req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61 &&
	  req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61 &&
	  req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61 &&
	  req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__0_ULE_1___d61)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  cache_w_req_width_code_wget__39_EQ_0b0_59_OR_c_ETC___d1000)
	$display("    fa_req_ram_B tagCSet [0x%0x] cword_set [0x%0d]",
		 req_addr[11:6],
		 req_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req && WILL_FIRE_RL_cache_do_reset_req)
	$display("Error: \"../../src_Core/Near_Mem_VM_WT_L1/MMU_Cache.bsv\", line 2039, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_do_reset_req] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
	$display("Error: \"../../src_Core/Near_Mem_VM_WT_L1/MMU_Cache.bsv\", line 2038, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_rl_start_cache_refill] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req && WILL_FIRE_RL_cache_rl_rereq)
	$display("Error: \"../../src_Core/Near_Mem_VM_WT_L1/MMU_Cache.bsv\", line 2037, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_rl_rereq] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop)
	$display("Error: \"../../src_Core/Near_Mem_VM_WT_L1/MMU_Cache.bsv\", line 2036, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_rl_cache_refill_rsps_loop] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkMMU_DCache

